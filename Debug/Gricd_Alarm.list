
Gricd_Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08007958  08007958  00017958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f80  08007f80  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08007f80  08007f80  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f80  08007f80  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f80  08007f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f84  08007f84  00017f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08007f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b0  200000c8  08008050  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08008050  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be85  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000347b  00000000  00000000  0003bf75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0003f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00040550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018634  00000000  00000000  00041580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167a1  00000000  00000000  00059bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913e4  00000000  00000000  00070355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101739  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004820  00000000  00000000  0010178c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000c8 	.word	0x200000c8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007940 	.word	0x08007940

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000cc 	.word	0x200000cc
 80000fc:	08007940 	.word	0x08007940

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <gsm_data_grabber>:




u16 gsm_data_grabber(const char *rawstr, u16 len, const char *start_id, char end_id, char *grabs, u16 max_grab)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b08f      	sub	sp, #60	; 0x3c
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	0008      	movs	r0, r1
 800042e:	607a      	str	r2, [r7, #4]
 8000430:	0019      	movs	r1, r3
 8000432:	230a      	movs	r3, #10
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	1c02      	adds	r2, r0, #0
 8000438:	801a      	strh	r2, [r3, #0]
 800043a:	2309      	movs	r3, #9
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	1c0a      	adds	r2, r1, #0
 8000440:	701a      	strb	r2, [r3, #0]
  u16 p = 0, j = 0, u = 0;
 8000442:	2336      	movs	r3, #54	; 0x36
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	2200      	movs	r2, #0
 8000448:	801a      	strh	r2, [r3, #0]
 800044a:	2434      	movs	r4, #52	; 0x34
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2200      	movs	r2, #0
 8000450:	801a      	strh	r2, [r3, #0]
 8000452:	2332      	movs	r3, #50	; 0x32
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	2200      	movs	r2, #0
 8000458:	801a      	strh	r2, [r3, #0]
  char s_id[32] = "";
 800045a:	2310      	movs	r3, #16
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	3304      	adds	r3, #4
 8000464:	221c      	movs	r2, #28
 8000466:	2100      	movs	r1, #0
 8000468:	0018      	movs	r0, r3
 800046a:	f005 ffbe 	bl	80063ea <memset>
  u8 grab = 0;
 800046e:	2331      	movs	r3, #49	; 0x31
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
  for (j=0; j < len; j++)
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2200      	movs	r2, #0
 800047a:	801a      	strh	r2, [r3, #0]
 800047c:	e06b      	b.n	8000556 <gsm_data_grabber+0x132>
  {
    if ((strcmp(s_id, start_id) == 0) && !grab)
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	2310      	movs	r3, #16
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	0011      	movs	r1, r2
 8000486:	0018      	movs	r0, r3
 8000488:	f7ff fe3a 	bl	8000100 <strcmp>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d107      	bne.n	80004a0 <gsm_data_grabber+0x7c>
 8000490:	2231      	movs	r2, #49	; 0x31
 8000492:	18bb      	adds	r3, r7, r2
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d102      	bne.n	80004a0 <gsm_data_grabber+0x7c>
      grab = 1;
 800049a:	18bb      	adds	r3, r7, r2
 800049c:	2201      	movs	r2, #1
 800049e:	701a      	strb	r2, [r3, #0]

    char c = rawstr[j];
 80004a0:	2334      	movs	r3, #52	; 0x34
 80004a2:	18fb      	adds	r3, r7, r3
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	18d2      	adds	r2, r2, r3
 80004aa:	2030      	movs	r0, #48	; 0x30
 80004ac:	183b      	adds	r3, r7, r0
 80004ae:	7812      	ldrb	r2, [r2, #0]
 80004b0:	701a      	strb	r2, [r3, #0]
    if (grab == 0)
 80004b2:	2331      	movs	r3, #49	; 0x31
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d119      	bne.n	80004f0 <gsm_data_grabber+0xcc>
    {
      if (c == start_id[u])
 80004bc:	2132      	movs	r1, #50	; 0x32
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	18d3      	adds	r3, r2, r3
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	183a      	adds	r2, r7, r0
 80004ca:	7812      	ldrb	r2, [r2, #0]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d10b      	bne.n	80004e8 <gsm_data_grabber+0xc4>
        s_id[u++] = c;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	187a      	adds	r2, r7, r1
 80004d6:	1c59      	adds	r1, r3, #1
 80004d8:	8011      	strh	r1, [r2, #0]
 80004da:	0019      	movs	r1, r3
 80004dc:	2310      	movs	r3, #16
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	183a      	adds	r2, r7, r0
 80004e2:	7812      	ldrb	r2, [r2, #0]
 80004e4:	545a      	strb	r2, [r3, r1]
 80004e6:	e003      	b.n	80004f0 <gsm_data_grabber+0xcc>

      else
        u = 0;
 80004e8:	2332      	movs	r3, #50	; 0x32
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	2200      	movs	r2, #0
 80004ee:	801a      	strh	r2, [r3, #0]
    }

    if (c == end_id && end_id != '\0' && grab == 1)
 80004f0:	2330      	movs	r3, #48	; 0x30
 80004f2:	18fa      	adds	r2, r7, r3
 80004f4:	2109      	movs	r1, #9
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	7812      	ldrb	r2, [r2, #0]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d108      	bne.n	8000512 <gsm_data_grabber+0xee>
 8000500:	187b      	adds	r3, r7, r1
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d004      	beq.n	8000512 <gsm_data_grabber+0xee>
 8000508:	2331      	movs	r3, #49	; 0x31
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d02a      	beq.n	8000568 <gsm_data_grabber+0x144>
      break;

    if (grab == 1 && p < max_grab)
 8000512:	2331      	movs	r3, #49	; 0x31
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d116      	bne.n	800054a <gsm_data_grabber+0x126>
 800051c:	2136      	movs	r1, #54	; 0x36
 800051e:	187a      	adds	r2, r7, r1
 8000520:	2344      	movs	r3, #68	; 0x44
 8000522:	2008      	movs	r0, #8
 8000524:	4684      	mov	ip, r0
 8000526:	44bc      	add	ip, r7
 8000528:	4463      	add	r3, ip
 800052a:	8812      	ldrh	r2, [r2, #0]
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	429a      	cmp	r2, r3
 8000530:	d20b      	bcs.n	800054a <gsm_data_grabber+0x126>
    {
      grabs[p++] = c;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	187a      	adds	r2, r7, r1
 8000538:	1c59      	adds	r1, r3, #1
 800053a:	8011      	strh	r1, [r2, #0]
 800053c:	001a      	movs	r2, r3
 800053e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000540:	189b      	adds	r3, r3, r2
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	18ba      	adds	r2, r7, r2
 8000546:	7812      	ldrb	r2, [r2, #0]
 8000548:	701a      	strb	r2, [r3, #0]
  for (j=0; j < len; j++)
 800054a:	2134      	movs	r1, #52	; 0x34
 800054c:	187b      	adds	r3, r7, r1
 800054e:	881a      	ldrh	r2, [r3, #0]
 8000550:	187b      	adds	r3, r7, r1
 8000552:	3201      	adds	r2, #1
 8000554:	801a      	strh	r2, [r3, #0]
 8000556:	2334      	movs	r3, #52	; 0x34
 8000558:	18fa      	adds	r2, r7, r3
 800055a:	230a      	movs	r3, #10
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	8812      	ldrh	r2, [r2, #0]
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	429a      	cmp	r2, r3
 8000564:	d38b      	bcc.n	800047e <gsm_data_grabber+0x5a>
 8000566:	e000      	b.n	800056a <gsm_data_grabber+0x146>
      break;
 8000568:	46c0      	nop			; (mov r8, r8)
    }
  }

  grabs[p] = '\0';
 800056a:	2136      	movs	r1, #54	; 0x36
 800056c:	187b      	adds	r3, r7, r1
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000572:	18d3      	adds	r3, r2, r3
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]

  return p;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	881b      	ldrh	r3, [r3, #0]
}
 800057c:	0018      	movs	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	b00f      	add	sp, #60	; 0x3c
 8000582:	bd90      	pop	{r4, r7, pc}

08000584 <putStringInArray>:

void putStringInArray(const char* s, const char* oldW, const char* newW, char* result, int rLen)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
  //char* result;
  int i, cnt = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
  int newWlen = strlen(newW);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	0018      	movs	r0, r3
 800059a:	f7ff fdbb 	bl	8000114 <strlen>
 800059e:	0003      	movs	r3, r0
 80005a0:	617b      	str	r3, [r7, #20]
  int oldWlen = strlen(oldW);
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	0018      	movs	r0, r3
 80005a6:	f7ff fdb5 	bl	8000114 <strlen>
 80005aa:	0003      	movs	r3, r0
 80005ac:	613b      	str	r3, [r7, #16]

  // Counting the number of times old word
  // occur in the string
  for (i = 0; s[i] != '\0'; i++)
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
 80005b2:	e018      	b.n	80005e6 <putStringInArray+0x62>
  {
    if (strstr(&s[i], oldW) == &s[i])
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	18d3      	adds	r3, r2, r3
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	0011      	movs	r1, r2
 80005be:	0018      	movs	r0, r3
 80005c0:	f005 ffe7 	bl	8006592 <strstr>
 80005c4:	0001      	movs	r1, r0
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	18d3      	adds	r3, r2, r3
 80005cc:	4299      	cmp	r1, r3
 80005ce:	d107      	bne.n	80005e0 <putStringInArray+0x5c>
    {
      cnt++;
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	3301      	adds	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
      // Jumping to index after the old word.
      i += oldWlen - 1;
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	3b01      	subs	r3, #1
 80005da:	69fa      	ldr	r2, [r7, #28]
 80005dc:	18d3      	adds	r3, r2, r3
 80005de:	61fb      	str	r3, [r7, #28]
  for (i = 0; s[i] != '\0'; i++)
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	3301      	adds	r3, #1
 80005e4:	61fb      	str	r3, [r7, #28]
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	18d3      	adds	r3, r2, r3
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1e0      	bne.n	80005b4 <putStringInArray+0x30>
    }
  }

  i = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  while (*s)
 80005f6:	e029      	b.n	800064c <putStringInArray+0xc8>
  {
    // compare the substring with the result
    if (strstr(s, oldW) == s)
 80005f8:	68ba      	ldr	r2, [r7, #8]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	0011      	movs	r1, r2
 80005fe:	0018      	movs	r0, r3
 8000600:	f005 ffc7 	bl	8006592 <strstr>
 8000604:	0002      	movs	r2, r0
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4293      	cmp	r3, r2
 800060a:	d110      	bne.n	800062e <putStringInArray+0xaa>
    {
      strcpy(&result[i], newW);
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	18d3      	adds	r3, r2, r3
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f005 ffb3 	bl	8006582 <strcpy>
      i += newWlen;
 800061c:	69fa      	ldr	r2, [r7, #28]
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	18d3      	adds	r3, r2, r3
 8000622:	61fb      	str	r3, [r7, #28]
      s += oldWlen;
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	18d3      	adds	r3, r2, r3
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e00e      	b.n	800064c <putStringInArray+0xc8>
    }
    else
    {
      if (i < rLen)
 800062e:	69fa      	ldr	r2, [r7, #28]
 8000630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000632:	429a      	cmp	r2, r3
 8000634:	da0a      	bge.n	800064c <putStringInArray+0xc8>
        result[i++] = *s++;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	60fa      	str	r2, [r7, #12]
 800063c:	69fa      	ldr	r2, [r7, #28]
 800063e:	1c51      	adds	r1, r2, #1
 8000640:	61f9      	str	r1, [r7, #28]
 8000642:	0011      	movs	r1, r2
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	1852      	adds	r2, r2, r1
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	7013      	strb	r3, [r2, #0]
  while (*s)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1d1      	bne.n	80005f8 <putStringInArray+0x74>
    }
  }

  result[i] = '\0';
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	18d3      	adds	r3, r2, r3
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b008      	add	sp, #32
 8000664:	bd80      	pop	{r7, pc}

08000666 <makeIntArr>:


int makeIntArr(char *buf, int len, s16* arrInt)
{
 8000666:	b590      	push	{r4, r7, lr}
 8000668:	b08b      	sub	sp, #44	; 0x2c
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
  char _temp[10];
  int j = 0, Len = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]

  for (int i = 0; i <= len; i++)
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
 800067e:	e06c      	b.n	800075a <makeIntArr+0xf4>
  {
    char c = buf[i];
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	18d2      	adds	r2, r2, r3
 8000686:	211b      	movs	r1, #27
 8000688:	187b      	adds	r3, r7, r1
 800068a:	7812      	ldrb	r2, [r2, #0]
 800068c:	701a      	strb	r2, [r3, #0]
    if ((c == ',') || (c == ' ') || (c == '.') || (c == '/') || (c == ':') || i == len)
 800068e:	000a      	movs	r2, r1
 8000690:	18bb      	adds	r3, r7, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b2c      	cmp	r3, #44	; 0x2c
 8000696:	d013      	beq.n	80006c0 <makeIntArr+0x5a>
 8000698:	18bb      	adds	r3, r7, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b20      	cmp	r3, #32
 800069e:	d00f      	beq.n	80006c0 <makeIntArr+0x5a>
 80006a0:	18bb      	adds	r3, r7, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b2e      	cmp	r3, #46	; 0x2e
 80006a6:	d00b      	beq.n	80006c0 <makeIntArr+0x5a>
 80006a8:	18bb      	adds	r3, r7, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b2f      	cmp	r3, #47	; 0x2f
 80006ae:	d007      	beq.n	80006c0 <makeIntArr+0x5a>
 80006b0:	18bb      	adds	r3, r7, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b3a      	cmp	r3, #58	; 0x3a
 80006b6:	d003      	beq.n	80006c0 <makeIntArr+0x5a>
 80006b8:	69fa      	ldr	r2, [r7, #28]
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d11d      	bne.n	80006fc <makeIntArr+0x96>
    {
      if (j > 0 && strlen(_temp) > 0)
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dd45      	ble.n	8000752 <makeIntArr+0xec>
 80006c6:	2410      	movs	r4, #16
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d040      	beq.n	8000752 <makeIntArr+0xec>
      {
        arrInt[Len++] = (s16)atoi(_temp);
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	0018      	movs	r0, r3
 80006d4:	f005 fe50 	bl	8006378 <atoi>
 80006d8:	0001      	movs	r1, r0
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	623a      	str	r2, [r7, #32]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	b20a      	sxth	r2, r1
 80006e8:	801a      	strh	r2, [r3, #0]
        memset(_temp, 0, sizeof(_temp));
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	220a      	movs	r2, #10
 80006ee:	2100      	movs	r1, #0
 80006f0:	0018      	movs	r0, r3
 80006f2:	f005 fe7a 	bl	80063ea <memset>
        j = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
      if (j > 0 && strlen(_temp) > 0)
 80006fa:	e02a      	b.n	8000752 <makeIntArr+0xec>
      }
    }
    else if (c == '-')
 80006fc:	231b      	movs	r3, #27
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b2d      	cmp	r3, #45	; 0x2d
 8000704:	d113      	bne.n	800072e <makeIntArr+0xc8>
    {
      arrInt[Len++] = -1;
 8000706:	6a3b      	ldr	r3, [r7, #32]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	623a      	str	r2, [r7, #32]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	18d3      	adds	r3, r2, r3
 8000712:	2201      	movs	r2, #1
 8000714:	4252      	negs	r2, r2
 8000716:	801a      	strh	r2, [r3, #0]
      memset(_temp, 0, sizeof(_temp));
 8000718:	2310      	movs	r3, #16
 800071a:	18fb      	adds	r3, r7, r3
 800071c:	220a      	movs	r2, #10
 800071e:	2100      	movs	r1, #0
 8000720:	0018      	movs	r0, r3
 8000722:	f005 fe62 	bl	80063ea <memset>
      i++; //move i one step
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3301      	adds	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
 800072c:	e012      	b.n	8000754 <makeIntArr+0xee>
    }
    else if (c >= 48 && c <= 57)
 800072e:	211b      	movs	r1, #27
 8000730:	187b      	adds	r3, r7, r1
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b2f      	cmp	r3, #47	; 0x2f
 8000736:	d90d      	bls.n	8000754 <makeIntArr+0xee>
 8000738:	187b      	adds	r3, r7, r1
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b39      	cmp	r3, #57	; 0x39
 800073e:	d809      	bhi.n	8000754 <makeIntArr+0xee>
    {
      _temp[j++] = c;
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	627a      	str	r2, [r7, #36]	; 0x24
 8000746:	2210      	movs	r2, #16
 8000748:	18ba      	adds	r2, r7, r2
 800074a:	1879      	adds	r1, r7, r1
 800074c:	7809      	ldrb	r1, [r1, #0]
 800074e:	54d1      	strb	r1, [r2, r3]
 8000750:	e000      	b.n	8000754 <makeIntArr+0xee>
      if (j > 0 && strlen(_temp) > 0)
 8000752:	46c0      	nop			; (mov r8, r8)
  for (int i = 0; i <= len; i++)
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	3301      	adds	r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fa      	ldr	r2, [r7, #28]
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	429a      	cmp	r2, r3
 8000760:	dd8e      	ble.n	8000680 <makeIntArr+0x1a>
    }

  }
  return Len;
 8000762:	6a3b      	ldr	r3, [r7, #32]
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	b00b      	add	sp, #44	; 0x2c
 800076a:	bd90      	pop	{r4, r7, pc}

0800076c <setDateTime>:

void setDateTime(char *buf, int len)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b087      	sub	sp, #28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  //yr, mn, dy, hr, mm,ss;
  s16 timeTemp[6] = {0};
 8000776:	2408      	movs	r4, #8
 8000778:	193b      	adds	r3, r7, r4
 800077a:	0018      	movs	r0, r3
 800077c:	230c      	movs	r3, #12
 800077e:	001a      	movs	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	f005 fe32 	bl	80063ea <memset>
  s16 P = makeIntArr(buf, len, timeTemp);
 8000786:	193a      	adds	r2, r7, r4
 8000788:	6839      	ldr	r1, [r7, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	0018      	movs	r0, r3
 800078e:	f7ff ff6a 	bl	8000666 <makeIntArr>
 8000792:	0002      	movs	r2, r0
 8000794:	2116      	movs	r1, #22
 8000796:	187b      	adds	r3, r7, r1
 8000798:	801a      	strh	r2, [r3, #0]
  if (P < 6 ) return;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	5e9b      	ldrsh	r3, [r3, r2]
 80007a0:	2b05      	cmp	r3, #5
 80007a2:	dd44      	ble.n	800082e <setDateTime+0xc2>

  if(timeTemp[0] >= 2000) timeTemp[0] = timeTemp[0] - 2000;
 80007a4:	0021      	movs	r1, r4
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2200      	movs	r2, #0
 80007aa:	5e9a      	ldrsh	r2, [r3, r2]
 80007ac:	23fa      	movs	r3, #250	; 0xfa
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	429a      	cmp	r2, r3
 80007b2:	db0a      	blt.n	80007ca <setDateTime+0x5e>
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	5e9b      	ldrsh	r3, [r3, r2]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <setDateTime+0xcc>)
 80007be:	4694      	mov	ip, r2
 80007c0:	4463      	add	r3, ip
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	801a      	strh	r2, [r3, #0]

  sDate.Year = timeTemp[0];
 80007ca:	2408      	movs	r4, #8
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2200      	movs	r2, #0
 80007d0:	5e9b      	ldrsh	r3, [r3, r2]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <setDateTime+0xd0>)
 80007d6:	70da      	strb	r2, [r3, #3]
  sDate.Month = timeTemp[1];
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2202      	movs	r2, #2
 80007dc:	5e9b      	ldrsh	r3, [r3, r2]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <setDateTime+0xd0>)
 80007e2:	705a      	strb	r2, [r3, #1]
  sDate.Date = timeTemp[2];
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2204      	movs	r2, #4
 80007e8:	5e9b      	ldrsh	r3, [r3, r2]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <setDateTime+0xd0>)
 80007ee:	709a      	strb	r2, [r3, #2]
  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80007f0:	4912      	ldr	r1, [pc, #72]	; (800083c <setDateTime+0xd0>)
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <setDateTime+0xd4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	0018      	movs	r0, r3
 80007f8:	f003 fd6e 	bl	80042d8 <HAL_RTC_SetDate>


  sTime.Hours = timeTemp[3];
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2206      	movs	r2, #6
 8000800:	5e9b      	ldrsh	r3, [r3, r2]
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <setDateTime+0xd8>)
 8000806:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = timeTemp[4];
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2208      	movs	r2, #8
 800080c:	5e9b      	ldrsh	r3, [r3, r2]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <setDateTime+0xd8>)
 8000812:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = timeTemp[5];
 8000814:	193b      	adds	r3, r7, r4
 8000816:	220a      	movs	r2, #10
 8000818:	5e9b      	ldrsh	r3, [r3, r2]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <setDateTime+0xd8>)
 800081e:	709a      	strb	r2, [r3, #2]
  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000820:	4908      	ldr	r1, [pc, #32]	; (8000844 <setDateTime+0xd8>)
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <setDateTime+0xd4>)
 8000824:	2200      	movs	r2, #0
 8000826:	0018      	movs	r0, r3
 8000828:	f003 fc52 	bl	80040d0 <HAL_RTC_SetTime>
 800082c:	e000      	b.n	8000830 <setDateTime+0xc4>
  if (P < 6 ) return;
 800082e:	46c0      	nop			; (mov r8, r8)


}
 8000830:	46bd      	mov	sp, r7
 8000832:	b007      	add	sp, #28
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	fffff830 	.word	0xfffff830
 800083c:	200003c8 	.word	0x200003c8
 8000840:	200003cc 	.word	0x200003cc
 8000844:	20000324 	.word	0x20000324

08000848 <getTime_string>:

s16 getTime_string(char* timeStr)
{
 8000848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af04      	add	r7, sp, #16
 800084e:	6078      	str	r0, [r7, #4]
  s16 len = 0;
 8000850:	210e      	movs	r1, #14
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	801a      	strh	r2, [r3, #0]
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000858:	4918      	ldr	r1, [pc, #96]	; (80008bc <getTime_string+0x74>)
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <getTime_string+0x78>)
 800085c:	2200      	movs	r2, #0
 800085e:	0018      	movs	r0, r3
 8000860:	f003 fdcc 	bl	80043fc <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000864:	4917      	ldr	r1, [pc, #92]	; (80008c4 <getTime_string+0x7c>)
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <getTime_string+0x78>)
 8000868:	2200      	movs	r2, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f003 fcd8 	bl	8004220 <HAL_RTC_GetTime>
  len = sprintf(timeStr, "%u/%u/%u %02u:%02u:%02u", sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <getTime_string+0x74>)
 8000872:	78db      	ldrb	r3, [r3, #3]
 8000874:	001e      	movs	r6, r3
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <getTime_string+0x74>)
 8000878:	785b      	ldrb	r3, [r3, #1]
 800087a:	469c      	mov	ip, r3
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <getTime_string+0x74>)
 800087e:	789b      	ldrb	r3, [r3, #2]
 8000880:	001a      	movs	r2, r3
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <getTime_string+0x7c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	001c      	movs	r4, r3
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <getTime_string+0x7c>)
 800088a:	785b      	ldrb	r3, [r3, #1]
 800088c:	001d      	movs	r5, r3
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <getTime_string+0x7c>)
 8000890:	789b      	ldrb	r3, [r3, #2]
 8000892:	490d      	ldr	r1, [pc, #52]	; (80008c8 <getTime_string+0x80>)
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	9303      	str	r3, [sp, #12]
 8000898:	9502      	str	r5, [sp, #8]
 800089a:	9401      	str	r4, [sp, #4]
 800089c:	9200      	str	r2, [sp, #0]
 800089e:	4663      	mov	r3, ip
 80008a0:	0032      	movs	r2, r6
 80008a2:	f005 fe41 	bl	8006528 <siprintf>
 80008a6:	0002      	movs	r2, r0
 80008a8:	210e      	movs	r1, #14
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	801a      	strh	r2, [r3, #0]
  return len;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	5e9b      	ldrsh	r3, [r3, r2]
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b005      	add	sp, #20
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008bc:	200003c8 	.word	0x200003c8
 80008c0:	200003cc 	.word	0x200003cc
 80008c4:	20000324 	.word	0x20000324
 80008c8:	08007958 	.word	0x08007958

080008cc <synchronize_time>:

void synchronize_time(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  //format: yr/mn/dd, hr:mm:ss+tz

  if (gprs_time_found && !time_synchronized)
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <synchronize_time+0x48>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d01a      	beq.n	800090e <synchronize_time+0x42>
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <synchronize_time+0x4c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2201      	movs	r2, #1
 80008de:	4053      	eors	r3, r2
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d013      	beq.n	800090e <synchronize_time+0x42>
  {
    setDateTime(ttimeBuf, tLen);
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <synchronize_time+0x50>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	001a      	movs	r2, r3
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <synchronize_time+0x54>)
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff ff3b 	bl	800076c <setDateTime>
#ifdef debug
    printf(("Time Synchronized using %s:%d\r\n"),ttimeBuf, tLen);
#endif
    memset(ttimeBuf, 0, sizeof(ttimeBuf));
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <synchronize_time+0x54>)
 80008f8:	2220      	movs	r2, #32
 80008fa:	2100      	movs	r1, #0
 80008fc:	0018      	movs	r0, r3
 80008fe:	f005 fd74 	bl	80063ea <memset>
    tLen = 0;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <synchronize_time+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
    time_synchronized = true;
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <synchronize_time+0x4c>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
  }
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000314 	.word	0x20000314
 8000918:	200000e4 	.word	0x200000e4
 800091c:	200002fa 	.word	0x200002fa
 8000920:	20000298 	.word	0x20000298

08000924 <sendPacket_Handler>:
u32 							    gsm_pwr_tmr						=			1;



void sendPacket_Handler(void)
{
 8000924:	b5b0      	push	{r4, r5, r7, lr}
 8000926:	b0c4      	sub	sp, #272	; 0x110
 8000928:	af02      	add	r7, sp, #8
	if(tcp_alive && (respond || HAL_GetTick() >= (send_tmr + MAX_BEAT_TIME))) //90s
 800092a:	4b51      	ldr	r3, [pc, #324]	; (8000a70 <sendPacket_Handler+0x14c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d100      	bne.n	8000934 <sendPacket_Handler+0x10>
 8000932:	e098      	b.n	8000a66 <sendPacket_Handler+0x142>
 8000934:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <sendPacket_Handler+0x150>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10a      	bne.n	8000952 <sendPacket_Handler+0x2e>
 800093c:	f002 f928 	bl	8002b90 <HAL_GetTick>
 8000940:	0002      	movs	r2, r0
 8000942:	4b4d      	ldr	r3, [pc, #308]	; (8000a78 <sendPacket_Handler+0x154>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	494d      	ldr	r1, [pc, #308]	; (8000a7c <sendPacket_Handler+0x158>)
 8000948:	468c      	mov	ip, r1
 800094a:	4463      	add	r3, ip
 800094c:	429a      	cmp	r2, r3
 800094e:	d200      	bcs.n	8000952 <sendPacket_Handler+0x2e>
 8000950:	e089      	b.n	8000a66 <sendPacket_Handler+0x142>
	{
		memset(RES_BUFF, 0, sizeof(RES_BUFF));
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	005a      	lsls	r2, r3, #1
 8000956:	4b4a      	ldr	r3, [pc, #296]	; (8000a80 <sendPacket_Handler+0x15c>)
 8000958:	2100      	movs	r1, #0
 800095a:	0018      	movs	r0, r3
 800095c:	f005 fd45 	bl	80063ea <memset>
		if(respond)
 8000960:	4b44      	ldr	r3, [pc, #272]	; (8000a74 <sendPacket_Handler+0x150>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d015      	beq.n	8000994 <sendPacket_Handler+0x70>
		{
			strcat(RES_BUFF, "##");
 8000968:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <sendPacket_Handler+0x15c>)
 800096a:	0018      	movs	r0, r3
 800096c:	f7ff fbd2 	bl	8000114 <strlen>
 8000970:	0003      	movs	r3, r0
 8000972:	001a      	movs	r2, r3
 8000974:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <sendPacket_Handler+0x15c>)
 8000976:	18d2      	adds	r2, r2, r3
 8000978:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <sendPacket_Handler+0x160>)
 800097a:	0010      	movs	r0, r2
 800097c:	0019      	movs	r1, r3
 800097e:	2303      	movs	r3, #3
 8000980:	001a      	movs	r2, r3
 8000982:	f005 fd29 	bl	80063d8 <memcpy>
			strcat(RES_BUFF, userInput);
 8000986:	4a40      	ldr	r2, [pc, #256]	; (8000a88 <sendPacket_Handler+0x164>)
 8000988:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <sendPacket_Handler+0x15c>)
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f005 fdeb 	bl	8006568 <strcat>
 8000992:	e04e      	b.n	8000a32 <sendPacket_Handler+0x10e>
			//putStringInArray(userInput, server_start_str, "##", RES_BUFF, sizeof(RES_BUFF));
		}
		else
		{
			memset(ttimeBuf, 0, sizeof(ttimeBuf));
 8000994:	4b3d      	ldr	r3, [pc, #244]	; (8000a8c <sendPacket_Handler+0x168>)
 8000996:	2220      	movs	r2, #32
 8000998:	2100      	movs	r1, #0
 800099a:	0018      	movs	r0, r3
 800099c:	f005 fd25 	bl	80063ea <memset>
			tLen = getTime_string(ttimeBuf);
 80009a0:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <sendPacket_Handler+0x168>)
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff ff50 	bl	8000848 <getTime_string>
 80009a8:	0003      	movs	r3, r0
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	4b38      	ldr	r3, [pc, #224]	; (8000a90 <sendPacket_Handler+0x16c>)
 80009ae:	701a      	strb	r2, [r3, #0]
			char temp_str[128] = "", temp_str1[128] = "", foo[4] = "";
 80009b0:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <sendPacket_Handler+0x170>)
 80009b2:	2284      	movs	r2, #132	; 0x84
 80009b4:	0052      	lsls	r2, r2, #1
 80009b6:	4694      	mov	ip, r2
 80009b8:	44bc      	add	ip, r7
 80009ba:	4463      	add	r3, ip
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	3304      	adds	r3, #4
 80009c2:	227c      	movs	r2, #124	; 0x7c
 80009c4:	2100      	movs	r1, #0
 80009c6:	0018      	movs	r0, r3
 80009c8:	f005 fd0f 	bl	80063ea <memset>
 80009cc:	2584      	movs	r5, #132	; 0x84
 80009ce:	197b      	adds	r3, r7, r5
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	3304      	adds	r3, #4
 80009d6:	227c      	movs	r2, #124	; 0x7c
 80009d8:	2100      	movs	r1, #0
 80009da:	0018      	movs	r0, r3
 80009dc:	f005 fd05 	bl	80063ea <memset>
 80009e0:	1d7b      	adds	r3, r7, #5
 80009e2:	33ff      	adds	r3, #255	; 0xff
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
			sprintf(foo, "%u", alarm);
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <sendPacket_Handler+0x174>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	001a      	movs	r2, r3
 80009ee:	492b      	ldr	r1, [pc, #172]	; (8000a9c <sendPacket_Handler+0x178>)
 80009f0:	1d7b      	adds	r3, r7, #5
 80009f2:	33ff      	adds	r3, #255	; 0xff
 80009f4:	0018      	movs	r0, r3
 80009f6:	f005 fd97 	bl	8006528 <siprintf>
			putStringInArray(payload, "{0}", ttimeBuf, temp_str, sizeof(temp_str));
 80009fa:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <sendPacket_Handler+0x17c>)
 80009fc:	6818      	ldr	r0, [r3, #0]
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <sendPacket_Handler+0x168>)
 8000a02:	4928      	ldr	r1, [pc, #160]	; (8000aa4 <sendPacket_Handler+0x180>)
 8000a04:	2480      	movs	r4, #128	; 0x80
 8000a06:	9400      	str	r4, [sp, #0]
 8000a08:	f7ff fdbc 	bl	8000584 <putStringInArray>
			putStringInArray(temp_str, "{1}", IMEI, temp_str1, sizeof(temp_str1));
 8000a0c:	197b      	adds	r3, r7, r5
 8000a0e:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <sendPacket_Handler+0x184>)
 8000a10:	4926      	ldr	r1, [pc, #152]	; (8000aac <sendPacket_Handler+0x188>)
 8000a12:	1d38      	adds	r0, r7, #4
 8000a14:	2480      	movs	r4, #128	; 0x80
 8000a16:	9400      	str	r4, [sp, #0]
 8000a18:	f7ff fdb4 	bl	8000584 <putStringInArray>
			putStringInArray(temp_str1, "{2}", foo, RES_BUFF, sizeof(RES_BUFF));
 8000a1c:	4c18      	ldr	r4, [pc, #96]	; (8000a80 <sendPacket_Handler+0x15c>)
 8000a1e:	1d7a      	adds	r2, r7, #5
 8000a20:	32ff      	adds	r2, #255	; 0xff
 8000a22:	4923      	ldr	r1, [pc, #140]	; (8000ab0 <sendPacket_Handler+0x18c>)
 8000a24:	1978      	adds	r0, r7, r5
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	0023      	movs	r3, r4
 8000a2e:	f7ff fda9 	bl	8000584 <putStringInArray>
		}

        strcat(RES_BUFF, end_str);
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <sendPacket_Handler+0x190>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <sendPacket_Handler+0x15c>)
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f005 fd94 	bl	8006568 <strcat>
        Res_Len = strlen(RES_BUFF);
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <sendPacket_Handler+0x15c>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fb66 	bl	8000114 <strlen>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <sendPacket_Handler+0x194>)
 8000a4e:	801a      	strh	r2, [r3, #0]


#ifdef debug
        printf(("Sending Formed: %s<->%d\n"), RES_BUFF, Res_Len);
#endif
		gsm_stage = _NET_STAT;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <sendPacket_Handler+0x198>)
 8000a52:	2204      	movs	r2, #4
 8000a54:	701a      	strb	r2, [r3, #0]
		send_tmr = HAL_GetTick();
 8000a56:	f002 f89b 	bl	8002b90 <HAL_GetTick>
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <sendPacket_Handler+0x154>)
 8000a5e:	601a      	str	r2, [r3, #0]
		respond = false;
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <sendPacket_Handler+0x150>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
	}
}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b042      	add	sp, #264	; 0x108
 8000a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	20000311 	.word	0x20000311
 8000a74:	200000ec 	.word	0x200000ec
 8000a78:	200000e8 	.word	0x200000e8
 8000a7c:	00015f90 	.word	0x00015f90
 8000a80:	20000110 	.word	0x20000110
 8000a84:	0800798c 	.word	0x0800798c
 8000a88:	200002b8 	.word	0x200002b8
 8000a8c:	20000298 	.word	0x20000298
 8000a90:	200002fa 	.word	0x200002fa
 8000a94:	fffffefc 	.word	0xfffffefc
 8000a98:	200000ed 	.word	0x200000ed
 8000a9c:	08007990 	.word	0x08007990
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	08007994 	.word	0x08007994
 8000aa8:	20000230 	.word	0x20000230
 8000aac:	08007998 	.word	0x08007998
 8000ab0:	0800799c 	.word	0x0800799c
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000300 	.word	0x20000300
 8000abc:	20000310 	.word	0x20000310

08000ac0 <receivePacket_Handler>:

void receivePacket_Handler(void)
{//$$867157042962209,169389728377,1#
 8000ac0:	b5b0      	push	{r4, r5, r7, lr}
 8000ac2:	b09c      	sub	sp, #112	; 0x70
 8000ac4:	af02      	add	r7, sp, #8
	//$$imei,serial_number,alarm_state#

	if(inputLen > 0)
 8000ac6:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <receivePacket_Handler+0xf8>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d06f      	beq.n	8000bae <receivePacket_Handler+0xee>
	{
		char foo[4] = "";
 8000ace:	2564      	movs	r5, #100	; 0x64
 8000ad0:	197b      	adds	r3, r7, r5
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
#ifdef debug
		printf(("received: %s <-> %d\r\n"), userInput, inputLen);
#endif
        char tem_bb[32] = "", bbload[64] = "";
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	3304      	adds	r3, #4
 8000ade:	221c      	movs	r2, #28
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f005 fc81 	bl	80063ea <memset>
 8000ae8:	2424      	movs	r4, #36	; 0x24
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	3304      	adds	r3, #4
 8000af2:	223c      	movs	r2, #60	; 0x3c
 8000af4:	2100      	movs	r1, #0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f005 fc77 	bl	80063ea <memset>
        gsm_data_grabber(userInput, inputLen, IMEI, ',', tem_bb, sizeof(tem_bb));
 8000afc:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <receivePacket_Handler+0xf8>)
 8000afe:	8819      	ldrh	r1, [r3, #0]
 8000b00:	4a2e      	ldr	r2, [pc, #184]	; (8000bbc <receivePacket_Handler+0xfc>)
 8000b02:	482f      	ldr	r0, [pc, #188]	; (8000bc0 <receivePacket_Handler+0x100>)
 8000b04:	2320      	movs	r3, #32
 8000b06:	9301      	str	r3, [sp, #4]
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	232c      	movs	r3, #44	; 0x2c
 8000b0e:	f7ff fc89 	bl	8000424 <gsm_data_grabber>
        strcat(bbload, tem_bb);
 8000b12:	1d3a      	adds	r2, r7, #4
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	0011      	movs	r1, r2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f005 fd25 	bl	8006568 <strcat>
        strcat(bbload, ",");
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff faf7 	bl	8000114 <strlen>
 8000b26:	0003      	movs	r3, r0
 8000b28:	001a      	movs	r2, r3
 8000b2a:	193b      	adds	r3, r7, r4
 8000b2c:	189a      	adds	r2, r3, r2
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <receivePacket_Handler+0x104>)
 8000b30:	0010      	movs	r0, r2
 8000b32:	0019      	movs	r1, r3
 8000b34:	2302      	movs	r3, #2
 8000b36:	001a      	movs	r2, r3
 8000b38:	f005 fc4e 	bl	80063d8 <memcpy>
        gsm_data_grabber(userInput, inputLen, bbload, ',', tem_bb, sizeof(tem_bb));
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <receivePacket_Handler+0xf8>)
 8000b3e:	8819      	ldrh	r1, [r3, #0]
 8000b40:	193a      	adds	r2, r7, r4
 8000b42:	481f      	ldr	r0, [pc, #124]	; (8000bc0 <receivePacket_Handler+0x100>)
 8000b44:	2320      	movs	r3, #32
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	232c      	movs	r3, #44	; 0x2c
 8000b4e:	f7ff fc69 	bl	8000424 <gsm_data_grabber>
        strcat(bbload, tem_bb);
 8000b52:	1d3a      	adds	r2, r7, #4
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f005 fd05 	bl	8006568 <strcat>
        strcat(bbload, ",");
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff fad7 	bl	8000114 <strlen>
 8000b66:	0003      	movs	r3, r0
 8000b68:	001a      	movs	r2, r3
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	189a      	adds	r2, r3, r2
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <receivePacket_Handler+0x104>)
 8000b70:	0010      	movs	r0, r2
 8000b72:	0019      	movs	r1, r3
 8000b74:	2302      	movs	r3, #2
 8000b76:	001a      	movs	r2, r3
 8000b78:	f005 fc2e 	bl	80063d8 <memcpy>
        gsm_data_grabber(userInput, inputLen, bbload, ',', foo, sizeof(foo));
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <receivePacket_Handler+0xf8>)
 8000b7e:	8819      	ldrh	r1, [r3, #0]
 8000b80:	193a      	adds	r2, r7, r4
 8000b82:	480f      	ldr	r0, [pc, #60]	; (8000bc0 <receivePacket_Handler+0x100>)
 8000b84:	2304      	movs	r3, #4
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	197b      	adds	r3, r7, r5
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	232c      	movs	r3, #44	; 0x2c
 8000b8e:	f7ff fc49 	bl	8000424 <gsm_data_grabber>
		alarm = atoi(foo);
 8000b92:	197b      	adds	r3, r7, r5
 8000b94:	0018      	movs	r0, r3
 8000b96:	f005 fbef 	bl	8006378 <atoi>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <receivePacket_Handler+0x108>)
 8000ba0:	701a      	strb	r2, [r3, #0]
#ifdef debug
		printf(("alarm: %s:%d\r\n"), foo, alarm);
#endif
		inputLen = 0;
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <receivePacket_Handler+0xf8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	801a      	strh	r2, [r3, #0]
		respond = true;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <receivePacket_Handler+0x10c>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
	}
}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b01a      	add	sp, #104	; 0x68
 8000bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	200002fc 	.word	0x200002fc
 8000bbc:	20000230 	.word	0x20000230
 8000bc0:	200002b8 	.word	0x200002b8
 8000bc4:	080079a0 	.word	0x080079a0
 8000bc8:	200000ed 	.word	0x200000ed
 8000bcc:	200000ec 	.word	0x200000ec

08000bd0 <send_GSM_str>:


void send_GSM_str(const char *str, u16 str_len, u16 wait, bool endTrans)
{
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	000c      	movs	r4, r1
 8000bda:	0010      	movs	r0, r2
 8000bdc:	0019      	movs	r1, r3
 8000bde:	250a      	movs	r5, #10
 8000be0:	197b      	adds	r3, r7, r5
 8000be2:	1c22      	adds	r2, r4, #0
 8000be4:	801a      	strh	r2, [r3, #0]
 8000be6:	2308      	movs	r3, #8
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	1c02      	adds	r2, r0, #0
 8000bec:	801a      	strh	r2, [r3, #0]
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	1c0a      	adds	r2, r1, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
	if(str_len > 0)
 8000bf4:	197b      	adds	r3, r7, r5
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d019      	beq.n	8000c30 <send_GSM_str+0x60>
	{
		HAL_UART_Transmit(&huart2, (u8*)str, str_len, 1000);
 8000bfc:	23fa      	movs	r3, #250	; 0xfa
 8000bfe:	009c      	lsls	r4, r3, #2
 8000c00:	197b      	adds	r3, r7, r5
 8000c02:	881a      	ldrh	r2, [r3, #0]
 8000c04:	68f9      	ldr	r1, [r7, #12]
 8000c06:	4811      	ldr	r0, [pc, #68]	; (8000c4c <send_GSM_str+0x7c>)
 8000c08:	0023      	movs	r3, r4
 8000c0a:	f004 f9d5 	bl	8004fb8 <HAL_UART_Transmit>
		if(endTrans)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d006      	beq.n	8000c24 <send_GSM_str+0x54>
			HAL_UART_Transmit(&huart2, eof, 1, 50);
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <send_GSM_str+0x80>)
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <send_GSM_str+0x7c>)
 8000c1a:	2332      	movs	r3, #50	; 0x32
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f004 f9cb 	bl	8004fb8 <HAL_UART_Transmit>
 8000c22:	e005      	b.n	8000c30 <send_GSM_str+0x60>
		else
			HAL_UART_Transmit(&huart2, (u8*)"\r\n", 2, 50);
 8000c24:	490b      	ldr	r1, [pc, #44]	; (8000c54 <send_GSM_str+0x84>)
 8000c26:	4809      	ldr	r0, [pc, #36]	; (8000c4c <send_GSM_str+0x7c>)
 8000c28:	2332      	movs	r3, #50	; 0x32
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	f004 f9c4 	bl	8004fb8 <HAL_UART_Transmit>
	}

	gsm_response_tmr = HAL_GetTick() + wait;
 8000c30:	f001 ffae 	bl	8002b90 <HAL_GetTick>
 8000c34:	0002      	movs	r2, r0
 8000c36:	2308      	movs	r3, #8
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	18d2      	adds	r2, r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <send_GSM_str+0x88>)
 8000c40:	601a      	str	r2, [r3, #0]
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b004      	add	sp, #16
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	200003f8 	.word	0x200003f8
 8000c50:	2000000c 	.word	0x2000000c
 8000c54:	080079a4 	.word	0x080079a4
 8000c58:	20000304 	.word	0x20000304

08000c5c <connectivity_watchdog>:


void connectivity_watchdog(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  if ((HAL_GetTick() > tcp_alive_timer) || retry)
 8000c60:	f001 ff96 	bl	8002b90 <HAL_GetTick>
 8000c64:	0002      	movs	r2, r0
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <connectivity_watchdog+0x54>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d803      	bhi.n	8000c76 <connectivity_watchdog+0x1a>
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <connectivity_watchdog+0x58>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d018      	beq.n	8000ca8 <connectivity_watchdog+0x4c>
	  int ttl = MAX_ALIVE_TIME / 60000;
	  printf(("well, its over %dmin and no successful heart beat\r\n"), ttl);
#endif
	  //send_GSM_str("AT+CIPCLOSE", 11, 1, true);
	  //HAL_Delay(2000);
    if (tcp_alive) tcp_alive = false;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <connectivity_watchdog+0x5c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <connectivity_watchdog+0x28>
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <connectivity_watchdog+0x5c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
    if (gsm_stage >= _INIT_TCP)
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <connectivity_watchdog+0x60>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d901      	bls.n	8000c90 <connectivity_watchdog+0x34>
    {
      network_failed_restart();
 8000c8c:	f001 f97e 	bl	8001f8c <network_failed_restart>
    }

    tcp_alive_timer = HAL_GetTick() + MAX_ALIVE_TIME;
 8000c90:	f001 ff7e 	bl	8002b90 <HAL_GetTick>
 8000c94:	0003      	movs	r3, r0
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <connectivity_watchdog+0x64>)
 8000c98:	189a      	adds	r2, r3, r2
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <connectivity_watchdog+0x54>)
 8000c9c:	601a      	str	r2, [r3, #0]

    retry = false;
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <connectivity_watchdog+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
    HAL_NVIC_SystemReset();
 8000ca4:	f002 f885 	bl	8002db2 <HAL_NVIC_SystemReset>
  }
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	2000030c 	.word	0x2000030c
 8000cb4:	20000316 	.word	0x20000316
 8000cb8:	20000311 	.word	0x20000311
 8000cbc:	20000310 	.word	0x20000310
 8000cc0:	0002bf20 	.word	0x0002bf20

08000cc4 <rec_GSM_str>:

u16 rec_GSM_str(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
	u16 len = 0;
 8000cca:	1dbb      	adds	r3, r7, #6
 8000ccc:	2200      	movs	r2, #0
 8000cce:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		u8 ch = 0;
 8000cd0:	1d7b      	adds	r3, r7, #5
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive(&huart2, &ch, 1, 2);
 8000cd6:	1d79      	adds	r1, r7, #5
 8000cd8:	480e      	ldr	r0, [pc, #56]	; (8000d14 <rec_GSM_str+0x50>)
 8000cda:	2302      	movs	r3, #2
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f004 fa17 	bl	8005110 <HAL_UART_Receive>

		if(ch)
 8000ce2:	1d7b      	adds	r3, r7, #5
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00e      	beq.n	8000d08 <rec_GSM_str+0x44>
		{
			if(len < MAX_LEN)
 8000cea:	1dbb      	adds	r3, r7, #6
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	2bff      	cmp	r3, #255	; 0xff
 8000cf0:	d8ee      	bhi.n	8000cd0 <rec_GSM_str+0xc>
				gsm_Raw_Buffer[len++] = ch;
 8000cf2:	1dbb      	adds	r3, r7, #6
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	1dba      	adds	r2, r7, #6
 8000cf8:	1c59      	adds	r1, r3, #1
 8000cfa:	8011      	strh	r1, [r2, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	1d7b      	adds	r3, r7, #5
 8000d00:	7819      	ldrb	r1, [r3, #0]
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <rec_GSM_str+0x54>)
 8000d04:	5499      	strb	r1, [r3, r2]
 8000d06:	e7e3      	b.n	8000cd0 <rec_GSM_str+0xc>
		}
		else
			break;
	}
	return len;
 8000d08:	1dbb      	adds	r3, r7, #6
 8000d0a:	881b      	ldrh	r3, [r3, #0]
}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200003f8 	.word	0x200003f8
 8000d18:	2000050c 	.word	0x2000050c

08000d1c <GSM_str_is_valid>:

bool GSM_str_is_valid(const char *comp_str)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if (strstr((char*)gsm_Raw_Buffer, comp_str) != NULL)
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <GSM_str_is_valid+0x28>)
 8000d28:	0011      	movs	r1, r2
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f005 fc31 	bl	8006592 <strstr>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <GSM_str_is_valid+0x1c>
    return true;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <GSM_str_is_valid+0x1e>

#ifdef debug
  printf(("\nGSM str byte %d is not valid for %d:%d\r\n"), grab_len, gsm_stage, stage_step);
#endif
  return false;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	2000050c 	.word	0x2000050c

08000d48 <GSM_Send_Handler>:

void GSM_Send_Handler(void)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	4ce9      	ldr	r4, [pc, #932]	; (80010f0 <GSM_Send_Handler+0x3a8>)
 8000d4c:	44a5      	add	sp, r4
 8000d4e:	af02      	add	r7, sp, #8
  if (tmr_not_expired(HAL_GetTick(), gsm_response_tmr) || gsm_stage >= (MAX_GSM_STAGE - 1))return;
 8000d50:	f001 ff1e 	bl	8002b90 <HAL_GetTick>
 8000d54:	0002      	movs	r2, r0
 8000d56:	4be7      	ldr	r3, [pc, #924]	; (80010f4 <GSM_Send_Handler+0x3ac>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d200      	bcs.n	8000d60 <GSM_Send_Handler+0x18>
 8000d5e:	e28b      	b.n	8001278 <GSM_Send_Handler+0x530>
 8000d60:	4be5      	ldr	r3, [pc, #916]	; (80010f8 <GSM_Send_Handler+0x3b0>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b05      	cmp	r3, #5
 8000d66:	d900      	bls.n	8000d6a <GSM_Send_Handler+0x22>
 8000d68:	e286      	b.n	8001278 <GSM_Send_Handler+0x530>

  switch (gsm_stage)
 8000d6a:	4be3      	ldr	r3, [pc, #908]	; (80010f8 <GSM_Send_Handler+0x3b0>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d900      	bls.n	8000d74 <GSM_Send_Handler+0x2c>
 8000d72:	e283      	b.n	800127c <GSM_Send_Handler+0x534>
 8000d74:	009a      	lsls	r2, r3, #2
 8000d76:	4be1      	ldr	r3, [pc, #900]	; (80010fc <GSM_Send_Handler+0x3b4>)
 8000d78:	18d3      	adds	r3, r2, r3
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	469f      	mov	pc, r3
  {
    case _DETECT_GSM_SIM:
      if (!Isroaming && stage_step == 10)
 8000d7e:	4be0      	ldr	r3, [pc, #896]	; (8001100 <GSM_Send_Handler+0x3b8>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2201      	movs	r2, #1
 8000d84:	4053      	eors	r3, r2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d00d      	beq.n	8000da8 <GSM_Send_Handler+0x60>
 8000d8c:	4bdd      	ldr	r3, [pc, #884]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b0a      	cmp	r3, #10
 8000d92:	d109      	bne.n	8000da8 <GSM_Send_Handler+0x60>
      {
        gsm_stage++; // if time is already, move to the next gms stage
 8000d94:	4bd8      	ldr	r3, [pc, #864]	; (80010f8 <GSM_Send_Handler+0x3b0>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4bd6      	ldr	r3, [pc, #856]	; (80010f8 <GSM_Send_Handler+0x3b0>)
 8000d9e:	701a      	strb	r2, [r3, #0]
        stage_step = 0;
 8000da0:	4bd8      	ldr	r3, [pc, #864]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
#ifdef debug
        printf(("query: %s,  resp:%s,  time: %ld\r\n"), detect_gsm[stage_step].query_str, detect_gsm[stage_step].resp_str, detect_gsm[stage_step].wait_tmr);
#endif
        send_GSM_str(detect_gsm[stage_step].query_str, strlen(detect_gsm[stage_step].query_str), detect_gsm[stage_step].wait_tmr, false);
      }
      break;
 8000da6:	e26c      	b.n	8001282 <GSM_Send_Handler+0x53a>
        send_GSM_str(detect_gsm[stage_step].query_str, strlen(detect_gsm[stage_step].query_str), detect_gsm[stage_step].wait_tmr, false);
 8000da8:	4bd6      	ldr	r3, [pc, #856]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	0019      	movs	r1, r3
 8000dae:	4ad6      	ldr	r2, [pc, #856]	; (8001108 <GSM_Send_Handler+0x3c0>)
 8000db0:	000b      	movs	r3, r1
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	185b      	adds	r3, r3, r1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	589c      	ldr	r4, [r3, r2]
 8000dba:	4bd2      	ldr	r3, [pc, #840]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	4ad1      	ldr	r2, [pc, #836]	; (8001108 <GSM_Send_Handler+0x3c0>)
 8000dc2:	000b      	movs	r3, r1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	185b      	adds	r3, r3, r1
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	589b      	ldr	r3, [r3, r2]
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff f9a1 	bl	8000114 <strlen>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	b299      	uxth	r1, r3
 8000dd6:	4bcb      	ldr	r3, [pc, #812]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0018      	movs	r0, r3
 8000ddc:	4aca      	ldr	r2, [pc, #808]	; (8001108 <GSM_Send_Handler+0x3c0>)
 8000dde:	0003      	movs	r3, r0
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	181b      	adds	r3, r3, r0
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	18d3      	adds	r3, r2, r3
 8000de8:	3308      	adds	r3, #8
 8000dea:	881a      	ldrh	r2, [r3, #0]
 8000dec:	2300      	movs	r3, #0
 8000dee:	0020      	movs	r0, r4
 8000df0:	f7ff feee 	bl	8000bd0 <send_GSM_str>
      break;
 8000df4:	e245      	b.n	8001282 <GSM_Send_Handler+0x53a>

    case _INIT_GPRS:
      if (apn_net == -1) return;        //if sim apn is not detected, no reason to run this at all
 8000df6:	4bc5      	ldr	r3, [pc, #788]	; (800110c <GSM_Send_Handler+0x3c4>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	d100      	bne.n	8000e02 <GSM_Send_Handler+0xba>
 8000e00:	e23e      	b.n	8001280 <GSM_Send_Handler+0x538>
#ifdef debug
      printf(("query: %s, wait resp: %ld\r\n"), init_gprs[stage_step].query_str, init_gprs[stage_step].wait_tmr);
#endif
      if (stage_step == 3)
 8000e02:	4bc0      	ldr	r3, [pc, #768]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d156      	bne.n	8000eb8 <GSM_Send_Handler+0x170>
      {
        char temp_str[MAX_LEN] = "";
 8000e0a:	4bc1      	ldr	r3, [pc, #772]	; (8001110 <GSM_Send_Handler+0x3c8>)
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	4694      	mov	ip, r2
 8000e12:	44bc      	add	ip, r7
 8000e14:	4463      	add	r3, ip
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	22fc      	movs	r2, #252	; 0xfc
 8000e1e:	2100      	movs	r1, #0
 8000e20:	0018      	movs	r0, r3
 8000e22:	f005 fae2 	bl	80063ea <memset>
        if (strlen(custom_apn) <= 0)
 8000e26:	4bbb      	ldr	r3, [pc, #748]	; (8001114 <GSM_Send_Handler+0x3cc>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d119      	bne.n	8000e62 <GSM_Send_Handler+0x11a>
          putStringInArray(init_gprs[stage_step].query_str, "{0}", APN[apn_net], temp_str, sizeof(temp_str));
 8000e2e:	4bb5      	ldr	r3, [pc, #724]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	0019      	movs	r1, r3
 8000e34:	4ab8      	ldr	r2, [pc, #736]	; (8001118 <GSM_Send_Handler+0x3d0>)
 8000e36:	000b      	movs	r3, r1
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	185b      	adds	r3, r3, r1
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	5898      	ldr	r0, [r3, r2]
 8000e40:	4bb2      	ldr	r3, [pc, #712]	; (800110c <GSM_Send_Handler+0x3c4>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	001a      	movs	r2, r3
 8000e48:	4bb4      	ldr	r3, [pc, #720]	; (800111c <GSM_Send_Handler+0x3d4>)
 8000e4a:	0092      	lsls	r2, r2, #2
 8000e4c:	58d2      	ldr	r2, [r2, r3]
 8000e4e:	1c7c      	adds	r4, r7, #1
 8000e50:	34ff      	adds	r4, #255	; 0xff
 8000e52:	49b3      	ldr	r1, [pc, #716]	; (8001120 <GSM_Send_Handler+0x3d8>)
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	0023      	movs	r3, r4
 8000e5c:	f7ff fb92 	bl	8000584 <putStringInArray>
 8000e60:	e012      	b.n	8000e88 <GSM_Send_Handler+0x140>
        else
          putStringInArray(init_gprs[stage_step].query_str, "{0}", custom_apn, temp_str, sizeof(temp_str));
 8000e62:	4ba8      	ldr	r3, [pc, #672]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	0019      	movs	r1, r3
 8000e68:	4aab      	ldr	r2, [pc, #684]	; (8001118 <GSM_Send_Handler+0x3d0>)
 8000e6a:	000b      	movs	r3, r1
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	185b      	adds	r3, r3, r1
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	5898      	ldr	r0, [r3, r2]
 8000e74:	1c7c      	adds	r4, r7, #1
 8000e76:	34ff      	adds	r4, #255	; 0xff
 8000e78:	4aa6      	ldr	r2, [pc, #664]	; (8001114 <GSM_Send_Handler+0x3cc>)
 8000e7a:	49a9      	ldr	r1, [pc, #676]	; (8001120 <GSM_Send_Handler+0x3d8>)
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	0023      	movs	r3, r4
 8000e84:	f7ff fb7e 	bl	8000584 <putStringInArray>
        send_GSM_str(temp_str, strlen(temp_str), init_gprs[stage_step].wait_tmr, false);
 8000e88:	1c7b      	adds	r3, r7, #1
 8000e8a:	33ff      	adds	r3, #255	; 0xff
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff f941 	bl	8000114 <strlen>
 8000e92:	0003      	movs	r3, r0
 8000e94:	b299      	uxth	r1, r3
 8000e96:	4b9b      	ldr	r3, [pc, #620]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	4a9e      	ldr	r2, [pc, #632]	; (8001118 <GSM_Send_Handler+0x3d0>)
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	181b      	adds	r3, r3, r0
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	18d3      	adds	r3, r2, r3
 8000ea8:	3308      	adds	r3, #8
 8000eaa:	881a      	ldrh	r2, [r3, #0]
 8000eac:	1c78      	adds	r0, r7, #1
 8000eae:	30ff      	adds	r0, #255	; 0xff
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f7ff fe8d 	bl	8000bd0 <send_GSM_str>
      }
      else
        send_GSM_str(init_gprs[stage_step].query_str, strlen(init_gprs[stage_step].query_str), init_gprs[stage_step].wait_tmr, false);
      break;
 8000eb6:	e1e4      	b.n	8001282 <GSM_Send_Handler+0x53a>
        send_GSM_str(init_gprs[stage_step].query_str, strlen(init_gprs[stage_step].query_str), init_gprs[stage_step].wait_tmr, false);
 8000eb8:	4b92      	ldr	r3, [pc, #584]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	4a96      	ldr	r2, [pc, #600]	; (8001118 <GSM_Send_Handler+0x3d0>)
 8000ec0:	000b      	movs	r3, r1
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	185b      	adds	r3, r3, r1
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	589c      	ldr	r4, [r3, r2]
 8000eca:	4b8e      	ldr	r3, [pc, #568]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	0019      	movs	r1, r3
 8000ed0:	4a91      	ldr	r2, [pc, #580]	; (8001118 <GSM_Send_Handler+0x3d0>)
 8000ed2:	000b      	movs	r3, r1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	185b      	adds	r3, r3, r1
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	589b      	ldr	r3, [r3, r2]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff f919 	bl	8000114 <strlen>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	b299      	uxth	r1, r3
 8000ee6:	4b87      	ldr	r3, [pc, #540]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	0018      	movs	r0, r3
 8000eec:	4a8a      	ldr	r2, [pc, #552]	; (8001118 <GSM_Send_Handler+0x3d0>)
 8000eee:	0003      	movs	r3, r0
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	181b      	adds	r3, r3, r0
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	18d3      	adds	r3, r2, r3
 8000ef8:	3308      	adds	r3, #8
 8000efa:	881a      	ldrh	r2, [r3, #0]
 8000efc:	2300      	movs	r3, #0
 8000efe:	0020      	movs	r0, r4
 8000f00:	f7ff fe66 	bl	8000bd0 <send_GSM_str>
      break;
 8000f04:	e1bd      	b.n	8001282 <GSM_Send_Handler+0x53a>

    case _NTP_SERVER:
#ifdef debug
      printf(("query: %s, wait resp: %ld\r\n"), ntp_server[stage_step].query_str, ntp_server[stage_step].wait_tmr);
#endif
      if (gprs_time_found)
 8000f06:	4b87      	ldr	r3, [pc, #540]	; (8001124 <GSM_Send_Handler+0x3dc>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d009      	beq.n	8000f22 <GSM_Send_Handler+0x1da>
      {
        gsm_stage++; // if time is already, move to the next gms stage
 8000f0e:	4b7a      	ldr	r3, [pc, #488]	; (80010f8 <GSM_Send_Handler+0x3b0>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b78      	ldr	r3, [pc, #480]	; (80010f8 <GSM_Send_Handler+0x3b0>)
 8000f18:	701a      	strb	r2, [r3, #0]
        stage_step = 0;
 8000f1a:	4b7a      	ldr	r3, [pc, #488]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
      }
      else
        send_GSM_str(ntp_server[stage_step].query_str, strlen(ntp_server[stage_step].query_str), ntp_server[stage_step].wait_tmr, false);
      break;
 8000f20:	e1af      	b.n	8001282 <GSM_Send_Handler+0x53a>
        send_GSM_str(ntp_server[stage_step].query_str, strlen(ntp_server[stage_step].query_str), ntp_server[stage_step].wait_tmr, false);
 8000f22:	4b78      	ldr	r3, [pc, #480]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	0019      	movs	r1, r3
 8000f28:	4a7f      	ldr	r2, [pc, #508]	; (8001128 <GSM_Send_Handler+0x3e0>)
 8000f2a:	000b      	movs	r3, r1
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	185b      	adds	r3, r3, r1
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	589c      	ldr	r4, [r3, r2]
 8000f34:	4b73      	ldr	r3, [pc, #460]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	0019      	movs	r1, r3
 8000f3a:	4a7b      	ldr	r2, [pc, #492]	; (8001128 <GSM_Send_Handler+0x3e0>)
 8000f3c:	000b      	movs	r3, r1
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	185b      	adds	r3, r3, r1
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	589b      	ldr	r3, [r3, r2]
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff f8e4 	bl	8000114 <strlen>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	b299      	uxth	r1, r3
 8000f50:	4b6c      	ldr	r3, [pc, #432]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	0018      	movs	r0, r3
 8000f56:	4a74      	ldr	r2, [pc, #464]	; (8001128 <GSM_Send_Handler+0x3e0>)
 8000f58:	0003      	movs	r3, r0
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	181b      	adds	r3, r3, r0
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	18d3      	adds	r3, r2, r3
 8000f62:	3308      	adds	r3, #8
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	2300      	movs	r3, #0
 8000f68:	0020      	movs	r0, r4
 8000f6a:	f7ff fe31 	bl	8000bd0 <send_GSM_str>
      break;
 8000f6e:	e188      	b.n	8001282 <GSM_Send_Handler+0x53a>

    case _INIT_TCP:
      if (!gprs_Is_available) gsm_stage = gsm_stage - 2; //if internet is not active, no reason to run this at all, rather move a step backward and try init gprs
 8000f70:	4b6e      	ldr	r3, [pc, #440]	; (800112c <GSM_Send_Handler+0x3e4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2201      	movs	r2, #1
 8000f76:	4053      	eors	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d006      	beq.n	8000f8c <GSM_Send_Handler+0x244>
 8000f7e:	4b5e      	ldr	r3, [pc, #376]	; (80010f8 <GSM_Send_Handler+0x3b0>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	3b02      	subs	r3, #2
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b5c      	ldr	r3, [pc, #368]	; (80010f8 <GSM_Send_Handler+0x3b0>)
 8000f88:	701a      	strb	r2, [r3, #0]
          send_GSM_str(temp_str2, strlen(temp_str2), init_tcp[stage_step].wait_tmr, false);
        }
        else
          send_GSM_str(init_tcp[stage_step].query_str, strlen(init_tcp[stage_step].query_str), init_tcp[stage_step].wait_tmr, false);
      }
      break;
 8000f8a:	e17a      	b.n	8001282 <GSM_Send_Handler+0x53a>
        if (stage_step == 0) //insert detected APN
 8000f8c:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d150      	bne.n	8001036 <GSM_Send_Handler+0x2ee>
          char temp_str1[MAX_LEN] = "", temp_str2[MAX_LEN] = "";
 8000f94:	4b66      	ldr	r3, [pc, #408]	; (8001130 <GSM_Send_Handler+0x3e8>)
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	4694      	mov	ip, r2
 8000f9c:	44bc      	add	ip, r7
 8000f9e:	4463      	add	r3, ip
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	22fc      	movs	r2, #252	; 0xfc
 8000fa8:	2100      	movs	r1, #0
 8000faa:	0018      	movs	r0, r3
 8000fac:	f005 fa1d 	bl	80063ea <memset>
 8000fb0:	4b57      	ldr	r3, [pc, #348]	; (8001110 <GSM_Send_Handler+0x3c8>)
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	0092      	lsls	r2, r2, #2
 8000fb6:	4694      	mov	ip, r2
 8000fb8:	44bc      	add	ip, r7
 8000fba:	4463      	add	r3, ip
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	22fc      	movs	r2, #252	; 0xfc
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f005 fa0f 	bl	80063ea <memset>
          putStringInArray(init_tcp[stage_step].query_str, "{0}", server, temp_str1, sizeof(temp_str1));
 8000fcc:	4b4d      	ldr	r3, [pc, #308]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	4a58      	ldr	r2, [pc, #352]	; (8001134 <GSM_Send_Handler+0x3ec>)
 8000fd4:	000b      	movs	r3, r1
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	185b      	adds	r3, r3, r1
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	5898      	ldr	r0, [r3, r2]
 8000fde:	003c      	movs	r4, r7
 8000fe0:	4a55      	ldr	r2, [pc, #340]	; (8001138 <GSM_Send_Handler+0x3f0>)
 8000fe2:	494f      	ldr	r1, [pc, #316]	; (8001120 <GSM_Send_Handler+0x3d8>)
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	0023      	movs	r3, r4
 8000fec:	f7ff faca 	bl	8000584 <putStringInArray>
          putStringInArray(temp_str1, "{1}", host, temp_str2, sizeof(temp_str2));
 8000ff0:	1c7c      	adds	r4, r7, #1
 8000ff2:	34ff      	adds	r4, #255	; 0xff
 8000ff4:	4a51      	ldr	r2, [pc, #324]	; (800113c <GSM_Send_Handler+0x3f4>)
 8000ff6:	4952      	ldr	r1, [pc, #328]	; (8001140 <GSM_Send_Handler+0x3f8>)
 8000ff8:	0038      	movs	r0, r7
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	0023      	movs	r3, r4
 8001002:	f7ff fabf 	bl	8000584 <putStringInArray>
          send_GSM_str(temp_str2, strlen(temp_str2), init_tcp[stage_step].wait_tmr, false);
 8001006:	1c7b      	adds	r3, r7, #1
 8001008:	33ff      	adds	r3, #255	; 0xff
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff f882 	bl	8000114 <strlen>
 8001010:	0003      	movs	r3, r0
 8001012:	b299      	uxth	r1, r3
 8001014:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	0018      	movs	r0, r3
 800101a:	4a46      	ldr	r2, [pc, #280]	; (8001134 <GSM_Send_Handler+0x3ec>)
 800101c:	0003      	movs	r3, r0
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	181b      	adds	r3, r3, r0
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	18d3      	adds	r3, r2, r3
 8001026:	3308      	adds	r3, #8
 8001028:	881a      	ldrh	r2, [r3, #0]
 800102a:	1c78      	adds	r0, r7, #1
 800102c:	30ff      	adds	r0, #255	; 0xff
 800102e:	2300      	movs	r3, #0
 8001030:	f7ff fdce 	bl	8000bd0 <send_GSM_str>
      break;
 8001034:	e125      	b.n	8001282 <GSM_Send_Handler+0x53a>
          send_GSM_str(init_tcp[stage_step].query_str, strlen(init_tcp[stage_step].query_str), init_tcp[stage_step].wait_tmr, false);
 8001036:	4b33      	ldr	r3, [pc, #204]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	0019      	movs	r1, r3
 800103c:	4a3d      	ldr	r2, [pc, #244]	; (8001134 <GSM_Send_Handler+0x3ec>)
 800103e:	000b      	movs	r3, r1
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	185b      	adds	r3, r3, r1
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	589c      	ldr	r4, [r3, r2]
 8001048:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <GSM_Send_Handler+0x3bc>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	0019      	movs	r1, r3
 800104e:	4a39      	ldr	r2, [pc, #228]	; (8001134 <GSM_Send_Handler+0x3ec>)
 8001050:	000b      	movs	r3, r1
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	185b      	adds	r3, r3, r1
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	589b      	ldr	r3, [r3, r2]
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff f85a 	bl	8000114 <strlen>
 8001060:	0003      	movs	r3, r0
 8001062:	b299      	uxth	r1, r3
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	0018      	movs	r0, r3
 800106a:	4a32      	ldr	r2, [pc, #200]	; (8001134 <GSM_Send_Handler+0x3ec>)
 800106c:	0003      	movs	r3, r0
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	181b      	adds	r3, r3, r0
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	18d3      	adds	r3, r2, r3
 8001076:	3308      	adds	r3, #8
 8001078:	881a      	ldrh	r2, [r3, #0]
 800107a:	2300      	movs	r3, #0
 800107c:	0020      	movs	r0, r4
 800107e:	f7ff fda7 	bl	8000bd0 <send_GSM_str>
      break;
 8001082:	e0fe      	b.n	8001282 <GSM_Send_Handler+0x53a>

    case _NET_STAT:
#ifdef debug
      printf(("query: %s, wait resp: %ld\r\n"), net_stat[stage_step].query_str, net_stat[stage_step].wait_tmr);
#endif
      send_GSM_str(net_stat[stage_step].query_str, strlen(net_stat[stage_step].query_str), net_stat[stage_step].wait_tmr, false);
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	0019      	movs	r1, r3
 800108a:	4a2e      	ldr	r2, [pc, #184]	; (8001144 <GSM_Send_Handler+0x3fc>)
 800108c:	000b      	movs	r3, r1
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	185b      	adds	r3, r3, r1
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	589c      	ldr	r4, [r3, r2]
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <GSM_Send_Handler+0x3bc>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	0019      	movs	r1, r3
 800109c:	4a29      	ldr	r2, [pc, #164]	; (8001144 <GSM_Send_Handler+0x3fc>)
 800109e:	000b      	movs	r3, r1
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	185b      	adds	r3, r3, r1
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	589b      	ldr	r3, [r3, r2]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff f833 	bl	8000114 <strlen>
 80010ae:	0003      	movs	r3, r0
 80010b0:	b299      	uxth	r1, r3
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <GSM_Send_Handler+0x3bc>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	0018      	movs	r0, r3
 80010b8:	4a22      	ldr	r2, [pc, #136]	; (8001144 <GSM_Send_Handler+0x3fc>)
 80010ba:	0003      	movs	r3, r0
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	181b      	adds	r3, r3, r0
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	18d3      	adds	r3, r2, r3
 80010c4:	3308      	adds	r3, #8
 80010c6:	881a      	ldrh	r2, [r3, #0]
 80010c8:	2300      	movs	r3, #0
 80010ca:	0020      	movs	r0, r4
 80010cc:	f7ff fd80 	bl	8000bd0 <send_GSM_str>
      break;
 80010d0:	e0d7      	b.n	8001282 <GSM_Send_Handler+0x53a>

    case _SEND_DATA:
#ifdef debug
      printf(("query: %s, wait resp: %ld\n"), send_data[stage_step].query_str, send_data[stage_step].wait_tmr);
#endif
      if (Res_Len <= 0)
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <GSM_Send_Handler+0x400>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d138      	bne.n	800114c <GSM_Send_Handler+0x404>
      {
#ifdef debug
        printf(("There is no data to send\r\n"));
#endif
        gsm_stage++;        //if there is nothing to send, just move on
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <GSM_Send_Handler+0x3b0>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <GSM_Send_Handler+0x3b0>)
 80010e4:	701a      	strb	r2, [r3, #0]
        stage_step = 0;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <GSM_Send_Handler+0x3bc>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
          stage_step++;
        }
        else
          send_GSM_str(send_data[stage_step].query_str, strlen(send_data[stage_step].query_str), send_data[stage_step].wait_tmr, false);
      }
      break;
 80010ec:	e0c9      	b.n	8001282 <GSM_Send_Handler+0x53a>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	fffffdf4 	.word	0xfffffdf4
 80010f4:	20000304 	.word	0x20000304
 80010f8:	20000310 	.word	0x20000310
 80010fc:	08007cc8 	.word	0x08007cc8
 8001100:	20000313 	.word	0x20000313
 8001104:	200002f8 	.word	0x200002f8
 8001108:	20000488 	.word	0x20000488
 800110c:	20000055 	.word	0x20000055
 8001110:	ffffff00 	.word	0xffffff00
 8001114:	200000f0 	.word	0x200000f0
 8001118:	20000630 	.word	0x20000630
 800111c:	20000678 	.word	0x20000678
 8001120:	08007994 	.word	0x08007994
 8001124:	20000314 	.word	0x20000314
 8001128:	200006b8 	.word	0x200006b8
 800112c:	20000312 	.word	0x20000312
 8001130:	fffffe00 	.word	0xfffffe00
 8001134:	20000618 	.word	0x20000618
 8001138:	2000002c 	.word	0x2000002c
 800113c:	2000004c 	.word	0x2000004c
 8001140:	08007998 	.word	0x08007998
 8001144:	2000060c 	.word	0x2000060c
 8001148:	20000300 	.word	0x20000300
        if (stage_step == 1 || stage_step == 3) //insert data to be sent
 800114c:	4b4f      	ldr	r3, [pc, #316]	; (800128c <GSM_Send_Handler+0x544>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d003      	beq.n	800115c <GSM_Send_Handler+0x414>
 8001154:	4b4d      	ldr	r3, [pc, #308]	; (800128c <GSM_Send_Handler+0x544>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d13f      	bne.n	80011dc <GSM_Send_Handler+0x494>
          char temp_str[MAX_LEN] = "";
 800115c:	4b4c      	ldr	r3, [pc, #304]	; (8001290 <GSM_Send_Handler+0x548>)
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4694      	mov	ip, r2
 8001164:	44bc      	add	ip, r7
 8001166:	4463      	add	r3, ip
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	3304      	adds	r3, #4
 800116e:	22fc      	movs	r2, #252	; 0xfc
 8001170:	2100      	movs	r1, #0
 8001172:	0018      	movs	r0, r3
 8001174:	f005 f939 	bl	80063ea <memset>
          putStringInArray(send_data[stage_step].query_str, "{0}", RES_BUFF, temp_str, sizeof(temp_str));
 8001178:	4b44      	ldr	r3, [pc, #272]	; (800128c <GSM_Send_Handler+0x544>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	0019      	movs	r1, r3
 800117e:	4a45      	ldr	r2, [pc, #276]	; (8001294 <GSM_Send_Handler+0x54c>)
 8001180:	000b      	movs	r3, r1
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	185b      	adds	r3, r3, r1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	5898      	ldr	r0, [r3, r2]
 800118a:	1c7c      	adds	r4, r7, #1
 800118c:	34ff      	adds	r4, #255	; 0xff
 800118e:	4a42      	ldr	r2, [pc, #264]	; (8001298 <GSM_Send_Handler+0x550>)
 8001190:	4942      	ldr	r1, [pc, #264]	; (800129c <GSM_Send_Handler+0x554>)
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	0023      	movs	r3, r4
 800119a:	f7ff f9f3 	bl	8000584 <putStringInArray>
          send_GSM_str(temp_str, strlen(temp_str), send_data[stage_step].wait_tmr, true);
 800119e:	1c7b      	adds	r3, r7, #1
 80011a0:	33ff      	adds	r3, #255	; 0xff
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7fe ffb6 	bl	8000114 <strlen>
 80011a8:	0003      	movs	r3, r0
 80011aa:	b299      	uxth	r1, r3
 80011ac:	4b37      	ldr	r3, [pc, #220]	; (800128c <GSM_Send_Handler+0x544>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	0018      	movs	r0, r3
 80011b2:	4a38      	ldr	r2, [pc, #224]	; (8001294 <GSM_Send_Handler+0x54c>)
 80011b4:	0003      	movs	r3, r0
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	181b      	adds	r3, r3, r0
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	18d3      	adds	r3, r2, r3
 80011be:	3308      	adds	r3, #8
 80011c0:	881a      	ldrh	r2, [r3, #0]
 80011c2:	1c78      	adds	r0, r7, #1
 80011c4:	30ff      	adds	r0, #255	; 0xff
 80011c6:	2301      	movs	r3, #1
 80011c8:	f7ff fd02 	bl	8000bd0 <send_GSM_str>
          stage_step++;
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <GSM_Send_Handler+0x544>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <GSM_Send_Handler+0x544>)
 80011d6:	701a      	strb	r2, [r3, #0]
        {
 80011d8:	46c0      	nop			; (mov r8, r8)
      break;
 80011da:	e052      	b.n	8001282 <GSM_Send_Handler+0x53a>
          send_GSM_str(send_data[stage_step].query_str, strlen(send_data[stage_step].query_str), send_data[stage_step].wait_tmr, false);
 80011dc:	4b2b      	ldr	r3, [pc, #172]	; (800128c <GSM_Send_Handler+0x544>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	0019      	movs	r1, r3
 80011e2:	4a2c      	ldr	r2, [pc, #176]	; (8001294 <GSM_Send_Handler+0x54c>)
 80011e4:	000b      	movs	r3, r1
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	185b      	adds	r3, r3, r1
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	589c      	ldr	r4, [r3, r2]
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <GSM_Send_Handler+0x544>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	0019      	movs	r1, r3
 80011f4:	4a27      	ldr	r2, [pc, #156]	; (8001294 <GSM_Send_Handler+0x54c>)
 80011f6:	000b      	movs	r3, r1
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	185b      	adds	r3, r3, r1
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	589b      	ldr	r3, [r3, r2]
 8001200:	0018      	movs	r0, r3
 8001202:	f7fe ff87 	bl	8000114 <strlen>
 8001206:	0003      	movs	r3, r0
 8001208:	b299      	uxth	r1, r3
 800120a:	4b20      	ldr	r3, [pc, #128]	; (800128c <GSM_Send_Handler+0x544>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	0018      	movs	r0, r3
 8001210:	4a20      	ldr	r2, [pc, #128]	; (8001294 <GSM_Send_Handler+0x54c>)
 8001212:	0003      	movs	r3, r0
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	181b      	adds	r3, r3, r0
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	18d3      	adds	r3, r2, r3
 800121c:	3308      	adds	r3, #8
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	0020      	movs	r0, r4
 8001224:	f7ff fcd4 	bl	8000bd0 <send_GSM_str>
      break;
 8001228:	e02b      	b.n	8001282 <GSM_Send_Handler+0x53a>

    case _CLOSE_NET:
#ifdef debug
      printf(("query: %s, wait resp: %ld\r\n"), close_net[stage_step].query_str, close_net[stage_step].wait_tmr);
#endif
      send_GSM_str(close_net[stage_step].query_str, strlen(close_net[stage_step].query_str), close_net[stage_step].wait_tmr, false);
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <GSM_Send_Handler+0x544>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	0019      	movs	r1, r3
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <GSM_Send_Handler+0x558>)
 8001232:	000b      	movs	r3, r1
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	185b      	adds	r3, r3, r1
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	589c      	ldr	r4, [r3, r2]
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <GSM_Send_Handler+0x544>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	0019      	movs	r1, r3
 8001242:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <GSM_Send_Handler+0x558>)
 8001244:	000b      	movs	r3, r1
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	185b      	adds	r3, r3, r1
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	589b      	ldr	r3, [r3, r2]
 800124e:	0018      	movs	r0, r3
 8001250:	f7fe ff60 	bl	8000114 <strlen>
 8001254:	0003      	movs	r3, r0
 8001256:	b299      	uxth	r1, r3
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <GSM_Send_Handler+0x544>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	0018      	movs	r0, r3
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <GSM_Send_Handler+0x558>)
 8001260:	0003      	movs	r3, r0
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	181b      	adds	r3, r3, r0
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	18d3      	adds	r3, r2, r3
 800126a:	3308      	adds	r3, #8
 800126c:	881a      	ldrh	r2, [r3, #0]
 800126e:	2300      	movs	r3, #0
 8001270:	0020      	movs	r0, r4
 8001272:	f7ff fcad 	bl	8000bd0 <send_GSM_str>
      break;
 8001276:	e004      	b.n	8001282 <GSM_Send_Handler+0x53a>
  if (tmr_not_expired(HAL_GetTick(), gsm_response_tmr) || gsm_stage >= (MAX_GSM_STAGE - 1))return;
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	e002      	b.n	8001282 <GSM_Send_Handler+0x53a>

    default:
#ifdef debug
      printf(("unknown gsm_stage: %d\r\n"), gsm_stage);
#endif
      break;
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	e000      	b.n	8001282 <GSM_Send_Handler+0x53a>
      if (apn_net == -1) return;        //if sim apn is not detected, no reason to run this at all
 8001280:	46c0      	nop			; (mov r8, r8)
  }
}
 8001282:	46bd      	mov	sp, r7
 8001284:	2381      	movs	r3, #129	; 0x81
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	449d      	add	sp, r3
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	200002f8 	.word	0x200002f8
 8001290:	ffffff00 	.word	0xffffff00
 8001294:	20000694 	.word	0x20000694
 8001298:	20000110 	.word	0x20000110
 800129c:	08007994 	.word	0x08007994
 80012a0:	20000700 	.word	0x20000700

080012a4 <GSM_Response_Handler>:


void GSM_Response_Handler(void)
{
 80012a4:	b5b0      	push	{r4, r5, r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af02      	add	r7, sp, #8
  bool resp = false;
 80012aa:	2327      	movs	r3, #39	; 0x27
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
  switch (gsm_stage)
 80012b2:	4bd8      	ldr	r3, [pc, #864]	; (8001614 <GSM_Response_Handler+0x370>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d900      	bls.n	80012bc <GSM_Response_Handler+0x18>
 80012ba:	e2ed      	b.n	8001898 <GSM_Response_Handler+0x5f4>
 80012bc:	009a      	lsls	r2, r3, #2
 80012be:	4bd6      	ldr	r3, [pc, #856]	; (8001618 <GSM_Response_Handler+0x374>)
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	469f      	mov	pc, r3
  {
    case _DETECT_GSM_SIM:  //detect_gsm_sim
      if ((resp = GSM_str_is_valid(detect_gsm[stage_step].resp_str)))
 80012c6:	4bd5      	ldr	r3, [pc, #852]	; (800161c <GSM_Response_Handler+0x378>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	0019      	movs	r1, r3
 80012cc:	4ad4      	ldr	r2, [pc, #848]	; (8001620 <GSM_Response_Handler+0x37c>)
 80012ce:	000b      	movs	r3, r1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	185b      	adds	r3, r3, r1
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	18d3      	adds	r3, r2, r3
 80012d8:	3304      	adds	r3, #4
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2527      	movs	r5, #39	; 0x27
 80012de:	197c      	adds	r4, r7, r5
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff fd1b 	bl	8000d1c <GSM_str_is_valid>
 80012e6:	0003      	movs	r3, r0
 80012e8:	7023      	strb	r3, [r4, #0]
 80012ea:	197b      	adds	r3, r7, r5
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d100      	bne.n	80012f4 <GSM_Response_Handler+0x50>
 80012f2:	e081      	b.n	80013f8 <GSM_Response_Handler+0x154>
      {
#ifdef debug
        printf(("GSM response is valid for stage_step: %d:%d\r\n"), gsm_stage, stage_step);
#endif
        //process of grabbing useful data
        if(stage_step == 0)
 80012f4:	4bc9      	ldr	r3, [pc, #804]	; (800161c <GSM_Response_Handler+0x378>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <GSM_Response_Handler+0x60>
        {
        	gsm_pwr_tmr = 0;
 80012fc:	4bc9      	ldr	r3, [pc, #804]	; (8001624 <GSM_Response_Handler+0x380>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
    			  gsm_pwr_cnt = 0;
    		  //GSM_Is_Powered = false;
    		  //gsm_operation_delay = HAL_GetTick() + GSM_DELAY + 5000;
    	  }
      }
      break;
 8001302:	e2cb      	b.n	800189c <GSM_Response_Handler+0x5f8>
        else if (stage_step == 2) //grab IMEI
 8001304:	4bc5      	ldr	r3, [pc, #788]	; (800161c <GSM_Response_Handler+0x378>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d111      	bne.n	8001330 <GSM_Response_Handler+0x8c>
          gsm_data_grabber((char*)gsm_Raw_Buffer, grab_len, "\n", '\r', IMEI, sizeof(IMEI));
 800130c:	4bc6      	ldr	r3, [pc, #792]	; (8001628 <GSM_Response_Handler+0x384>)
 800130e:	8819      	ldrh	r1, [r3, #0]
 8001310:	4ac6      	ldr	r2, [pc, #792]	; (800162c <GSM_Response_Handler+0x388>)
 8001312:	48c7      	ldr	r0, [pc, #796]	; (8001630 <GSM_Response_Handler+0x38c>)
 8001314:	2320      	movs	r3, #32
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	4bc6      	ldr	r3, [pc, #792]	; (8001634 <GSM_Response_Handler+0x390>)
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	230d      	movs	r3, #13
 800131e:	f7ff f881 	bl	8000424 <gsm_data_grabber>
          printf(("IMEI: %s\r\n"), IMEI);
 8001322:	4ac4      	ldr	r2, [pc, #784]	; (8001634 <GSM_Response_Handler+0x390>)
 8001324:	4bc4      	ldr	r3, [pc, #784]	; (8001638 <GSM_Response_Handler+0x394>)
 8001326:	0011      	movs	r1, r2
 8001328:	0018      	movs	r0, r3
 800132a:	f005 f867 	bl	80063fc <iprintf>
      break;
 800132e:	e2b5      	b.n	800189c <GSM_Response_Handler+0x5f8>
        else if (stage_step == 3) //grab ICCID
 8001330:	4bba      	ldr	r3, [pc, #744]	; (800161c <GSM_Response_Handler+0x378>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d111      	bne.n	800135c <GSM_Response_Handler+0xb8>
          gsm_data_grabber((char*)gsm_Raw_Buffer, grab_len, "\n", '\r', ICCID, sizeof(ICCID));
 8001338:	4bbb      	ldr	r3, [pc, #748]	; (8001628 <GSM_Response_Handler+0x384>)
 800133a:	8819      	ldrh	r1, [r3, #0]
 800133c:	4abb      	ldr	r2, [pc, #748]	; (800162c <GSM_Response_Handler+0x388>)
 800133e:	48bc      	ldr	r0, [pc, #752]	; (8001630 <GSM_Response_Handler+0x38c>)
 8001340:	2320      	movs	r3, #32
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	4bbd      	ldr	r3, [pc, #756]	; (800163c <GSM_Response_Handler+0x398>)
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	230d      	movs	r3, #13
 800134a:	f7ff f86b 	bl	8000424 <gsm_data_grabber>
          printf(("ICCID: %s\r\n"), ICCID);
 800134e:	4abb      	ldr	r2, [pc, #748]	; (800163c <GSM_Response_Handler+0x398>)
 8001350:	4bbb      	ldr	r3, [pc, #748]	; (8001640 <GSM_Response_Handler+0x39c>)
 8001352:	0011      	movs	r1, r2
 8001354:	0018      	movs	r0, r3
 8001356:	f005 f851 	bl	80063fc <iprintf>
      break;
 800135a:	e29f      	b.n	800189c <GSM_Response_Handler+0x5f8>
        else if (stage_step == 8) //check if SIM is roaming
 800135c:	4baf      	ldr	r3, [pc, #700]	; (800161c <GSM_Response_Handler+0x378>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b08      	cmp	r3, #8
 8001362:	d10c      	bne.n	800137e <GSM_Response_Handler+0xda>
          if (strstr((char*)gsm_Raw_Buffer, "+CGREG: 0,5") != NULL) Isroaming = true;
 8001364:	4ab7      	ldr	r2, [pc, #732]	; (8001644 <GSM_Response_Handler+0x3a0>)
 8001366:	4bb2      	ldr	r3, [pc, #712]	; (8001630 <GSM_Response_Handler+0x38c>)
 8001368:	0011      	movs	r1, r2
 800136a:	0018      	movs	r0, r3
 800136c:	f005 f911 	bl	8006592 <strstr>
 8001370:	1e03      	subs	r3, r0, #0
 8001372:	d100      	bne.n	8001376 <GSM_Response_Handler+0xd2>
 8001374:	e292      	b.n	800189c <GSM_Response_Handler+0x5f8>
 8001376:	4bb4      	ldr	r3, [pc, #720]	; (8001648 <GSM_Response_Handler+0x3a4>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
      break;
 800137c:	e28e      	b.n	800189c <GSM_Response_Handler+0x5f8>
        else if (stage_step == 9)    //grab net ID
 800137e:	4ba7      	ldr	r3, [pc, #668]	; (800161c <GSM_Response_Handler+0x378>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b09      	cmp	r3, #9
 8001384:	d11e      	bne.n	80013c4 <GSM_Response_Handler+0x120>
          net = id_network_name((char*)gsm_Raw_Buffer);
 8001386:	4baa      	ldr	r3, [pc, #680]	; (8001630 <GSM_Response_Handler+0x38c>)
 8001388:	0018      	movs	r0, r3
 800138a:	f000 fdc3 	bl	8001f14 <id_network_name>
 800138e:	0003      	movs	r3, r0
 8001390:	001a      	movs	r2, r3
 8001392:	4bae      	ldr	r3, [pc, #696]	; (800164c <GSM_Response_Handler+0x3a8>)
 8001394:	701a      	strb	r2, [r3, #0]
          if (strlen(custom_apn) <= 0 && net > -1 && net < 4) apn_net = net;
 8001396:	4bae      	ldr	r3, [pc, #696]	; (8001650 <GSM_Response_Handler+0x3ac>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d000      	beq.n	80013a0 <GSM_Response_Handler+0xfc>
 800139e:	e27d      	b.n	800189c <GSM_Response_Handler+0x5f8>
 80013a0:	4baa      	ldr	r3, [pc, #680]	; (800164c <GSM_Response_Handler+0x3a8>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	da00      	bge.n	80013ac <GSM_Response_Handler+0x108>
 80013aa:	e277      	b.n	800189c <GSM_Response_Handler+0x5f8>
 80013ac:	4ba7      	ldr	r3, [pc, #668]	; (800164c <GSM_Response_Handler+0x3a8>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	dd00      	ble.n	80013b8 <GSM_Response_Handler+0x114>
 80013b6:	e271      	b.n	800189c <GSM_Response_Handler+0x5f8>
 80013b8:	4ba4      	ldr	r3, [pc, #656]	; (800164c <GSM_Response_Handler+0x3a8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	569a      	ldrsb	r2, [r3, r2]
 80013be:	4ba5      	ldr	r3, [pc, #660]	; (8001654 <GSM_Response_Handler+0x3b0>)
 80013c0:	701a      	strb	r2, [r3, #0]
      break;
 80013c2:	e26b      	b.n	800189c <GSM_Response_Handler+0x5f8>
        else if (stage_step == 10 && Isroaming) //differentiate between Flolive and JT
 80013c4:	4b95      	ldr	r3, [pc, #596]	; (800161c <GSM_Response_Handler+0x378>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b0a      	cmp	r3, #10
 80013ca:	d000      	beq.n	80013ce <GSM_Response_Handler+0x12a>
 80013cc:	e266      	b.n	800189c <GSM_Response_Handler+0x5f8>
 80013ce:	4b9e      	ldr	r3, [pc, #632]	; (8001648 <GSM_Response_Handler+0x3a4>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d100      	bne.n	80013d8 <GSM_Response_Handler+0x134>
 80013d6:	e261      	b.n	800189c <GSM_Response_Handler+0x5f8>
          if (strstr((char*)gsm_Raw_Buffer, "FloLive") != NULL) apn_net = 4; //AT+CSPN?
 80013d8:	4a9f      	ldr	r2, [pc, #636]	; (8001658 <GSM_Response_Handler+0x3b4>)
 80013da:	4b95      	ldr	r3, [pc, #596]	; (8001630 <GSM_Response_Handler+0x38c>)
 80013dc:	0011      	movs	r1, r2
 80013de:	0018      	movs	r0, r3
 80013e0:	f005 f8d7 	bl	8006592 <strstr>
 80013e4:	1e03      	subs	r3, r0, #0
 80013e6:	d003      	beq.n	80013f0 <GSM_Response_Handler+0x14c>
 80013e8:	4b9a      	ldr	r3, [pc, #616]	; (8001654 <GSM_Response_Handler+0x3b0>)
 80013ea:	2204      	movs	r2, #4
 80013ec:	701a      	strb	r2, [r3, #0]
      break;
 80013ee:	e255      	b.n	800189c <GSM_Response_Handler+0x5f8>
          else apn_net = 5;
 80013f0:	4b98      	ldr	r3, [pc, #608]	; (8001654 <GSM_Response_Handler+0x3b0>)
 80013f2:	2205      	movs	r2, #5
 80013f4:	701a      	strb	r2, [r3, #0]
      break;
 80013f6:	e251      	b.n	800189c <GSM_Response_Handler+0x5f8>
    	  if(stage_step == 0)
 80013f8:	4b88      	ldr	r3, [pc, #544]	; (800161c <GSM_Response_Handler+0x378>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d000      	beq.n	8001402 <GSM_Response_Handler+0x15e>
 8001400:	e24c      	b.n	800189c <GSM_Response_Handler+0x5f8>
    		  printf("gsm_pwr_tmr\r\n");
 8001402:	4b96      	ldr	r3, [pc, #600]	; (800165c <GSM_Response_Handler+0x3b8>)
 8001404:	0018      	movs	r0, r3
 8001406:	f005 f885 	bl	8006514 <puts>
    		  gsm_pwr_tmr = 1;
 800140a:	4b86      	ldr	r3, [pc, #536]	; (8001624 <GSM_Response_Handler+0x380>)
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]
    		  if(gsm_pwr_cnt >= 2)
 8001410:	4b93      	ldr	r3, [pc, #588]	; (8001660 <GSM_Response_Handler+0x3bc>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d800      	bhi.n	800141a <GSM_Response_Handler+0x176>
 8001418:	e240      	b.n	800189c <GSM_Response_Handler+0x5f8>
    			  gsm_pwr_cnt = 0;
 800141a:	4b91      	ldr	r3, [pc, #580]	; (8001660 <GSM_Response_Handler+0x3bc>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
      break;
 8001420:	e23c      	b.n	800189c <GSM_Response_Handler+0x5f8>

    case _INIT_GPRS: //init gprs connectivity
      if ((resp = GSM_str_is_valid(init_gprs[stage_step].resp_str)))
 8001422:	4b7e      	ldr	r3, [pc, #504]	; (800161c <GSM_Response_Handler+0x378>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	0019      	movs	r1, r3
 8001428:	4a8e      	ldr	r2, [pc, #568]	; (8001664 <GSM_Response_Handler+0x3c0>)
 800142a:	000b      	movs	r3, r1
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	185b      	adds	r3, r3, r1
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	18d3      	adds	r3, r2, r3
 8001434:	3304      	adds	r3, #4
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2527      	movs	r5, #39	; 0x27
 800143a:	197c      	adds	r4, r7, r5
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff fc6d 	bl	8000d1c <GSM_str_is_valid>
 8001442:	0003      	movs	r3, r0
 8001444:	7023      	strb	r3, [r4, #0]
 8001446:	197b      	adds	r3, r7, r5
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d100      	bne.n	8001450 <GSM_Response_Handler+0x1ac>
 800144e:	e227      	b.n	80018a0 <GSM_Response_Handler+0x5fc>
#ifdef debug
        printf(("GSM response is valid for stage_step: %d:%d\r\n"), gsm_stage, stage_step);
#endif

        //process of grabbing useful data
        if (stage_step == 0)    //grab CSQ
 8001450:	4b72      	ldr	r3, [pc, #456]	; (800161c <GSM_Response_Handler+0x378>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d111      	bne.n	800147c <GSM_Response_Handler+0x1d8>
        {
          gsm_data_grabber((char*)gsm_Raw_Buffer, grab_len, "+CSQ: ", ',', CSQ, sizeof(CSQ));
 8001458:	4b73      	ldr	r3, [pc, #460]	; (8001628 <GSM_Response_Handler+0x384>)
 800145a:	8819      	ldrh	r1, [r3, #0]
 800145c:	4a82      	ldr	r2, [pc, #520]	; (8001668 <GSM_Response_Handler+0x3c4>)
 800145e:	4874      	ldr	r0, [pc, #464]	; (8001630 <GSM_Response_Handler+0x38c>)
 8001460:	2308      	movs	r3, #8
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	4b81      	ldr	r3, [pc, #516]	; (800166c <GSM_Response_Handler+0x3c8>)
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	232c      	movs	r3, #44	; 0x2c
 800146a:	f7fe ffdb 	bl	8000424 <gsm_data_grabber>
#if LOGLEVEL
          printf(("CSQ: %s\r\n"), CSQ);
 800146e:	4a7f      	ldr	r2, [pc, #508]	; (800166c <GSM_Response_Handler+0x3c8>)
 8001470:	4b7f      	ldr	r3, [pc, #508]	; (8001670 <GSM_Response_Handler+0x3cc>)
 8001472:	0011      	movs	r1, r2
 8001474:	0018      	movs	r0, r3
 8001476:	f004 ffc1 	bl	80063fc <iprintf>
#if LOGLEVEL
          printf(("IP: %s\r\n"), IP);
#endif
        }
      }
      break;
 800147a:	e211      	b.n	80018a0 <GSM_Response_Handler+0x5fc>
        else if (stage_step == 2)    //process jump of APN is already set
 800147c:	4b67      	ldr	r3, [pc, #412]	; (800161c <GSM_Response_Handler+0x378>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d112      	bne.n	80014aa <GSM_Response_Handler+0x206>
          if (strstr((char*)gsm_Raw_Buffer, APN[net]) != NULL)
 8001484:	4b71      	ldr	r3, [pc, #452]	; (800164c <GSM_Response_Handler+0x3a8>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b25b      	sxtb	r3, r3
 800148a:	001a      	movs	r2, r3
 800148c:	4b79      	ldr	r3, [pc, #484]	; (8001674 <GSM_Response_Handler+0x3d0>)
 800148e:	0092      	lsls	r2, r2, #2
 8001490:	58d2      	ldr	r2, [r2, r3]
 8001492:	4b67      	ldr	r3, [pc, #412]	; (8001630 <GSM_Response_Handler+0x38c>)
 8001494:	0011      	movs	r1, r2
 8001496:	0018      	movs	r0, r3
 8001498:	f005 f87b 	bl	8006592 <strstr>
 800149c:	1e03      	subs	r3, r0, #0
 800149e:	d100      	bne.n	80014a2 <GSM_Response_Handler+0x1fe>
 80014a0:	e1fe      	b.n	80018a0 <GSM_Response_Handler+0x5fc>
            stage_jump = 1;
 80014a2:	4b75      	ldr	r3, [pc, #468]	; (8001678 <GSM_Response_Handler+0x3d4>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
      break;
 80014a8:	e1fa      	b.n	80018a0 <GSM_Response_Handler+0x5fc>
        else if (stage_step == 5) //process grab assigned IP
 80014aa:	4b5c      	ldr	r3, [pc, #368]	; (800161c <GSM_Response_Handler+0x378>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b05      	cmp	r3, #5
 80014b0:	d000      	beq.n	80014b4 <GSM_Response_Handler+0x210>
 80014b2:	e1f5      	b.n	80018a0 <GSM_Response_Handler+0x5fc>
          gsm_data_grabber((char*)gsm_Raw_Buffer, grab_len, "\n", '\n', IP, sizeof(IP));
 80014b4:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <GSM_Response_Handler+0x384>)
 80014b6:	8819      	ldrh	r1, [r3, #0]
 80014b8:	4a5c      	ldr	r2, [pc, #368]	; (800162c <GSM_Response_Handler+0x388>)
 80014ba:	485d      	ldr	r0, [pc, #372]	; (8001630 <GSM_Response_Handler+0x38c>)
 80014bc:	2320      	movs	r3, #32
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	4b6e      	ldr	r3, [pc, #440]	; (800167c <GSM_Response_Handler+0x3d8>)
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	230a      	movs	r3, #10
 80014c6:	f7fe ffad 	bl	8000424 <gsm_data_grabber>
          gprs_Is_available = true;
 80014ca:	4b6d      	ldr	r3, [pc, #436]	; (8001680 <GSM_Response_Handler+0x3dc>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
          printf(("IP: %s\r\n"), IP);
 80014d0:	4a6a      	ldr	r2, [pc, #424]	; (800167c <GSM_Response_Handler+0x3d8>)
 80014d2:	4b6c      	ldr	r3, [pc, #432]	; (8001684 <GSM_Response_Handler+0x3e0>)
 80014d4:	0011      	movs	r1, r2
 80014d6:	0018      	movs	r0, r3
 80014d8:	f004 ff90 	bl	80063fc <iprintf>
      break;
 80014dc:	e1e0      	b.n	80018a0 <GSM_Response_Handler+0x5fc>
    case _NTP_SERVER: // module graps GPRS time
      if ((resp = GSM_str_is_valid(ntp_server[stage_step].resp_str)))
 80014de:	4b4f      	ldr	r3, [pc, #316]	; (800161c <GSM_Response_Handler+0x378>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	0019      	movs	r1, r3
 80014e4:	4a68      	ldr	r2, [pc, #416]	; (8001688 <GSM_Response_Handler+0x3e4>)
 80014e6:	000b      	movs	r3, r1
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	185b      	adds	r3, r3, r1
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	18d3      	adds	r3, r2, r3
 80014f0:	3304      	adds	r3, #4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2527      	movs	r5, #39	; 0x27
 80014f6:	197c      	adds	r4, r7, r5
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7ff fc0f 	bl	8000d1c <GSM_str_is_valid>
 80014fe:	0003      	movs	r3, r0
 8001500:	7023      	strb	r3, [r4, #0]
 8001502:	197b      	adds	r3, r7, r5
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d025      	beq.n	8001556 <GSM_Response_Handler+0x2b2>
      {
#ifdef debug
        printf(("GSM response is valid for stage_step: %d:%d\r\n"), gsm_stage, stage_step);
#endif
        if (stage_step == 1)
 800150a:	4b44      	ldr	r3, [pc, #272]	; (800161c <GSM_Response_Handler+0x378>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d103      	bne.n	800151a <GSM_Response_Handler+0x276>
        {
          stage_jump = 1;
 8001512:	4b59      	ldr	r3, [pc, #356]	; (8001678 <GSM_Response_Handler+0x3d4>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
        else if (stage_step == 5)
        {
          stage_step = 0;
        }
      }
      break;
 8001518:	e1c4      	b.n	80018a4 <GSM_Response_Handler+0x600>
        else if (stage_step == 5)
 800151a:	4b40      	ldr	r3, [pc, #256]	; (800161c <GSM_Response_Handler+0x378>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b05      	cmp	r3, #5
 8001520:	d000      	beq.n	8001524 <GSM_Response_Handler+0x280>
 8001522:	e1bf      	b.n	80018a4 <GSM_Response_Handler+0x600>
          memset(ttimeBuf, 0, sizeof(ttimeBuf));
 8001524:	4b59      	ldr	r3, [pc, #356]	; (800168c <GSM_Response_Handler+0x3e8>)
 8001526:	2220      	movs	r2, #32
 8001528:	2100      	movs	r1, #0
 800152a:	0018      	movs	r0, r3
 800152c:	f004 ff5d 	bl	80063ea <memset>
          tLen = gsm_data_grabber((char*)gsm_Raw_Buffer, grab_len, "+CCLK: \"", '+', ttimeBuf, sizeof(ttimeBuf));
 8001530:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <GSM_Response_Handler+0x384>)
 8001532:	8819      	ldrh	r1, [r3, #0]
 8001534:	4a56      	ldr	r2, [pc, #344]	; (8001690 <GSM_Response_Handler+0x3ec>)
 8001536:	483e      	ldr	r0, [pc, #248]	; (8001630 <GSM_Response_Handler+0x38c>)
 8001538:	2320      	movs	r3, #32
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <GSM_Response_Handler+0x3e8>)
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	232b      	movs	r3, #43	; 0x2b
 8001542:	f7fe ff6f 	bl	8000424 <gsm_data_grabber>
 8001546:	0003      	movs	r3, r0
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b52      	ldr	r3, [pc, #328]	; (8001694 <GSM_Response_Handler+0x3f0>)
 800154c:	701a      	strb	r2, [r3, #0]
          gprs_time_found = true;
 800154e:	4b52      	ldr	r3, [pc, #328]	; (8001698 <GSM_Response_Handler+0x3f4>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
      break;
 8001554:	e1a6      	b.n	80018a4 <GSM_Response_Handler+0x600>
        if (stage_step == 1 || stage_step == 4)
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <GSM_Response_Handler+0x378>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d003      	beq.n	8001566 <GSM_Response_Handler+0x2c2>
 800155e:	4b2f      	ldr	r3, [pc, #188]	; (800161c <GSM_Response_Handler+0x378>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b04      	cmp	r3, #4
 8001564:	d104      	bne.n	8001570 <GSM_Response_Handler+0x2cc>
          resp = true;
 8001566:	2327      	movs	r3, #39	; 0x27
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
      break;
 800156e:	e199      	b.n	80018a4 <GSM_Response_Handler+0x600>
        else if (stage_step == 5)
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <GSM_Response_Handler+0x378>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b05      	cmp	r3, #5
 8001576:	d000      	beq.n	800157a <GSM_Response_Handler+0x2d6>
 8001578:	e194      	b.n	80018a4 <GSM_Response_Handler+0x600>
          stage_step = 0;
 800157a:	4b28      	ldr	r3, [pc, #160]	; (800161c <GSM_Response_Handler+0x378>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
      break;
 8001580:	e190      	b.n	80018a4 <GSM_Response_Handler+0x600>

    case _INIT_TCP: //init tcp communication
      if ((resp = GSM_str_is_valid(init_tcp[stage_step].resp_str)))
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <GSM_Response_Handler+0x378>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	0019      	movs	r1, r3
 8001588:	4a44      	ldr	r2, [pc, #272]	; (800169c <GSM_Response_Handler+0x3f8>)
 800158a:	000b      	movs	r3, r1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	185b      	adds	r3, r3, r1
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	18d3      	adds	r3, r2, r3
 8001594:	3304      	adds	r3, #4
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2527      	movs	r5, #39	; 0x27
 800159a:	197c      	adds	r4, r7, r5
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff fbbd 	bl	8000d1c <GSM_str_is_valid>
 80015a2:	0003      	movs	r3, r0
 80015a4:	7023      	strb	r3, [r4, #0]
 80015a6:	197b      	adds	r3, r7, r5
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d013      	beq.n	80015d6 <GSM_Response_Handler+0x332>
      {
#ifdef debug
        printf(("GSM response is valid for stage_step: %d:%d\r\n"), gsm_stage, stage_step);
#endif
        //process of grabbing useful data
        if (stage_step == 1)    //set tcp_alive true
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <GSM_Response_Handler+0x378>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d000      	beq.n	80015b8 <GSM_Response_Handler+0x314>
 80015b6:	e177      	b.n	80018a8 <GSM_Response_Handler+0x604>
        {
          tcp_alive = true;
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <GSM_Response_Handler+0x3fc>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
          tcp_alive_timer = HAL_GetTick() + MAX_ALIVE_TIME;
 80015be:	f001 fae7 	bl	8002b90 <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	4a37      	ldr	r2, [pc, #220]	; (80016a4 <GSM_Response_Handler+0x400>)
 80015c6:	189a      	adds	r2, r3, r2
 80015c8:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <GSM_Response_Handler+0x404>)
 80015ca:	601a      	str	r2, [r3, #0]

#if LOGLEVEL
          printf(("tcp is opened!\r\n"));
 80015cc:	4b37      	ldr	r3, [pc, #220]	; (80016ac <GSM_Response_Handler+0x408>)
 80015ce:	0018      	movs	r0, r3
 80015d0:	f004 ffa0 	bl	8006514 <puts>

          }
          resp = true;
        }
      }
      break;
 80015d4:	e168      	b.n	80018a8 <GSM_Response_Handler+0x604>
        if (stage_step == 0)    //set tcp_alive true
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <GSM_Response_Handler+0x378>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d000      	beq.n	80015e0 <GSM_Response_Handler+0x33c>
 80015de:	e163      	b.n	80018a8 <GSM_Response_Handler+0x604>
          if (strstr((char*)gsm_Raw_Buffer, "ALREADY CONNECT") != NULL)
 80015e0:	4a33      	ldr	r2, [pc, #204]	; (80016b0 <GSM_Response_Handler+0x40c>)
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <GSM_Response_Handler+0x38c>)
 80015e4:	0011      	movs	r1, r2
 80015e6:	0018      	movs	r0, r3
 80015e8:	f004 ffd3 	bl	8006592 <strstr>
 80015ec:	1e03      	subs	r3, r0, #0
 80015ee:	d063      	beq.n	80016b8 <GSM_Response_Handler+0x414>
            tcp_alive = true;
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <GSM_Response_Handler+0x3fc>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
            tcp_alive_timer = HAL_GetTick() + MAX_ALIVE_TIME;
 80015f6:	f001 facb 	bl	8002b90 <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <GSM_Response_Handler+0x400>)
 80015fe:	189a      	adds	r2, r3, r2
 8001600:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <GSM_Response_Handler+0x404>)
 8001602:	601a      	str	r2, [r3, #0]
            printf(("OK, tcp connection exists\r\n"));
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <GSM_Response_Handler+0x410>)
 8001606:	0018      	movs	r0, r3
 8001608:	f004 ff84 	bl	8006514 <puts>
            stage_jump = 1;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <GSM_Response_Handler+0x3d4>)
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e054      	b.n	80016be <GSM_Response_Handler+0x41a>
 8001614:	20000310 	.word	0x20000310
 8001618:	08007ce4 	.word	0x08007ce4
 800161c:	200002f8 	.word	0x200002f8
 8001620:	20000488 	.word	0x20000488
 8001624:	20000010 	.word	0x20000010
 8001628:	200002fe 	.word	0x200002fe
 800162c:	080079a8 	.word	0x080079a8
 8001630:	2000050c 	.word	0x2000050c
 8001634:	20000230 	.word	0x20000230
 8001638:	080079ac 	.word	0x080079ac
 800163c:	20000250 	.word	0x20000250
 8001640:	080079b8 	.word	0x080079b8
 8001644:	080079c4 	.word	0x080079c4
 8001648:	20000313 	.word	0x20000313
 800164c:	20000054 	.word	0x20000054
 8001650:	200000f0 	.word	0x200000f0
 8001654:	20000055 	.word	0x20000055
 8001658:	080079d0 	.word	0x080079d0
 800165c:	080079d8 	.word	0x080079d8
 8001660:	200000ee 	.word	0x200000ee
 8001664:	20000630 	.word	0x20000630
 8001668:	080079e8 	.word	0x080079e8
 800166c:	20000270 	.word	0x20000270
 8001670:	080079f0 	.word	0x080079f0
 8001674:	20000678 	.word	0x20000678
 8001678:	200002f9 	.word	0x200002f9
 800167c:	20000278 	.word	0x20000278
 8001680:	20000312 	.word	0x20000312
 8001684:	080079fc 	.word	0x080079fc
 8001688:	200006b8 	.word	0x200006b8
 800168c:	20000298 	.word	0x20000298
 8001690:	08007a08 	.word	0x08007a08
 8001694:	200002fa 	.word	0x200002fa
 8001698:	20000314 	.word	0x20000314
 800169c:	20000618 	.word	0x20000618
 80016a0:	20000311 	.word	0x20000311
 80016a4:	0002bf20 	.word	0x0002bf20
 80016a8:	2000030c 	.word	0x2000030c
 80016ac:	08007a14 	.word	0x08007a14
 80016b0:	08007a24 	.word	0x08007a24
 80016b4:	08007a34 	.word	0x08007a34
            tcp_alive = false;
 80016b8:	4b9c      	ldr	r3, [pc, #624]	; (800192c <GSM_Response_Handler+0x688>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
          resp = true;
 80016be:	2327      	movs	r3, #39	; 0x27
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
      break;
 80016c6:	e0ef      	b.n	80018a8 <GSM_Response_Handler+0x604>

    case _NET_STAT: //get network status info
      if ((resp = GSM_str_is_valid(net_stat[stage_step].resp_str)))
 80016c8:	4b99      	ldr	r3, [pc, #612]	; (8001930 <GSM_Response_Handler+0x68c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	0019      	movs	r1, r3
 80016ce:	4a99      	ldr	r2, [pc, #612]	; (8001934 <GSM_Response_Handler+0x690>)
 80016d0:	000b      	movs	r3, r1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	185b      	adds	r3, r3, r1
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	18d3      	adds	r3, r2, r3
 80016da:	3304      	adds	r3, #4
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2527      	movs	r5, #39	; 0x27
 80016e0:	197c      	adds	r4, r7, r5
 80016e2:	0018      	movs	r0, r3
 80016e4:	f7ff fb1a 	bl	8000d1c <GSM_str_is_valid>
 80016e8:	0003      	movs	r3, r0
 80016ea:	7023      	strb	r3, [r4, #0]
 80016ec:	197b      	adds	r3, r7, r5
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d100      	bne.n	80016f6 <GSM_Response_Handler+0x452>
 80016f4:	e09d      	b.n	8001832 <GSM_Response_Handler+0x58e>
      {
#ifdef debug
        printf(("GSM response is valid for stage_step: %d:%d\r\n"), gsm_stage, stage_step);
#endif
        if (stage_step == 0)
 80016f6:	4b8e      	ldr	r3, [pc, #568]	; (8001930 <GSM_Response_Handler+0x68c>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d000      	beq.n	8001700 <GSM_Response_Handler+0x45c>
 80016fe:	e0d5      	b.n	80018ac <GSM_Response_Handler+0x608>
        {
          char tem_bb[32] = "";
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	3304      	adds	r3, #4
 8001708:	221c      	movs	r2, #28
 800170a:	2100      	movs	r1, #0
 800170c:	0018      	movs	r0, r3
 800170e:	f004 fe6c 	bl	80063ea <memset>
          gsm_data_grabber((char*)gsm_Raw_Buffer, grab_len, ",\"", ',', MCC, sizeof(MCC));
 8001712:	4b89      	ldr	r3, [pc, #548]	; (8001938 <GSM_Response_Handler+0x694>)
 8001714:	8819      	ldrh	r1, [r3, #0]
 8001716:	4a89      	ldr	r2, [pc, #548]	; (800193c <GSM_Response_Handler+0x698>)
 8001718:	4889      	ldr	r0, [pc, #548]	; (8001940 <GSM_Response_Handler+0x69c>)
 800171a:	2308      	movs	r3, #8
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	4b89      	ldr	r3, [pc, #548]	; (8001944 <GSM_Response_Handler+0x6a0>)
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	232c      	movs	r3, #44	; 0x2c
 8001724:	f7fe fe7e 	bl	8000424 <gsm_data_grabber>
          strcat(tem_bb, MCC);
 8001728:	4a86      	ldr	r2, [pc, #536]	; (8001944 <GSM_Response_Handler+0x6a0>)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	0011      	movs	r1, r2
 800172e:	0018      	movs	r0, r3
 8001730:	f004 ff1a 	bl	8006568 <strcat>
          strcat(tem_bb, ",");
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	0018      	movs	r0, r3
 8001738:	f7fe fcec 	bl	8000114 <strlen>
 800173c:	0003      	movs	r3, r0
 800173e:	001a      	movs	r2, r3
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	189a      	adds	r2, r3, r2
 8001744:	4b80      	ldr	r3, [pc, #512]	; (8001948 <GSM_Response_Handler+0x6a4>)
 8001746:	0010      	movs	r0, r2
 8001748:	0019      	movs	r1, r3
 800174a:	2302      	movs	r3, #2
 800174c:	001a      	movs	r2, r3
 800174e:	f004 fe43 	bl	80063d8 <memcpy>
          gsm_data_grabber((char*)gsm_Raw_Buffer, grab_len, tem_bb, ',', MNC, sizeof(MNC));
 8001752:	4b79      	ldr	r3, [pc, #484]	; (8001938 <GSM_Response_Handler+0x694>)
 8001754:	8819      	ldrh	r1, [r3, #0]
 8001756:	1d3a      	adds	r2, r7, #4
 8001758:	4879      	ldr	r0, [pc, #484]	; (8001940 <GSM_Response_Handler+0x69c>)
 800175a:	2308      	movs	r3, #8
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	4b7b      	ldr	r3, [pc, #492]	; (800194c <GSM_Response_Handler+0x6a8>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	232c      	movs	r3, #44	; 0x2c
 8001764:	f7fe fe5e 	bl	8000424 <gsm_data_grabber>
          memset(tem_bb, 0, sizeof(tem_bb));
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2220      	movs	r2, #32
 800176c:	2100      	movs	r1, #0
 800176e:	0018      	movs	r0, r3
 8001770:	f004 fe3b 	bl	80063ea <memset>
          strcat(tem_bb, MNC);
 8001774:	4a75      	ldr	r2, [pc, #468]	; (800194c <GSM_Response_Handler+0x6a8>)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	0011      	movs	r1, r2
 800177a:	0018      	movs	r0, r3
 800177c:	f004 fef4 	bl	8006568 <strcat>
          strcat(tem_bb, ",");
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	0018      	movs	r0, r3
 8001784:	f7fe fcc6 	bl	8000114 <strlen>
 8001788:	0003      	movs	r3, r0
 800178a:	001a      	movs	r2, r3
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	189a      	adds	r2, r3, r2
 8001790:	4b6d      	ldr	r3, [pc, #436]	; (8001948 <GSM_Response_Handler+0x6a4>)
 8001792:	0010      	movs	r0, r2
 8001794:	0019      	movs	r1, r3
 8001796:	2302      	movs	r3, #2
 8001798:	001a      	movs	r2, r3
 800179a:	f004 fe1d 	bl	80063d8 <memcpy>
          gsm_data_grabber((char*)gsm_Raw_Buffer, grab_len, tem_bb, ',', LAC, sizeof(LAC));
 800179e:	4b66      	ldr	r3, [pc, #408]	; (8001938 <GSM_Response_Handler+0x694>)
 80017a0:	8819      	ldrh	r1, [r3, #0]
 80017a2:	1d3a      	adds	r2, r7, #4
 80017a4:	4866      	ldr	r0, [pc, #408]	; (8001940 <GSM_Response_Handler+0x69c>)
 80017a6:	2308      	movs	r3, #8
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	4b69      	ldr	r3, [pc, #420]	; (8001950 <GSM_Response_Handler+0x6ac>)
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	232c      	movs	r3, #44	; 0x2c
 80017b0:	f7fe fe38 	bl	8000424 <gsm_data_grabber>
          memset(tem_bb, 0, sizeof(tem_bb));
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2220      	movs	r2, #32
 80017b8:	2100      	movs	r1, #0
 80017ba:	0018      	movs	r0, r3
 80017bc:	f004 fe15 	bl	80063ea <memset>
          strcat(tem_bb, LAC);
 80017c0:	4a63      	ldr	r2, [pc, #396]	; (8001950 <GSM_Response_Handler+0x6ac>)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	0011      	movs	r1, r2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f004 fece 	bl	8006568 <strcat>
          strcat(tem_bb, ",");
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7fe fca0 	bl	8000114 <strlen>
 80017d4:	0003      	movs	r3, r0
 80017d6:	001a      	movs	r2, r3
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	189a      	adds	r2, r3, r2
 80017dc:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <GSM_Response_Handler+0x6a4>)
 80017de:	0010      	movs	r0, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	2302      	movs	r3, #2
 80017e4:	001a      	movs	r2, r3
 80017e6:	f004 fdf7 	bl	80063d8 <memcpy>
          gsm_data_grabber((char*)gsm_Raw_Buffer, grab_len, tem_bb, ',', CID, sizeof(CID));
 80017ea:	4b53      	ldr	r3, [pc, #332]	; (8001938 <GSM_Response_Handler+0x694>)
 80017ec:	8819      	ldrh	r1, [r3, #0]
 80017ee:	1d3a      	adds	r2, r7, #4
 80017f0:	4853      	ldr	r0, [pc, #332]	; (8001940 <GSM_Response_Handler+0x69c>)
 80017f2:	2308      	movs	r3, #8
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	4b57      	ldr	r3, [pc, #348]	; (8001954 <GSM_Response_Handler+0x6b0>)
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	232c      	movs	r3, #44	; 0x2c
 80017fc:	f7fe fe12 	bl	8000424 <gsm_data_grabber>

#if LOGLEVEL
          printf(("MCC: %s\r\n"), MCC);
 8001800:	4a50      	ldr	r2, [pc, #320]	; (8001944 <GSM_Response_Handler+0x6a0>)
 8001802:	4b55      	ldr	r3, [pc, #340]	; (8001958 <GSM_Response_Handler+0x6b4>)
 8001804:	0011      	movs	r1, r2
 8001806:	0018      	movs	r0, r3
 8001808:	f004 fdf8 	bl	80063fc <iprintf>
          printf(("MNC: %s\r\n"), MNC);
 800180c:	4a4f      	ldr	r2, [pc, #316]	; (800194c <GSM_Response_Handler+0x6a8>)
 800180e:	4b53      	ldr	r3, [pc, #332]	; (800195c <GSM_Response_Handler+0x6b8>)
 8001810:	0011      	movs	r1, r2
 8001812:	0018      	movs	r0, r3
 8001814:	f004 fdf2 	bl	80063fc <iprintf>
          printf(("LAC: %s\r\n"), LAC);
 8001818:	4a4d      	ldr	r2, [pc, #308]	; (8001950 <GSM_Response_Handler+0x6ac>)
 800181a:	4b51      	ldr	r3, [pc, #324]	; (8001960 <GSM_Response_Handler+0x6bc>)
 800181c:	0011      	movs	r1, r2
 800181e:	0018      	movs	r0, r3
 8001820:	f004 fdec 	bl	80063fc <iprintf>
          printf(("CID: %s\r\n"), CID);
 8001824:	4a4b      	ldr	r2, [pc, #300]	; (8001954 <GSM_Response_Handler+0x6b0>)
 8001826:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <GSM_Response_Handler+0x6c0>)
 8001828:	0011      	movs	r1, r2
 800182a:	0018      	movs	r0, r3
 800182c:	f004 fde6 	bl	80063fc <iprintf>
        if (stage_step == 0)
        {
          resp = true;
        }
      }
      break;
 8001830:	e03c      	b.n	80018ac <GSM_Response_Handler+0x608>
        if (stage_step == 0)
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <GSM_Response_Handler+0x68c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d138      	bne.n	80018ac <GSM_Response_Handler+0x608>
          resp = true;
 800183a:	2327      	movs	r3, #39	; 0x27
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
      break;
 8001842:	e033      	b.n	80018ac <GSM_Response_Handler+0x608>
    case _SEND_DATA:    //send
      if ((resp = GSM_str_is_valid(send_data[stage_step].resp_str)))
 8001844:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <GSM_Response_Handler+0x68c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	0019      	movs	r1, r3
 800184a:	4a47      	ldr	r2, [pc, #284]	; (8001968 <GSM_Response_Handler+0x6c4>)
 800184c:	000b      	movs	r3, r1
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	185b      	adds	r3, r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	18d3      	adds	r3, r2, r3
 8001856:	3304      	adds	r3, #4
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2527      	movs	r5, #39	; 0x27
 800185c:	197c      	adds	r4, r7, r5
 800185e:	0018      	movs	r0, r3
 8001860:	f7ff fa5c 	bl	8000d1c <GSM_str_is_valid>
 8001864:	0003      	movs	r3, r0
 8001866:	7023      	strb	r3, [r4, #0]
 8001868:	197b      	adds	r3, r7, r5
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00e      	beq.n	800188e <GSM_Response_Handler+0x5ea>
      {
#ifdef debug
        printf(("GSM response is valid for stage_step: %d:%d\r\n"), gsm_stage, stage_step);
#endif
        if (stage_step == 2)
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <GSM_Response_Handler+0x68c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d11b      	bne.n	80018b0 <GSM_Response_Handler+0x60c>
        {
          tcp_alive_timer = HAL_GetTick() + MAX_ALIVE_TIME;
 8001878:	f001 f98a 	bl	8002b90 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	4a3b      	ldr	r2, [pc, #236]	; (800196c <GSM_Response_Handler+0x6c8>)
 8001880:	189a      	adds	r2, r3, r2
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <GSM_Response_Handler+0x6cc>)
 8001884:	601a      	str	r2, [r3, #0]
          dataAck = true;
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <GSM_Response_Handler+0x6d0>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
        else if(stage_step == 2)
        {
        	resp = true;
        }*/
      }
      break;
 800188c:	e010      	b.n	80018b0 <GSM_Response_Handler+0x60c>
          resp = true;
 800188e:	2327      	movs	r3, #39	; 0x27
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
      break;
 8001896:	e00b      	b.n	80018b0 <GSM_Response_Handler+0x60c>

    default:
#ifdef debug
      printf(("gsm_stage: %d\r\n"), gsm_stage);
#endif
      break;
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	e00a      	b.n	80018b2 <GSM_Response_Handler+0x60e>
      break;
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	e008      	b.n	80018b2 <GSM_Response_Handler+0x60e>
      break;
 80018a0:	46c0      	nop			; (mov r8, r8)
 80018a2:	e006      	b.n	80018b2 <GSM_Response_Handler+0x60e>
      break;
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	e004      	b.n	80018b2 <GSM_Response_Handler+0x60e>
      break;
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	e002      	b.n	80018b2 <GSM_Response_Handler+0x60e>
      break;
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	e000      	b.n	80018b2 <GSM_Response_Handler+0x60e>
      break;
 80018b0:	46c0      	nop			; (mov r8, r8)
  }

  if (resp)
 80018b2:	2327      	movs	r3, #39	; 0x27
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d032      	beq.n	8001922 <GSM_Response_Handler+0x67e>
  {
    if (stage_step < (GSM_MAX_STAGE_STEP[gsm_stage] - 1))
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <GSM_Response_Handler+0x68c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	0019      	movs	r1, r3
 80018c2:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <GSM_Response_Handler+0x6d4>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	001a      	movs	r2, r3
 80018c8:	4b2c      	ldr	r3, [pc, #176]	; (800197c <GSM_Response_Handler+0x6d8>)
 80018ca:	0052      	lsls	r2, r2, #1
 80018cc:	5ad3      	ldrh	r3, [r2, r3]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	4299      	cmp	r1, r3
 80018d2:	da0d      	bge.n	80018f0 <GSM_Response_Handler+0x64c>
    {
      stage_step = stage_step + stage_jump + 1;
 80018d4:	4b16      	ldr	r3, [pc, #88]	; (8001930 <GSM_Response_Handler+0x68c>)
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	4b29      	ldr	r3, [pc, #164]	; (8001980 <GSM_Response_Handler+0x6dc>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	18d3      	adds	r3, r2, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <GSM_Response_Handler+0x68c>)
 80018e6:	701a      	strb	r2, [r3, #0]
      stage_jump = 0;
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <GSM_Response_Handler+0x6dc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
      stage_step = 0;
      if (gsm_stage < MAX_GSM_STAGE - 1) //prevent process from going to the last stage, which is 'close net'
        gsm_stage++;
    }
  }
}
 80018ee:	e018      	b.n	8001922 <GSM_Response_Handler+0x67e>
    else if (stage_step >= (GSM_MAX_STAGE_STEP[gsm_stage] - 1))
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <GSM_Response_Handler+0x68c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	0019      	movs	r1, r3
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <GSM_Response_Handler+0x6d4>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	001a      	movs	r2, r3
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <GSM_Response_Handler+0x6d8>)
 80018fe:	0052      	lsls	r2, r2, #1
 8001900:	5ad3      	ldrh	r3, [r2, r3]
 8001902:	3b01      	subs	r3, #1
 8001904:	4299      	cmp	r1, r3
 8001906:	db0c      	blt.n	8001922 <GSM_Response_Handler+0x67e>
      stage_step = 0;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <GSM_Response_Handler+0x68c>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
      if (gsm_stage < MAX_GSM_STAGE - 1) //prevent process from going to the last stage, which is 'close net'
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <GSM_Response_Handler+0x6d4>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b05      	cmp	r3, #5
 8001914:	d805      	bhi.n	8001922 <GSM_Response_Handler+0x67e>
        gsm_stage++;
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <GSM_Response_Handler+0x6d4>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <GSM_Response_Handler+0x6d4>)
 8001920:	701a      	strb	r2, [r3, #0]
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b00a      	add	sp, #40	; 0x28
 8001928:	bdb0      	pop	{r4, r5, r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	20000311 	.word	0x20000311
 8001930:	200002f8 	.word	0x200002f8
 8001934:	2000060c 	.word	0x2000060c
 8001938:	200002fe 	.word	0x200002fe
 800193c:	08007a50 	.word	0x08007a50
 8001940:	2000050c 	.word	0x2000050c
 8001944:	20000210 	.word	0x20000210
 8001948:	080079a0 	.word	0x080079a0
 800194c:	20000218 	.word	0x20000218
 8001950:	20000220 	.word	0x20000220
 8001954:	20000228 	.word	0x20000228
 8001958:	08007a54 	.word	0x08007a54
 800195c:	08007a60 	.word	0x08007a60
 8001960:	08007a6c 	.word	0x08007a6c
 8001964:	08007a78 	.word	0x08007a78
 8001968:	20000694 	.word	0x20000694
 800196c:	0002bf20 	.word	0x0002bf20
 8001970:	2000030c 	.word	0x2000030c
 8001974:	20000315 	.word	0x20000315
 8001978:	20000310 	.word	0x20000310
 800197c:	08007d4c 	.word	0x08007d4c
 8001980:	200002f9 	.word	0x200002f9

08001984 <setUp_GSM>:

void setUp_GSM(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	init_apn_str();
 8001988:	f000 f904 	bl	8001b94 <init_apn_str>
	init_GSM_str();
 800198c:	f000 f92e 	bl	8001bec <init_GSM_str>
	gsm_operation_delay = 0;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <setUp_GSM+0x28>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
	//gsm_operation_delay = HAL_GetTick() + GSM_DELAY;
	tcp_alive_timer = HAL_GetTick() + MAX_ALIVE_TIME + 120000;
 8001996:	f001 f8fb 	bl	8002b90 <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <setUp_GSM+0x2c>)
 800199e:	189a      	adds	r2, r3, r2
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <setUp_GSM+0x30>)
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	20000308 	.word	0x20000308
 80019b0:	000493e0 	.word	0x000493e0
 80019b4:	2000030c 	.word	0x2000030c

080019b8 <process_GSM_Frames>:

u16 process_GSM_Frames(const u8 *str, u16 str_len, char* resp, u16 respLen)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	0008      	movs	r0, r1
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	0019      	movs	r1, r3
 80019c6:	240a      	movs	r4, #10
 80019c8:	193b      	adds	r3, r7, r4
 80019ca:	1c02      	adds	r2, r0, #0
 80019cc:	801a      	strh	r2, [r3, #0]
 80019ce:	2308      	movs	r3, #8
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	1c0a      	adds	r2, r1, #0
 80019d4:	801a      	strh	r2, [r3, #0]
  if (str_len <= 0) return 0;
 80019d6:	193b      	adds	r3, r7, r4
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <process_GSM_Frames+0x2a>
 80019de:	2300      	movs	r3, #0
 80019e0:	e06d      	b.n	8001abe <process_GSM_Frames+0x106>
  u16 rLen = 0;
 80019e2:	2316      	movs	r3, #22
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	2200      	movs	r2, #0
 80019e8:	801a      	strh	r2, [r3, #0]
  if ((strstr((char*)str, "+PDP DEACT") != NULL) || (strstr((char*)str, "CLOSED") != NULL))
 80019ea:	4a37      	ldr	r2, [pc, #220]	; (8001ac8 <process_GSM_Frames+0x110>)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	0011      	movs	r1, r2
 80019f0:	0018      	movs	r0, r3
 80019f2:	f004 fdce 	bl	8006592 <strstr>
 80019f6:	1e03      	subs	r3, r0, #0
 80019f8:	d107      	bne.n	8001a0a <process_GSM_Frames+0x52>
 80019fa:	4a34      	ldr	r2, [pc, #208]	; (8001acc <process_GSM_Frames+0x114>)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	0011      	movs	r1, r2
 8001a00:	0018      	movs	r0, r3
 8001a02:	f004 fdc6 	bl	8006592 <strstr>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d003      	beq.n	8001a12 <process_GSM_Frames+0x5a>
  {
#ifdef debug
    printf(("TCP closed\r\n"));
#endif
    retry = true;
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <process_GSM_Frames+0x118>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	e052      	b.n	8001ab8 <process_GSM_Frames+0x100>
  }
  else if (strstr((char*)str, "*PSUTTZ") != NULL)
 8001a12:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <process_GSM_Frames+0x11c>)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f004 fdba 	bl	8006592 <strstr>
 8001a1e:	1e03      	subs	r3, r0, #0
 8001a20:	d018      	beq.n	8001a54 <process_GSM_Frames+0x9c>
  {
    memset(ttimeBuf, 0, sizeof(ttimeBuf));
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <process_GSM_Frames+0x120>)
 8001a24:	2220      	movs	r2, #32
 8001a26:	2100      	movs	r1, #0
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f004 fcde 	bl	80063ea <memset>
    tLen = gsm_data_grabber((char*)gsm_Raw_Buffer, grab_len, "*PSUTTZ: ", '+', ttimeBuf, sizeof(ttimeBuf));
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <process_GSM_Frames+0x124>)
 8001a30:	8819      	ldrh	r1, [r3, #0]
 8001a32:	4a2b      	ldr	r2, [pc, #172]	; (8001ae0 <process_GSM_Frames+0x128>)
 8001a34:	482b      	ldr	r0, [pc, #172]	; (8001ae4 <process_GSM_Frames+0x12c>)
 8001a36:	2320      	movs	r3, #32
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <process_GSM_Frames+0x120>)
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	232b      	movs	r3, #43	; 0x2b
 8001a40:	f7fe fcf0 	bl	8000424 <gsm_data_grabber>
 8001a44:	0003      	movs	r3, r0
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <process_GSM_Frames+0x130>)
 8001a4a:	701a      	strb	r2, [r3, #0]
    gprs_time_found = true;
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <process_GSM_Frames+0x134>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
 8001a52:	e031      	b.n	8001ab8 <process_GSM_Frames+0x100>
  }
  else if ((strstr((char*)str, server_start_str) != NULL) && (strstr((char*)str, end_str) != NULL) && (strstr((char*)str, IMEI) != NULL))
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <process_GSM_Frames+0x138>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f004 fd98 	bl	8006592 <strstr>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d028      	beq.n	8001ab8 <process_GSM_Frames+0x100>
 8001a66:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <process_GSM_Frames+0x13c>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	0011      	movs	r1, r2
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f004 fd8f 	bl	8006592 <strstr>
 8001a74:	1e03      	subs	r3, r0, #0
 8001a76:	d01f      	beq.n	8001ab8 <process_GSM_Frames+0x100>
 8001a78:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <process_GSM_Frames+0x140>)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	0011      	movs	r1, r2
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f004 fd87 	bl	8006592 <strstr>
 8001a84:	1e03      	subs	r3, r0, #0
 8001a86:	d017      	beq.n	8001ab8 <process_GSM_Frames+0x100>
  {
	  rLen = gsm_data_grabber((char*)str, str_len, server_start_str, '#', resp, respLen);
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <process_GSM_Frames+0x138>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2316      	movs	r3, #22
 8001a8e:	18fc      	adds	r4, r7, r3
 8001a90:	230a      	movs	r3, #10
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	8819      	ldrh	r1, [r3, #0]
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	2308      	movs	r3, #8
 8001a9a:	18fb      	adds	r3, r7, r3
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2323      	movs	r3, #35	; 0x23
 8001aa6:	f7fe fcbd 	bl	8000424 <gsm_data_grabber>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	8023      	strh	r3, [r4, #0]
	  send_tmr = HAL_GetTick();
 8001aae:	f001 f86f 	bl	8002b90 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <process_GSM_Frames+0x144>)
 8001ab6:	601a      	str	r2, [r3, #0]
    printf(("Valid server data! -> %s\r\n"), resp);
#endif

  }

  return rLen;
 8001ab8:	2316      	movs	r3, #22
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	881b      	ldrh	r3, [r3, #0]
}
 8001abe:	0018      	movs	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b007      	add	sp, #28
 8001ac4:	bd90      	pop	{r4, r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	08007a84 	.word	0x08007a84
 8001acc:	08007a90 	.word	0x08007a90
 8001ad0:	20000316 	.word	0x20000316
 8001ad4:	08007a98 	.word	0x08007a98
 8001ad8:	20000298 	.word	0x20000298
 8001adc:	200002fe 	.word	0x200002fe
 8001ae0:	08007aa0 	.word	0x08007aa0
 8001ae4:	2000050c 	.word	0x2000050c
 8001ae8:	200002fa 	.word	0x200002fa
 8001aec:	20000314 	.word	0x20000314
 8001af0:	20000004 	.word	0x20000004
 8001af4:	20000008 	.word	0x20000008
 8001af8:	20000230 	.word	0x20000230
 8001afc:	200000e8 	.word	0x200000e8

08001b00 <GSM_Process>:

void GSM_Process(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	if (tmr_not_expired(HAL_GetTick(), gsm_operation_delay))
 8001b04:	f001 f844 	bl	8002b90 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <GSM_Process+0x80>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d333      	bcc.n	8001b7a <GSM_Process+0x7a>
	{
		return;
	}

	GSM_Send_Handler();
 8001b12:	f7ff f919 	bl	8000d48 <GSM_Send_Handler>

	if ((grab_len =  rec_GSM_str()) > 0)
 8001b16:	f7ff f8d5 	bl	8000cc4 <rec_GSM_str>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	001a      	movs	r2, r3
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <GSM_Process+0x84>)
 8001b20:	801a      	strh	r2, [r3, #0]
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <GSM_Process+0x84>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d020      	beq.n	8001b6c <GSM_Process+0x6c>
	{
#ifdef debug
		printf(("GSM recv: %s:%d\r\n"), gsm_Raw_Buffer, grab_len);
#endif
		GSM_Response_Handler();
 8001b2a:	f7ff fbbb 	bl	80012a4 <GSM_Response_Handler>
	    if (inputLen == 0)
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <GSM_Process+0x88>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d110      	bne.n	8001b58 <GSM_Process+0x58>
	    {
	    	memset(userInput, 0, sizeof(userInput));
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <GSM_Process+0x8c>)
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f004 fc54 	bl	80063ea <memset>
	    	inputLen = process_GSM_Frames(gsm_Raw_Buffer, grab_len, userInput, sizeof(userInput));
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <GSM_Process+0x84>)
 8001b44:	8819      	ldrh	r1, [r3, #0]
 8001b46:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <GSM_Process+0x8c>)
 8001b48:	4811      	ldr	r0, [pc, #68]	; (8001b90 <GSM_Process+0x90>)
 8001b4a:	2340      	movs	r3, #64	; 0x40
 8001b4c:	f7ff ff34 	bl	80019b8 <process_GSM_Frames>
 8001b50:	0003      	movs	r3, r0
 8001b52:	001a      	movs	r2, r3
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <GSM_Process+0x88>)
 8001b56:	801a      	strh	r2, [r3, #0]
	    }
	    	memset(gsm_Raw_Buffer, 0, sizeof(gsm_Raw_Buffer));
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	005a      	lsls	r2, r3, #1
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <GSM_Process+0x90>)
 8001b5e:	2100      	movs	r1, #0
 8001b60:	0018      	movs	r0, r3
 8001b62:	f004 fc42 	bl	80063ea <memset>
		grab_len = 0;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <GSM_Process+0x84>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	801a      	strh	r2, [r3, #0]
    	testLen = rec_str(test_buf, MAX_LEN);
    	inputLen = process_GSM_Frames(test_buf, testLen, userInput, sizeof(userInput));
    }
#endif
*/
	sendPacket_Handler();
 8001b6c:	f7fe feda 	bl	8000924 <sendPacket_Handler>
	receivePacket_Handler();
 8001b70:	f7fe ffa6 	bl	8000ac0 <receivePacket_Handler>
	connectivity_watchdog();
 8001b74:	f7ff f872 	bl	8000c5c <connectivity_watchdog>
 8001b78:	e000      	b.n	8001b7c <GSM_Process+0x7c>
		return;
 8001b7a:	46c0      	nop			; (mov r8, r8)
}
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000308 	.word	0x20000308
 8001b84:	200002fe 	.word	0x200002fe
 8001b88:	200002fc 	.word	0x200002fc
 8001b8c:	200002b8 	.word	0x200002b8
 8001b90:	2000050c 	.word	0x2000050c

08001b94 <init_apn_str>:
gsm_parameter close_net     [CLOSE_NET_NO];



void init_apn_str(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	APN[0] = Glo;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <init_apn_str+0x3c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <init_apn_str+0x40>)
 8001b9e:	601a      	str	r2, [r3, #0]
	APN[1] = MTN;
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <init_apn_str+0x44>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <init_apn_str+0x40>)
 8001ba6:	605a      	str	r2, [r3, #4]
	APN[2] = Airtel;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <init_apn_str+0x48>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <init_apn_str+0x40>)
 8001bae:	609a      	str	r2, [r3, #8]
	APN[3] = NineMobile;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <init_apn_str+0x4c>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <init_apn_str+0x40>)
 8001bb6:	60da      	str	r2, [r3, #12]
	APN[4] = Flolive;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <init_apn_str+0x50>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <init_apn_str+0x40>)
 8001bbe:	611a      	str	r2, [r3, #16]
	APN[5] = JTIOT;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <init_apn_str+0x54>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <init_apn_str+0x40>)
 8001bc6:	615a      	str	r2, [r3, #20]
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	20000014 	.word	0x20000014
 8001bd4:	20000678 	.word	0x20000678
 8001bd8:	20000018 	.word	0x20000018
 8001bdc:	2000001c 	.word	0x2000001c
 8001be0:	20000020 	.word	0x20000020
 8001be4:	20000024 	.word	0x20000024
 8001be8:	20000028 	.word	0x20000028

08001bec <init_GSM_str>:

void init_GSM_str(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	//0 = creating the detect gsm string
	detect_gsm[0].query_str = "AT"; 					detect_gsm[0].resp_str = "OK"; 				detect_gsm[0].wait_tmr = 200;	                //0
 8001bf0:	4b96      	ldr	r3, [pc, #600]	; (8001e4c <init_GSM_str+0x260>)
 8001bf2:	4a97      	ldr	r2, [pc, #604]	; (8001e50 <init_GSM_str+0x264>)
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	4b95      	ldr	r3, [pc, #596]	; (8001e4c <init_GSM_str+0x260>)
 8001bf8:	4a96      	ldr	r2, [pc, #600]	; (8001e54 <init_GSM_str+0x268>)
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	4b93      	ldr	r3, [pc, #588]	; (8001e4c <init_GSM_str+0x260>)
 8001bfe:	22c8      	movs	r2, #200	; 0xc8
 8001c00:	811a      	strh	r2, [r3, #8]
	detect_gsm[1].query_str = "AT+CFUN= 1,1"; 			detect_gsm[1].resp_str = "OK"; 				detect_gsm[1].wait_tmr = 25000; 	            //1
 8001c02:	4b92      	ldr	r3, [pc, #584]	; (8001e4c <init_GSM_str+0x260>)
 8001c04:	4a94      	ldr	r2, [pc, #592]	; (8001e58 <init_GSM_str+0x26c>)
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	4b90      	ldr	r3, [pc, #576]	; (8001e4c <init_GSM_str+0x260>)
 8001c0a:	4a92      	ldr	r2, [pc, #584]	; (8001e54 <init_GSM_str+0x268>)
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	4b8f      	ldr	r3, [pc, #572]	; (8001e4c <init_GSM_str+0x260>)
 8001c10:	4a92      	ldr	r2, [pc, #584]	; (8001e5c <init_GSM_str+0x270>)
 8001c12:	829a      	strh	r2, [r3, #20]
	detect_gsm[2].query_str = "AT+GSN"; 				detect_gsm[2].resp_str = "OK"; 				detect_gsm[2].wait_tmr = 500; 					//2 = grab IMEI
 8001c14:	4b8d      	ldr	r3, [pc, #564]	; (8001e4c <init_GSM_str+0x260>)
 8001c16:	4a92      	ldr	r2, [pc, #584]	; (8001e60 <init_GSM_str+0x274>)
 8001c18:	619a      	str	r2, [r3, #24]
 8001c1a:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <init_GSM_str+0x260>)
 8001c1c:	4a8d      	ldr	r2, [pc, #564]	; (8001e54 <init_GSM_str+0x268>)
 8001c1e:	61da      	str	r2, [r3, #28]
 8001c20:	4b8a      	ldr	r3, [pc, #552]	; (8001e4c <init_GSM_str+0x260>)
 8001c22:	22fa      	movs	r2, #250	; 0xfa
 8001c24:	0052      	lsls	r2, r2, #1
 8001c26:	841a      	strh	r2, [r3, #32]
	detect_gsm[3].query_str = "AT+CCID"; 				detect_gsm[3].resp_str = "OK"; 				detect_gsm[3].wait_tmr = 2000;                  //3 = grab ICCID
 8001c28:	4b88      	ldr	r3, [pc, #544]	; (8001e4c <init_GSM_str+0x260>)
 8001c2a:	4a8e      	ldr	r2, [pc, #568]	; (8001e64 <init_GSM_str+0x278>)
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8001c2e:	4b87      	ldr	r3, [pc, #540]	; (8001e4c <init_GSM_str+0x260>)
 8001c30:	4a88      	ldr	r2, [pc, #544]	; (8001e54 <init_GSM_str+0x268>)
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
 8001c34:	4b85      	ldr	r3, [pc, #532]	; (8001e4c <init_GSM_str+0x260>)
 8001c36:	22fa      	movs	r2, #250	; 0xfa
 8001c38:	00d2      	lsls	r2, r2, #3
 8001c3a:	859a      	strh	r2, [r3, #44]	; 0x2c
	detect_gsm[4].query_str = "AT+CENG=3"; 				detect_gsm[4].resp_str = "OK"; 				detect_gsm[4].wait_tmr = 500;                   //4
 8001c3c:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <init_GSM_str+0x260>)
 8001c3e:	4a8a      	ldr	r2, [pc, #552]	; (8001e68 <init_GSM_str+0x27c>)
 8001c40:	631a      	str	r2, [r3, #48]	; 0x30
 8001c42:	4b82      	ldr	r3, [pc, #520]	; (8001e4c <init_GSM_str+0x260>)
 8001c44:	4a83      	ldr	r2, [pc, #524]	; (8001e54 <init_GSM_str+0x268>)
 8001c46:	635a      	str	r2, [r3, #52]	; 0x34
 8001c48:	4b80      	ldr	r3, [pc, #512]	; (8001e4c <init_GSM_str+0x260>)
 8001c4a:	22fa      	movs	r2, #250	; 0xfa
 8001c4c:	0052      	lsls	r2, r2, #1
 8001c4e:	871a      	strh	r2, [r3, #56]	; 0x38
	detect_gsm[5].query_str = "ATE0"; 					detect_gsm[5].resp_str = "OK"; 				detect_gsm[5].wait_tmr = 200;                   //5
 8001c50:	4b7e      	ldr	r3, [pc, #504]	; (8001e4c <init_GSM_str+0x260>)
 8001c52:	4a86      	ldr	r2, [pc, #536]	; (8001e6c <init_GSM_str+0x280>)
 8001c54:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c56:	4b7d      	ldr	r3, [pc, #500]	; (8001e4c <init_GSM_str+0x260>)
 8001c58:	4a7e      	ldr	r2, [pc, #504]	; (8001e54 <init_GSM_str+0x268>)
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c5c:	4b7b      	ldr	r3, [pc, #492]	; (8001e4c <init_GSM_str+0x260>)
 8001c5e:	2244      	movs	r2, #68	; 0x44
 8001c60:	21c8      	movs	r1, #200	; 0xc8
 8001c62:	5299      	strh	r1, [r3, r2]
	detect_gsm[6].query_str = "AT+CNMI=2,2,0,0,0"; 		detect_gsm[6].resp_str = "OK"; 				detect_gsm[6].wait_tmr = 500;                   //6
 8001c64:	4b79      	ldr	r3, [pc, #484]	; (8001e4c <init_GSM_str+0x260>)
 8001c66:	4a82      	ldr	r2, [pc, #520]	; (8001e70 <init_GSM_str+0x284>)
 8001c68:	649a      	str	r2, [r3, #72]	; 0x48
 8001c6a:	4b78      	ldr	r3, [pc, #480]	; (8001e4c <init_GSM_str+0x260>)
 8001c6c:	4a79      	ldr	r2, [pc, #484]	; (8001e54 <init_GSM_str+0x268>)
 8001c6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c70:	4b76      	ldr	r3, [pc, #472]	; (8001e4c <init_GSM_str+0x260>)
 8001c72:	2250      	movs	r2, #80	; 0x50
 8001c74:	21fa      	movs	r1, #250	; 0xfa
 8001c76:	0049      	lsls	r1, r1, #1
 8001c78:	5299      	strh	r1, [r3, r2]
	detect_gsm[7].query_str = "AT+CMGF=1"; 				detect_gsm[7].resp_str = "OK"; 				detect_gsm[7].wait_tmr = 500;                   //7
 8001c7a:	4b74      	ldr	r3, [pc, #464]	; (8001e4c <init_GSM_str+0x260>)
 8001c7c:	4a7d      	ldr	r2, [pc, #500]	; (8001e74 <init_GSM_str+0x288>)
 8001c7e:	655a      	str	r2, [r3, #84]	; 0x54
 8001c80:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <init_GSM_str+0x260>)
 8001c82:	4a74      	ldr	r2, [pc, #464]	; (8001e54 <init_GSM_str+0x268>)
 8001c84:	659a      	str	r2, [r3, #88]	; 0x58
 8001c86:	4b71      	ldr	r3, [pc, #452]	; (8001e4c <init_GSM_str+0x260>)
 8001c88:	225c      	movs	r2, #92	; 0x5c
 8001c8a:	21fa      	movs	r1, #250	; 0xfa
 8001c8c:	0049      	lsls	r1, r1, #1
 8001c8e:	5299      	strh	r1, [r3, r2]
	detect_gsm[8].query_str = "AT+CGREG?"; 				detect_gsm[8].resp_str = "OK"; 				detect_gsm[8].wait_tmr = 500;                   //8 = process roaming network affirmation
 8001c90:	4b6e      	ldr	r3, [pc, #440]	; (8001e4c <init_GSM_str+0x260>)
 8001c92:	4a79      	ldr	r2, [pc, #484]	; (8001e78 <init_GSM_str+0x28c>)
 8001c94:	661a      	str	r2, [r3, #96]	; 0x60
 8001c96:	4b6d      	ldr	r3, [pc, #436]	; (8001e4c <init_GSM_str+0x260>)
 8001c98:	4a6e      	ldr	r2, [pc, #440]	; (8001e54 <init_GSM_str+0x268>)
 8001c9a:	665a      	str	r2, [r3, #100]	; 0x64
 8001c9c:	4b6b      	ldr	r3, [pc, #428]	; (8001e4c <init_GSM_str+0x260>)
 8001c9e:	2268      	movs	r2, #104	; 0x68
 8001ca0:	21fa      	movs	r1, #250	; 0xfa
 8001ca2:	0049      	lsls	r1, r1, #1
 8001ca4:	5299      	strh	r1, [r3, r2]
	detect_gsm[9].query_str = "AT+COPS?"; 				detect_gsm[9].resp_str = "+COPS: 0,0,"; 	detect_gsm[9].wait_tmr = 1000;                  //9 = process APN ID
 8001ca6:	4b69      	ldr	r3, [pc, #420]	; (8001e4c <init_GSM_str+0x260>)
 8001ca8:	4a74      	ldr	r2, [pc, #464]	; (8001e7c <init_GSM_str+0x290>)
 8001caa:	66da      	str	r2, [r3, #108]	; 0x6c
 8001cac:	4b67      	ldr	r3, [pc, #412]	; (8001e4c <init_GSM_str+0x260>)
 8001cae:	4a74      	ldr	r2, [pc, #464]	; (8001e80 <init_GSM_str+0x294>)
 8001cb0:	671a      	str	r2, [r3, #112]	; 0x70
 8001cb2:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <init_GSM_str+0x260>)
 8001cb4:	2274      	movs	r2, #116	; 0x74
 8001cb6:	21fa      	movs	r1, #250	; 0xfa
 8001cb8:	0089      	lsls	r1, r1, #2
 8001cba:	5299      	strh	r1, [r3, r2]
	detect_gsm[10].query_str = "AT+CSPN?"; 				detect_gsm[10].resp_str = "OK"; 			detect_gsm[10].wait_tmr = 1000;                 //10 = reaffirm a roaming network, re-process a apn
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <init_GSM_str+0x260>)
 8001cbe:	4a71      	ldr	r2, [pc, #452]	; (8001e84 <init_GSM_str+0x298>)
 8001cc0:	679a      	str	r2, [r3, #120]	; 0x78
 8001cc2:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <init_GSM_str+0x260>)
 8001cc4:	4a63      	ldr	r2, [pc, #396]	; (8001e54 <init_GSM_str+0x268>)
 8001cc6:	67da      	str	r2, [r3, #124]	; 0x7c
 8001cc8:	4b60      	ldr	r3, [pc, #384]	; (8001e4c <init_GSM_str+0x260>)
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	21fa      	movs	r1, #250	; 0xfa
 8001cce:	0089      	lsls	r1, r1, #2
 8001cd0:	5299      	strh	r1, [r3, r2]

	//1 = creating the init gprs string
	init_gprs[0].query_str = "AT+CSQ";  						init_gprs[0].resp_str = "OK"; 		init_gprs[0].wait_tmr = 200;                    //0 = grab network signal strength
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <init_GSM_str+0x29c>)
 8001cd4:	4a6d      	ldr	r2, [pc, #436]	; (8001e8c <init_GSM_str+0x2a0>)
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	4b6b      	ldr	r3, [pc, #428]	; (8001e88 <init_GSM_str+0x29c>)
 8001cda:	4a5e      	ldr	r2, [pc, #376]	; (8001e54 <init_GSM_str+0x268>)
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <init_GSM_str+0x29c>)
 8001ce0:	22c8      	movs	r2, #200	; 0xc8
 8001ce2:	811a      	strh	r2, [r3, #8]
	init_gprs[1].query_str = "AT+CGATT=1";  					init_gprs[1].resp_str = "OK"; 		init_gprs[1].wait_tmr = 200;                    //1
 8001ce4:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <init_GSM_str+0x29c>)
 8001ce6:	4a6a      	ldr	r2, [pc, #424]	; (8001e90 <init_GSM_str+0x2a4>)
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <init_GSM_str+0x29c>)
 8001cec:	4a59      	ldr	r2, [pc, #356]	; (8001e54 <init_GSM_str+0x268>)
 8001cee:	611a      	str	r2, [r3, #16]
 8001cf0:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <init_GSM_str+0x29c>)
 8001cf2:	22c8      	movs	r2, #200	; 0xc8
 8001cf4:	829a      	strh	r2, [r3, #20]
	init_gprs[2].query_str = "AT+CSTT?";  						init_gprs[2].resp_str = "OK"; 		init_gprs[2].wait_tmr = 300;                    //2 = process response for possible jump of APN settings
 8001cf6:	4b64      	ldr	r3, [pc, #400]	; (8001e88 <init_GSM_str+0x29c>)
 8001cf8:	4a66      	ldr	r2, [pc, #408]	; (8001e94 <init_GSM_str+0x2a8>)
 8001cfa:	619a      	str	r2, [r3, #24]
 8001cfc:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <init_GSM_str+0x29c>)
 8001cfe:	4a55      	ldr	r2, [pc, #340]	; (8001e54 <init_GSM_str+0x268>)
 8001d00:	61da      	str	r2, [r3, #28]
 8001d02:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <init_GSM_str+0x29c>)
 8001d04:	2296      	movs	r2, #150	; 0x96
 8001d06:	0052      	lsls	r2, r2, #1
 8001d08:	841a      	strh	r2, [r3, #32]
	init_gprs[3].query_str = "AT+CSTT = \"{0}\", \"\", \"\"";  	init_gprs[3].resp_str = "OK"; 		init_gprs[3].wait_tmr = 300;           			//3 = process sending for inserting APN settings
 8001d0a:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <init_GSM_str+0x29c>)
 8001d0c:	4a62      	ldr	r2, [pc, #392]	; (8001e98 <init_GSM_str+0x2ac>)
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
 8001d10:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <init_GSM_str+0x29c>)
 8001d12:	4a50      	ldr	r2, [pc, #320]	; (8001e54 <init_GSM_str+0x268>)
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
 8001d16:	4b5c      	ldr	r3, [pc, #368]	; (8001e88 <init_GSM_str+0x29c>)
 8001d18:	2296      	movs	r2, #150	; 0x96
 8001d1a:	0052      	lsls	r2, r2, #1
 8001d1c:	859a      	strh	r2, [r3, #44]	; 0x2c
	init_gprs[4].query_str = "AT+CIICR";  						init_gprs[4].resp_str = "OK"; 		init_gprs[4].wait_tmr = 3000;                   //4 = bring up GPRS
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <init_GSM_str+0x29c>)
 8001d20:	4a5e      	ldr	r2, [pc, #376]	; (8001e9c <init_GSM_str+0x2b0>)
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
 8001d24:	4b58      	ldr	r3, [pc, #352]	; (8001e88 <init_GSM_str+0x29c>)
 8001d26:	4a4b      	ldr	r2, [pc, #300]	; (8001e54 <init_GSM_str+0x268>)
 8001d28:	635a      	str	r2, [r3, #52]	; 0x34
 8001d2a:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <init_GSM_str+0x29c>)
 8001d2c:	4a5c      	ldr	r2, [pc, #368]	; (8001ea0 <init_GSM_str+0x2b4>)
 8001d2e:	871a      	strh	r2, [r3, #56]	; 0x38
	init_gprs[5].query_str = "AT+CIFSR";  						init_gprs[5].resp_str = "."; 		init_gprs[5].wait_tmr = 1500;                   //5 = grab assigned network IP
 8001d30:	4b55      	ldr	r3, [pc, #340]	; (8001e88 <init_GSM_str+0x29c>)
 8001d32:	4a5c      	ldr	r2, [pc, #368]	; (8001ea4 <init_GSM_str+0x2b8>)
 8001d34:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d36:	4b54      	ldr	r3, [pc, #336]	; (8001e88 <init_GSM_str+0x29c>)
 8001d38:	4a5b      	ldr	r2, [pc, #364]	; (8001ea8 <init_GSM_str+0x2bc>)
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d3c:	4b52      	ldr	r3, [pc, #328]	; (8001e88 <init_GSM_str+0x29c>)
 8001d3e:	2244      	movs	r2, #68	; 0x44
 8001d40:	495a      	ldr	r1, [pc, #360]	; (8001eac <init_GSM_str+0x2c0>)
 8001d42:	5299      	strh	r1, [r3, r2]

	//2 = creating the ntp server string
	ntp_server[0].query_str = "AT+CNTPCID=1";  					ntp_server[0].resp_str = "OK"; 					ntp_server[0].wait_tmr = 1000;      //0
 8001d44:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d46:	4a5b      	ldr	r2, [pc, #364]	; (8001eb4 <init_GSM_str+0x2c8>)
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d4c:	4a41      	ldr	r2, [pc, #260]	; (8001e54 <init_GSM_str+0x268>)
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d52:	22fa      	movs	r2, #250	; 0xfa
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	811a      	strh	r2, [r3, #8]
	ntp_server[1].query_str = "AT+CNTP?";  						ntp_server[1].resp_str = "202.120.2.101,4"; 	ntp_server[1].wait_tmr = 1000;      //1 = process response for possible jump of ntp server settings
 8001d58:	4b55      	ldr	r3, [pc, #340]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d5a:	4a57      	ldr	r2, [pc, #348]	; (8001eb8 <init_GSM_str+0x2cc>)
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	4b54      	ldr	r3, [pc, #336]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d60:	4a56      	ldr	r2, [pc, #344]	; (8001ebc <init_GSM_str+0x2d0>)
 8001d62:	611a      	str	r2, [r3, #16]
 8001d64:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d66:	22fa      	movs	r2, #250	; 0xfa
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	829a      	strh	r2, [r3, #20]
	ntp_server[2].query_str = "AT+CNTP=\"202.120.2.101\",4";  	ntp_server[2].resp_str = "OK"; 					ntp_server[2].wait_tmr = 1000;		//2
 8001d6c:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d6e:	4a54      	ldr	r2, [pc, #336]	; (8001ec0 <init_GSM_str+0x2d4>)
 8001d70:	619a      	str	r2, [r3, #24]
 8001d72:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d74:	4a37      	ldr	r2, [pc, #220]	; (8001e54 <init_GSM_str+0x268>)
 8001d76:	61da      	str	r2, [r3, #28]
 8001d78:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d7a:	22fa      	movs	r2, #250	; 0xfa
 8001d7c:	0092      	lsls	r2, r2, #2
 8001d7e:	841a      	strh	r2, [r3, #32]
	ntp_server[3].query_str = "AT+CNTPCID=1";  					ntp_server[3].resp_str = "OK"; 					ntp_server[3].wait_tmr = 1000;      //3
 8001d80:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d82:	4a4c      	ldr	r2, [pc, #304]	; (8001eb4 <init_GSM_str+0x2c8>)
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24
 8001d86:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d88:	4a32      	ldr	r2, [pc, #200]	; (8001e54 <init_GSM_str+0x268>)
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001d8c:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d8e:	22fa      	movs	r2, #250	; 0xfa
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	859a      	strh	r2, [r3, #44]	; 0x2c
	ntp_server[4].query_str = "AT+CNTP";  						ntp_server[4].resp_str = "+CNTP: 1"; 			ntp_server[4].wait_tmr = 10000;     //4
 8001d94:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d96:	4a4b      	ldr	r2, [pc, #300]	; (8001ec4 <init_GSM_str+0x2d8>)
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
 8001d9a:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001d9c:	4a4a      	ldr	r2, [pc, #296]	; (8001ec8 <init_GSM_str+0x2dc>)
 8001d9e:	635a      	str	r2, [r3, #52]	; 0x34
 8001da0:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001da2:	4a4a      	ldr	r2, [pc, #296]	; (8001ecc <init_GSM_str+0x2e0>)
 8001da4:	871a      	strh	r2, [r3, #56]	; 0x38
	ntp_server[5].query_str = "AT+CCLK?";  						ntp_server[5].resp_str = "+CCLK: "; 			ntp_server[5].wait_tmr = 1000;      //5 = process time stamp
 8001da6:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001da8:	4a49      	ldr	r2, [pc, #292]	; (8001ed0 <init_GSM_str+0x2e4>)
 8001daa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dac:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001dae:	4a49      	ldr	r2, [pc, #292]	; (8001ed4 <init_GSM_str+0x2e8>)
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
 8001db2:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <init_GSM_str+0x2c4>)
 8001db4:	2244      	movs	r2, #68	; 0x44
 8001db6:	21fa      	movs	r1, #250	; 0xfa
 8001db8:	0089      	lsls	r1, r1, #2
 8001dba:	5299      	strh	r1, [r3, r2]

	//3 = creating the init tcp string
	init_tcp[0].query_str = "AT+CIPSTART=\"TCP\",\"{0}\",\"{1}\"";  init_tcp[0].resp_str = "OK"; 			init_tcp[0].wait_tmr = 10000;    		//0 = process sending for inserting server details
 8001dbc:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <init_GSM_str+0x2ec>)
 8001dbe:	4a47      	ldr	r2, [pc, #284]	; (8001edc <init_GSM_str+0x2f0>)
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	4b45      	ldr	r3, [pc, #276]	; (8001ed8 <init_GSM_str+0x2ec>)
 8001dc4:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <init_GSM_str+0x268>)
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <init_GSM_str+0x2ec>)
 8001dca:	4a40      	ldr	r2, [pc, #256]	; (8001ecc <init_GSM_str+0x2e0>)
 8001dcc:	811a      	strh	r2, [r3, #8]
	init_tcp[1].query_str = "AT+CIPSTATUS";  						init_tcp[1].resp_str = "CONNECT OK"; 	init_tcp[1].wait_tmr = 500;             //1 = process connected status
 8001dce:	4b42      	ldr	r3, [pc, #264]	; (8001ed8 <init_GSM_str+0x2ec>)
 8001dd0:	4a43      	ldr	r2, [pc, #268]	; (8001ee0 <init_GSM_str+0x2f4>)
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <init_GSM_str+0x2ec>)
 8001dd6:	4a43      	ldr	r2, [pc, #268]	; (8001ee4 <init_GSM_str+0x2f8>)
 8001dd8:	611a      	str	r2, [r3, #16]
 8001dda:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <init_GSM_str+0x2ec>)
 8001ddc:	22fa      	movs	r2, #250	; 0xfa
 8001dde:	0052      	lsls	r2, r2, #1
 8001de0:	829a      	strh	r2, [r3, #20]

	//4 = creating the net stat string
	net_stat[0].query_str = "AT+CENG?";  net_stat[0].resp_str = "+CENG:"; 			net_stat[0].wait_tmr = 1000;                           			//0 = process response to grab LAC, CELLID, MCC and MNC
 8001de2:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <init_GSM_str+0x2fc>)
 8001de4:	4a41      	ldr	r2, [pc, #260]	; (8001eec <init_GSM_str+0x300>)
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <init_GSM_str+0x2fc>)
 8001dea:	4a41      	ldr	r2, [pc, #260]	; (8001ef0 <init_GSM_str+0x304>)
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <init_GSM_str+0x2fc>)
 8001df0:	22fa      	movs	r2, #250	; 0xfa
 8001df2:	0092      	lsls	r2, r2, #2
 8001df4:	811a      	strh	r2, [r3, #8]

	//5 = creating the send data string
	send_data[0].query_str = "AT+CIPSEND"; 		send_data[0].resp_str = ">"; 			send_data[0].wait_tmr = 1000;                            	//0
 8001df6:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <init_GSM_str+0x308>)
 8001df8:	4a3f      	ldr	r2, [pc, #252]	; (8001ef8 <init_GSM_str+0x30c>)
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <init_GSM_str+0x308>)
 8001dfe:	4a3f      	ldr	r2, [pc, #252]	; (8001efc <init_GSM_str+0x310>)
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <init_GSM_str+0x308>)
 8001e04:	22fa      	movs	r2, #250	; 0xfa
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	811a      	strh	r2, [r3, #8]
	send_data[1].query_str = "{0}";  			send_data[1].resp_str = ""; 			send_data[1].wait_tmr = 500;                            	//1 = process sending stage to insert message format
 8001e0a:	4b3a      	ldr	r3, [pc, #232]	; (8001ef4 <init_GSM_str+0x308>)
 8001e0c:	4a3c      	ldr	r2, [pc, #240]	; (8001f00 <init_GSM_str+0x314>)
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <init_GSM_str+0x308>)
 8001e12:	4a3c      	ldr	r2, [pc, #240]	; (8001f04 <init_GSM_str+0x318>)
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <init_GSM_str+0x308>)
 8001e18:	22fa      	movs	r2, #250	; 0xfa
 8001e1a:	0052      	lsls	r2, r2, #1
 8001e1c:	829a      	strh	r2, [r3, #20]
	send_data[2].query_str = "";  				send_data[2].resp_str = "SEND OK"; 		send_data[2].wait_tmr = 2000;                               //2 = process response for successful sent data
 8001e1e:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <init_GSM_str+0x308>)
 8001e20:	4a38      	ldr	r2, [pc, #224]	; (8001f04 <init_GSM_str+0x318>)
 8001e22:	619a      	str	r2, [r3, #24]
 8001e24:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <init_GSM_str+0x308>)
 8001e26:	4a38      	ldr	r2, [pc, #224]	; (8001f08 <init_GSM_str+0x31c>)
 8001e28:	61da      	str	r2, [r3, #28]
 8001e2a:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <init_GSM_str+0x308>)
 8001e2c:	22fa      	movs	r2, #250	; 0xfa
 8001e2e:	00d2      	lsls	r2, r2, #3
 8001e30:	841a      	strh	r2, [r3, #32]
	//send_data[3].query_str = "AT+SHUT";  		send_data[3].resp_str = "OK"; 			send_data[3].wait_tmr = 500;                            	//1 = process sending stage to insert message format

	//6 = creating the close net string
	close_net[0].query_str = "AT+SHUT"; 		close_net[0].resp_str = "OK"; 			close_net[0].wait_tmr = 500;                             	//0
 8001e32:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <init_GSM_str+0x320>)
 8001e34:	4a36      	ldr	r2, [pc, #216]	; (8001f10 <init_GSM_str+0x324>)
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <init_GSM_str+0x320>)
 8001e3a:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <init_GSM_str+0x268>)
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	4b33      	ldr	r3, [pc, #204]	; (8001f0c <init_GSM_str+0x320>)
 8001e40:	22fa      	movs	r2, #250	; 0xfa
 8001e42:	0052      	lsls	r2, r2, #1
 8001e44:	811a      	strh	r2, [r3, #8]

}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000488 	.word	0x20000488
 8001e50:	08007b00 	.word	0x08007b00
 8001e54:	08007b04 	.word	0x08007b04
 8001e58:	08007b08 	.word	0x08007b08
 8001e5c:	000061a8 	.word	0x000061a8
 8001e60:	08007b18 	.word	0x08007b18
 8001e64:	08007b20 	.word	0x08007b20
 8001e68:	08007b28 	.word	0x08007b28
 8001e6c:	08007b34 	.word	0x08007b34
 8001e70:	08007b3c 	.word	0x08007b3c
 8001e74:	08007b50 	.word	0x08007b50
 8001e78:	08007b5c 	.word	0x08007b5c
 8001e7c:	08007b68 	.word	0x08007b68
 8001e80:	08007b74 	.word	0x08007b74
 8001e84:	08007b80 	.word	0x08007b80
 8001e88:	20000630 	.word	0x20000630
 8001e8c:	08007b8c 	.word	0x08007b8c
 8001e90:	08007b94 	.word	0x08007b94
 8001e94:	08007ba0 	.word	0x08007ba0
 8001e98:	08007bac 	.word	0x08007bac
 8001e9c:	08007bc4 	.word	0x08007bc4
 8001ea0:	00000bb8 	.word	0x00000bb8
 8001ea4:	08007bd0 	.word	0x08007bd0
 8001ea8:	08007bdc 	.word	0x08007bdc
 8001eac:	000005dc 	.word	0x000005dc
 8001eb0:	200006b8 	.word	0x200006b8
 8001eb4:	08007be0 	.word	0x08007be0
 8001eb8:	08007bf0 	.word	0x08007bf0
 8001ebc:	08007bfc 	.word	0x08007bfc
 8001ec0:	08007c0c 	.word	0x08007c0c
 8001ec4:	08007c28 	.word	0x08007c28
 8001ec8:	08007c30 	.word	0x08007c30
 8001ecc:	00002710 	.word	0x00002710
 8001ed0:	08007c3c 	.word	0x08007c3c
 8001ed4:	08007c48 	.word	0x08007c48
 8001ed8:	20000618 	.word	0x20000618
 8001edc:	08007c50 	.word	0x08007c50
 8001ee0:	08007c70 	.word	0x08007c70
 8001ee4:	08007c80 	.word	0x08007c80
 8001ee8:	2000060c 	.word	0x2000060c
 8001eec:	08007c8c 	.word	0x08007c8c
 8001ef0:	08007c98 	.word	0x08007c98
 8001ef4:	20000694 	.word	0x20000694
 8001ef8:	08007ca0 	.word	0x08007ca0
 8001efc:	08007cac 	.word	0x08007cac
 8001f00:	08007cb0 	.word	0x08007cb0
 8001f04:	08007cb4 	.word	0x08007cb4
 8001f08:	08007cb8 	.word	0x08007cb8
 8001f0c:	20000700 	.word	0x20000700
 8001f10:	08007cc0 	.word	0x08007cc0

08001f14 <id_network_name>:

s8 id_network_name(const char* mccmnc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  s8 net_id = -1;
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	22ff      	movs	r2, #255	; 0xff
 8001f22:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < MAX_APN_DEFINED; i++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	e023      	b.n	8001f72 <id_network_name+0x5e>
  {
    if (strstr(mccmnc, NETWORK_ID[i][0]) != NULL || strstr(mccmnc, NETWORK_ID[i][1]) != NULL)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	011a      	lsls	r2, r3, #4
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <id_network_name+0x74>)
 8001f30:	18d2      	adds	r2, r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	0011      	movs	r1, r2
 8001f36:	0018      	movs	r0, r3
 8001f38:	f004 fb2b 	bl	8006592 <strstr>
 8001f3c:	1e03      	subs	r3, r0, #0
 8001f3e:	d10c      	bne.n	8001f5a <id_network_name+0x46>
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	3308      	adds	r3, #8
 8001f46:	001a      	movs	r2, r3
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <id_network_name+0x74>)
 8001f4a:	18d2      	adds	r2, r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0011      	movs	r1, r2
 8001f50:	0018      	movs	r0, r3
 8001f52:	f004 fb1e 	bl	8006592 <strstr>
 8001f56:	1e03      	subs	r3, r0, #0
 8001f58:	d004      	beq.n	8001f64 <id_network_name+0x50>
    {
      net_id = i;
 8001f5a:	230f      	movs	r3, #15
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	701a      	strb	r2, [r3, #0]
      break;
 8001f62:	e009      	b.n	8001f78 <id_network_name+0x64>
    }
    else
      net_id = -1;
 8001f64:	230f      	movs	r3, #15
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	22ff      	movs	r2, #255	; 0xff
 8001f6a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < MAX_APN_DEFINED; i++)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	ddd8      	ble.n	8001f2a <id_network_name+0x16>
  }

  return net_id;
 8001f78:	230f      	movs	r3, #15
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b25b      	sxtb	r3, r3
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b004      	add	sp, #16
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	08007cfc 	.word	0x08007cfc

08001f8c <network_failed_restart>:

void network_failed_restart(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  gsm_stage = 0;
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <network_failed_restart+0x28>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
  stage_step = 0;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <network_failed_restart+0x2c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
  tcp_alive = false;
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <network_failed_restart+0x30>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
  gsm_pwr_cnt = 0;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <network_failed_restart+0x34>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
  gsm_pwr_tmr = 1;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <network_failed_restart+0x38>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
  //gprs_Is_available = false;
}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000310 	.word	0x20000310
 8001fb8:	200002f8 	.word	0x200002f8
 8001fbc:	20000311 	.word	0x20000311
 8001fc0:	200000ee 	.word	0x200000ee
 8001fc4:	20000010 	.word	0x20000010

08001fc8 <GSM_PowerCycle>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void GSM_PowerCycle(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	019b      	lsls	r3, r3, #6
 8001fd0:	480e      	ldr	r0, [pc, #56]	; (800200c <GSM_PowerCycle+0x44>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	f001 f939 	bl	800324c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001fda:	2064      	movs	r0, #100	; 0x64
 8001fdc:	f000 fde2 	bl	8002ba4 <HAL_Delay>
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_SET);
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	019b      	lsls	r3, r3, #6
 8001fe4:	4809      	ldr	r0, [pc, #36]	; (800200c <GSM_PowerCycle+0x44>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	0019      	movs	r1, r3
 8001fea:	f001 f92f 	bl	800324c <HAL_GPIO_WritePin>
	HAL_Delay(2500);	//wait for 2.5s
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <GSM_PowerCycle+0x48>)
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f000 fdd7 	bl	8002ba4 <HAL_Delay>
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	019b      	lsls	r3, r3, #6
 8001ffa:	4804      	ldr	r0, [pc, #16]	; (800200c <GSM_PowerCycle+0x44>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	0019      	movs	r1, r3
 8002000:	f001 f924 	bl	800324c <HAL_GPIO_WritePin>
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	50000400 	.word	0x50000400
 8002010:	000009c4 	.word	0x000009c4

08002014 <repower_handler>:

void repower_handler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	if((gsm_pwr_tmr != 0 && gsm_pwr_cnt < 2) /*|| !GSM_Is_Powered*/)
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <repower_handler+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <repower_handler+0x38>
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <repower_handler+0x44>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d811      	bhi.n	800204c <repower_handler+0x38>
	{
		GSM_PowerCycle();
 8002028:	f7ff ffce 	bl	8001fc8 <GSM_PowerCycle>
		gsm_operation_delay = HAL_GetTick() + (u32)GSM_DELAY;
 800202c:	f000 fdb0 	bl	8002b90 <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <repower_handler+0x48>)
 8002034:	189a      	adds	r2, r3, r2
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <repower_handler+0x4c>)
 8002038:	601a      	str	r2, [r3, #0]

		gsm_pwr_cnt++;
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <repower_handler+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <repower_handler+0x44>)
 8002044:	701a      	strb	r2, [r3, #0]
		gsm_pwr_tmr = 0;
 8002046:	4b03      	ldr	r3, [pc, #12]	; (8002054 <repower_handler+0x40>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
		//GSM_Is_Powered = true;
	}
}
 800204c:	46c0      	nop			; (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	20000010 	.word	0x20000010
 8002058:	200000ee 	.word	0x200000ee
 800205c:	00001770 	.word	0x00001770
 8002060:	20000308 	.word	0x20000308

08002064 <toggle_alarm>:

void toggle_alarm()
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	if(alarm == 1)
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <toggle_alarm+0x34>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d108      	bne.n	8002082 <toggle_alarm+0x1e>
	{
		HAL_GPIO_WritePin(RLY_3_GPIO_Port, RLY_3_Pin, GPIO_PIN_SET);
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	0059      	lsls	r1, r3, #1
 8002074:	23a0      	movs	r3, #160	; 0xa0
 8002076:	05db      	lsls	r3, r3, #23
 8002078:	2201      	movs	r2, #1
 800207a:	0018      	movs	r0, r3
 800207c:	f001 f8e6 	bl	800324c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(RLY_3_GPIO_Port, RLY_3_Pin, GPIO_PIN_RESET);
	}
}
 8002080:	e007      	b.n	8002092 <toggle_alarm+0x2e>
		HAL_GPIO_WritePin(RLY_3_GPIO_Port, RLY_3_Pin, GPIO_PIN_RESET);
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	0059      	lsls	r1, r3, #1
 8002086:	23a0      	movs	r3, #160	; 0xa0
 8002088:	05db      	lsls	r3, r3, #23
 800208a:	2200      	movs	r2, #0
 800208c:	0018      	movs	r0, r3
 800208e:	f001 f8dd 	bl	800324c <HAL_GPIO_WritePin>
}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200000ed 	.word	0x200000ed

0800209c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020a0:	f000 fcfa 	bl	8002a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020a4:	f000 f81c 	bl	80020e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020a8:	f000 f9e0 	bl	800246c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80020ac:	f000 f95c 	bl	8002368 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80020b0:	f000 f9a8 	bl	8002404 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80020b4:	f000 f898 	bl	80021e8 <MX_RTC_Init>
  MX_TIM3_Init();
 80020b8:	f000 f902 	bl	80022c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <main+0x40>)
 80020be:	0018      	movs	r0, r3
 80020c0:	f002 fb36 	bl	8004730 <HAL_TIM_Base_Start_IT>
  //GSM_PowerCycle();
  setUp_GSM();
 80020c4:	f7ff fc5e 	bl	8001984 <setUp_GSM>
  u32 ttloop = HAL_GetTick();
  printf("In main()\r\n");
#endif
  while (1)
  {
	  GSM_Process();
 80020c8:	f7ff fd1a 	bl	8001b00 <GSM_Process>
	  synchronize_time();
 80020cc:	f7fe fbfe 	bl	80008cc <synchronize_time>
	  toggle_alarm();
 80020d0:	f7ff ffc8 	bl	8002064 <toggle_alarm>
	  repower_handler();
 80020d4:	f7ff ff9e 	bl	8002014 <repower_handler>
	  GSM_Process();
 80020d8:	e7f6      	b.n	80020c8 <main+0x2c>
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	20000718 	.word	0x20000718

080020e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b099      	sub	sp, #100	; 0x64
 80020e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e6:	242c      	movs	r4, #44	; 0x2c
 80020e8:	193b      	adds	r3, r7, r4
 80020ea:	0018      	movs	r0, r3
 80020ec:	2334      	movs	r3, #52	; 0x34
 80020ee:	001a      	movs	r2, r3
 80020f0:	2100      	movs	r1, #0
 80020f2:	f004 f97a 	bl	80063ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f6:	231c      	movs	r3, #28
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	0018      	movs	r0, r3
 80020fc:	2310      	movs	r3, #16
 80020fe:	001a      	movs	r2, r3
 8002100:	2100      	movs	r1, #0
 8002102:	f004 f972 	bl	80063ea <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	0018      	movs	r0, r3
 800210a:	2318      	movs	r3, #24
 800210c:	001a      	movs	r2, r3
 800210e:	2100      	movs	r1, #0
 8002110:	f004 f96b 	bl	80063ea <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	0018      	movs	r0, r3
 800211a:	f001 f911 	bl	8003340 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800211e:	f001 f901 	bl	8003324 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002122:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <SystemClock_Config+0x100>)
 8002124:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002126:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <SystemClock_Config+0x100>)
 8002128:	2118      	movs	r1, #24
 800212a:	438a      	bics	r2, r1
 800212c:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800212e:	193b      	adds	r3, r7, r4
 8002130:	2206      	movs	r2, #6
 8002132:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002134:	193b      	adds	r3, r7, r4
 8002136:	2201      	movs	r2, #1
 8002138:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800213a:	193b      	adds	r3, r7, r4
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	0052      	lsls	r2, r2, #1
 8002140:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002142:	0021      	movs	r1, r4
 8002144:	187b      	adds	r3, r7, r1
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800214a:	187b      	adds	r3, r7, r1
 800214c:	2240      	movs	r2, #64	; 0x40
 800214e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002150:	187b      	adds	r3, r7, r1
 8002152:	2202      	movs	r2, #2
 8002154:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002156:	187b      	adds	r3, r7, r1
 8002158:	2202      	movs	r2, #2
 800215a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800215c:	187b      	adds	r3, r7, r1
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002162:	187b      	adds	r3, r7, r1
 8002164:	2208      	movs	r2, #8
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002168:	187b      	adds	r3, r7, r1
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	0292      	lsls	r2, r2, #10
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002170:	187b      	adds	r3, r7, r1
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	0592      	lsls	r2, r2, #22
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002178:	187b      	adds	r3, r7, r1
 800217a:	0018      	movs	r0, r3
 800217c:	f001 f92c 	bl	80033d8 <HAL_RCC_OscConfig>
 8002180:	1e03      	subs	r3, r0, #0
 8002182:	d001      	beq.n	8002188 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002184:	f000 fa56 	bl	8002634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002188:	211c      	movs	r1, #28
 800218a:	187b      	adds	r3, r7, r1
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002190:	187b      	adds	r3, r7, r1
 8002192:	2202      	movs	r2, #2
 8002194:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002196:	187b      	adds	r3, r7, r1
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800219c:	187b      	adds	r3, r7, r1
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	2102      	movs	r1, #2
 80021a6:	0018      	movs	r0, r3
 80021a8:	f001 fc2c 	bl	8003a04 <HAL_RCC_ClockConfig>
 80021ac:	1e03      	subs	r3, r0, #0
 80021ae:	d001      	beq.n	80021b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80021b0:	f000 fa40 	bl	8002634 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1;
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <SystemClock_Config+0x104>)
 80021b8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	0052      	lsls	r2, r2, #1
 80021c6:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	0018      	movs	r0, r3
 80021cc:	f001 fdc4 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d001      	beq.n	80021d8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80021d4:	f000 fa2e 	bl	8002634 <Error_Handler>
  }
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b019      	add	sp, #100	; 0x64
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	00020001 	.word	0x00020001

080021e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	0018      	movs	r0, r3
 80021f2:	2314      	movs	r3, #20
 80021f4:	001a      	movs	r2, r3
 80021f6:	2100      	movs	r1, #0
 80021f8:	f004 f8f7 	bl	80063ea <memset>
  RTC_DateTypeDef sDate = {0};
 80021fc:	003b      	movs	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002202:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <MX_RTC_Init+0xd0>)
 8002204:	4a2d      	ldr	r2, [pc, #180]	; (80022bc <MX_RTC_Init+0xd4>)
 8002206:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <MX_RTC_Init+0xd0>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <MX_RTC_Init+0xd0>)
 8002210:	227f      	movs	r2, #127	; 0x7f
 8002212:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <MX_RTC_Init+0xd0>)
 8002216:	22ff      	movs	r2, #255	; 0xff
 8002218:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800221a:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <MX_RTC_Init+0xd0>)
 800221c:	2200      	movs	r2, #0
 800221e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <MX_RTC_Init+0xd0>)
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <MX_RTC_Init+0xd0>)
 8002228:	2200      	movs	r2, #0
 800222a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800222c:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <MX_RTC_Init+0xd0>)
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	05d2      	lsls	r2, r2, #23
 8002232:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <MX_RTC_Init+0xd0>)
 8002236:	2200      	movs	r2, #0
 8002238:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800223a:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <MX_RTC_Init+0xd0>)
 800223c:	0018      	movs	r0, r3
 800223e:	f001 feb1 	bl	8003fa4 <HAL_RTC_Init>
 8002242:	1e03      	subs	r3, r0, #0
 8002244:	d001      	beq.n	800224a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8002246:	f000 f9f5 	bl	8002634 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2223      	movs	r2, #35	; 0x23
 800224e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x59;
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	2259      	movs	r2, #89	; 0x59
 8002254:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x45;
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	2245      	movs	r2, #69	; 0x45
 800225a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2200      	movs	r2, #0
 8002260:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2200      	movs	r2, #0
 8002266:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800226e:	1d39      	adds	r1, r7, #4
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MX_RTC_Init+0xd0>)
 8002272:	2201      	movs	r2, #1
 8002274:	0018      	movs	r0, r3
 8002276:	f001 ff2b 	bl	80040d0 <HAL_RTC_SetTime>
 800227a:	1e03      	subs	r3, r0, #0
 800227c:	d001      	beq.n	8002282 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800227e:	f000 f9d9 	bl	8002634 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002282:	003b      	movs	r3, r7
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002288:	003b      	movs	r3, r7
 800228a:	2201      	movs	r2, #1
 800228c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x7;
 800228e:	003b      	movs	r3, r7
 8002290:	2207      	movs	r2, #7
 8002292:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002294:	003b      	movs	r3, r7
 8002296:	2200      	movs	r2, #0
 8002298:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800229a:	0039      	movs	r1, r7
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <MX_RTC_Init+0xd0>)
 800229e:	2201      	movs	r2, #1
 80022a0:	0018      	movs	r0, r3
 80022a2:	f002 f819 	bl	80042d8 <HAL_RTC_SetDate>
 80022a6:	1e03      	subs	r3, r0, #0
 80022a8:	d001      	beq.n	80022ae <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 80022aa:	f000 f9c3 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b006      	add	sp, #24
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	200003cc 	.word	0x200003cc
 80022bc:	40002800 	.word	0x40002800

080022c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c6:	2310      	movs	r3, #16
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	0018      	movs	r0, r3
 80022cc:	2310      	movs	r3, #16
 80022ce:	001a      	movs	r2, r3
 80022d0:	2100      	movs	r1, #0
 80022d2:	f004 f88a 	bl	80063ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	0018      	movs	r0, r3
 80022da:	230c      	movs	r3, #12
 80022dc:	001a      	movs	r2, r3
 80022de:	2100      	movs	r1, #0
 80022e0:	f004 f883 	bl	80063ea <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <MX_TIM3_Init+0xa0>)
 80022e6:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <MX_TIM3_Init+0xa4>)
 80022e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <MX_TIM3_Init+0xa0>)
 80022ec:	22fa      	movs	r2, #250	; 0xfa
 80022ee:	0212      	lsls	r2, r2, #8
 80022f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <MX_TIM3_Init+0xa0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250;
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <MX_TIM3_Init+0xa0>)
 80022fa:	22fa      	movs	r2, #250	; 0xfa
 80022fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <MX_TIM3_Init+0xa0>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <MX_TIM3_Init+0xa0>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <MX_TIM3_Init+0xa0>)
 800230c:	0018      	movs	r0, r3
 800230e:	f002 f9b6 	bl	800467e <HAL_TIM_Base_Init>
 8002312:	1e03      	subs	r3, r0, #0
 8002314:	d001      	beq.n	800231a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002316:	f000 f98d 	bl	8002634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800231a:	2110      	movs	r1, #16
 800231c:	187b      	adds	r3, r7, r1
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	0152      	lsls	r2, r2, #5
 8002322:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002324:	187a      	adds	r2, r7, r1
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <MX_TIM3_Init+0xa0>)
 8002328:	0011      	movs	r1, r2
 800232a:	0018      	movs	r0, r3
 800232c:	f002 fb80 	bl	8004a30 <HAL_TIM_ConfigClockSource>
 8002330:	1e03      	subs	r3, r0, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002334:	f000 f97e 	bl	8002634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002344:	1d3a      	adds	r2, r7, #4
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <MX_TIM3_Init+0xa0>)
 8002348:	0011      	movs	r1, r2
 800234a:	0018      	movs	r0, r3
 800234c:	f002 fd64 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 8002350:	1e03      	subs	r3, r0, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002354:	f000 f96e 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b008      	add	sp, #32
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000718 	.word	0x20000718
 8002364:	40000400 	.word	0x40000400

08002368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <MX_USART1_UART_Init+0x94>)
 800236e:	4a24      	ldr	r2, [pc, #144]	; (8002400 <MX_USART1_UART_Init+0x98>)
 8002370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002372:	4b22      	ldr	r3, [pc, #136]	; (80023fc <MX_USART1_UART_Init+0x94>)
 8002374:	22e1      	movs	r2, #225	; 0xe1
 8002376:	0252      	lsls	r2, r2, #9
 8002378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <MX_USART1_UART_Init+0x94>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002380:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <MX_USART1_UART_Init+0x94>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <MX_USART1_UART_Init+0x94>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <MX_USART1_UART_Init+0x94>)
 800238e:	220c      	movs	r2, #12
 8002390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002392:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <MX_USART1_UART_Init+0x94>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002398:	4b18      	ldr	r3, [pc, #96]	; (80023fc <MX_USART1_UART_Init+0x94>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800239e:	4b17      	ldr	r3, [pc, #92]	; (80023fc <MX_USART1_UART_Init+0x94>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <MX_USART1_UART_Init+0x94>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <MX_USART1_UART_Init+0x94>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <MX_USART1_UART_Init+0x94>)
 80023b2:	0018      	movs	r0, r3
 80023b4:	f002 fdaa 	bl	8004f0c <HAL_UART_Init>
 80023b8:	1e03      	subs	r3, r0, #0
 80023ba:	d001      	beq.n	80023c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80023bc:	f000 f93a 	bl	8002634 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_USART1_UART_Init+0x94>)
 80023c2:	2100      	movs	r1, #0
 80023c4:	0018      	movs	r0, r3
 80023c6:	f003 fef7 	bl	80061b8 <HAL_UARTEx_SetTxFifoThreshold>
 80023ca:	1e03      	subs	r3, r0, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023ce:	f000 f931 	bl	8002634 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <MX_USART1_UART_Init+0x94>)
 80023d4:	2100      	movs	r1, #0
 80023d6:	0018      	movs	r0, r3
 80023d8:	f003 ff2e 	bl	8006238 <HAL_UARTEx_SetRxFifoThreshold>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d001      	beq.n	80023e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80023e0:	f000 f928 	bl	8002634 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <MX_USART1_UART_Init+0x94>)
 80023e6:	0018      	movs	r0, r3
 80023e8:	f003 feac 	bl	8006144 <HAL_UARTEx_DisableFifoMode>
 80023ec:	1e03      	subs	r3, r0, #0
 80023ee:	d001      	beq.n	80023f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80023f0:	f000 f920 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	20000338 	.word	0x20000338
 8002400:	40013800 	.word	0x40013800

08002404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <MX_USART2_UART_Init+0x60>)
 800240a:	4a17      	ldr	r2, [pc, #92]	; (8002468 <MX_USART2_UART_Init+0x64>)
 800240c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <MX_USART2_UART_Init+0x60>)
 8002410:	22e1      	movs	r2, #225	; 0xe1
 8002412:	0252      	lsls	r2, r2, #9
 8002414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <MX_USART2_UART_Init+0x60>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <MX_USART2_UART_Init+0x60>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <MX_USART2_UART_Init+0x60>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <MX_USART2_UART_Init+0x60>)
 800242a:	220c      	movs	r2, #12
 800242c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <MX_USART2_UART_Init+0x60>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <MX_USART2_UART_Init+0x60>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <MX_USART2_UART_Init+0x60>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <MX_USART2_UART_Init+0x60>)
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <MX_USART2_UART_Init+0x60>)
 8002448:	2200      	movs	r2, #0
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <MX_USART2_UART_Init+0x60>)
 800244e:	0018      	movs	r0, r3
 8002450:	f002 fd5c 	bl	8004f0c <HAL_UART_Init>
 8002454:	1e03      	subs	r3, r0, #0
 8002456:	d001      	beq.n	800245c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002458:	f000 f8ec 	bl	8002634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800245c:	46c0      	nop			; (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	200003f8 	.word	0x200003f8
 8002468:	40004400 	.word	0x40004400

0800246c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002472:	240c      	movs	r4, #12
 8002474:	193b      	adds	r3, r7, r4
 8002476:	0018      	movs	r0, r3
 8002478:	2314      	movs	r3, #20
 800247a:	001a      	movs	r2, r3
 800247c:	2100      	movs	r1, #0
 800247e:	f003 ffb4 	bl	80063ea <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002482:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <MX_GPIO_Init+0x13c>)
 8002484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002486:	4b48      	ldr	r3, [pc, #288]	; (80025a8 <MX_GPIO_Init+0x13c>)
 8002488:	2104      	movs	r1, #4
 800248a:	430a      	orrs	r2, r1
 800248c:	635a      	str	r2, [r3, #52]	; 0x34
 800248e:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <MX_GPIO_Init+0x13c>)
 8002490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002492:	2204      	movs	r2, #4
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <MX_GPIO_Init+0x13c>)
 800249c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249e:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <MX_GPIO_Init+0x13c>)
 80024a0:	2101      	movs	r1, #1
 80024a2:	430a      	orrs	r2, r1
 80024a4:	635a      	str	r2, [r3, #52]	; 0x34
 80024a6:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <MX_GPIO_Init+0x13c>)
 80024a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024aa:	2201      	movs	r2, #1
 80024ac:	4013      	ands	r3, r2
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <MX_GPIO_Init+0x13c>)
 80024b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b6:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <MX_GPIO_Init+0x13c>)
 80024b8:	2102      	movs	r1, #2
 80024ba:	430a      	orrs	r2, r1
 80024bc:	635a      	str	r2, [r3, #52]	; 0x34
 80024be:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <MX_GPIO_Init+0x13c>)
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	2202      	movs	r2, #2
 80024c4:	4013      	ands	r3, r2
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GSM_PWR_Pin|RLY_2_Pin|RLY_1_Pin, GPIO_PIN_RESET);
 80024ca:	23e0      	movs	r3, #224	; 0xe0
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	4837      	ldr	r0, [pc, #220]	; (80025ac <MX_GPIO_Init+0x140>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	0019      	movs	r1, r3
 80024d4:	f000 feba 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RLY_3_GPIO_Port, RLY_3_Pin, GPIO_PIN_RESET);
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	0059      	lsls	r1, r3, #1
 80024dc:	23a0      	movs	r3, #160	; 0xa0
 80024de:	05db      	lsls	r3, r3, #23
 80024e0:	2200      	movs	r2, #0
 80024e2:	0018      	movs	r0, r3
 80024e4:	f000 feb2 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <MX_GPIO_Init+0x144>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	21c0      	movs	r1, #192	; 0xc0
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 feac 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EB_Pin */
  GPIO_InitStruct.Pin = EB_Pin;
 80024f4:	193b      	adds	r3, r7, r4
 80024f6:	2202      	movs	r2, #2
 80024f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	2284      	movs	r2, #132	; 0x84
 80024fe:	0392      	lsls	r2, r2, #14
 8002500:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002502:	193b      	adds	r3, r7, r4
 8002504:	2201      	movs	r2, #1
 8002506:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EB_GPIO_Port, &GPIO_InitStruct);
 8002508:	193b      	adds	r3, r7, r4
 800250a:	4a28      	ldr	r2, [pc, #160]	; (80025ac <MX_GPIO_Init+0x140>)
 800250c:	0019      	movs	r1, r3
 800250e:	0010      	movs	r0, r2
 8002510:	f000 fd38 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : GSM_PWR_Pin RLY_2_Pin RLY_1_Pin */
  GPIO_InitStruct.Pin = GSM_PWR_Pin|RLY_2_Pin|RLY_1_Pin;
 8002514:	0021      	movs	r1, r4
 8002516:	193b      	adds	r3, r7, r4
 8002518:	22e0      	movs	r2, #224	; 0xe0
 800251a:	0212      	lsls	r2, r2, #8
 800251c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251e:	000c      	movs	r4, r1
 8002520:	193b      	adds	r3, r7, r4
 8002522:	2201      	movs	r2, #1
 8002524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	193b      	adds	r3, r7, r4
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252c:	193b      	adds	r3, r7, r4
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002532:	193b      	adds	r3, r7, r4
 8002534:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <MX_GPIO_Init+0x140>)
 8002536:	0019      	movs	r1, r3
 8002538:	0010      	movs	r0, r2
 800253a:	f000 fd23 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : RLY_3_Pin */
  GPIO_InitStruct.Pin = RLY_3_Pin;
 800253e:	0021      	movs	r1, r4
 8002540:	187b      	adds	r3, r7, r1
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	0052      	lsls	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002548:	000c      	movs	r4, r1
 800254a:	193b      	adds	r3, r7, r4
 800254c:	2201      	movs	r2, #1
 800254e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	193b      	adds	r3, r7, r4
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002556:	193b      	adds	r3, r7, r4
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RLY_3_GPIO_Port, &GPIO_InitStruct);
 800255c:	193a      	adds	r2, r7, r4
 800255e:	23a0      	movs	r3, #160	; 0xa0
 8002560:	05db      	lsls	r3, r3, #23
 8002562:	0011      	movs	r1, r2
 8002564:	0018      	movs	r0, r3
 8002566:	f000 fd0d 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800256a:	0021      	movs	r1, r4
 800256c:	187b      	adds	r3, r7, r1
 800256e:	22c0      	movs	r2, #192	; 0xc0
 8002570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2201      	movs	r2, #1
 8002576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	187b      	adds	r3, r7, r1
 8002580:	2200      	movs	r2, #0
 8002582:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002584:	187b      	adds	r3, r7, r1
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <MX_GPIO_Init+0x144>)
 8002588:	0019      	movs	r1, r3
 800258a:	0010      	movs	r0, r2
 800258c:	f000 fcfa 	bl	8002f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002590:	2200      	movs	r2, #0
 8002592:	2100      	movs	r1, #0
 8002594:	2005      	movs	r0, #5
 8002596:	f000 fbe7 	bl	8002d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800259a:	2005      	movs	r0, #5
 800259c:	f000 fbf9 	bl	8002d92 <HAL_NVIC_EnableIRQ>

}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b009      	add	sp, #36	; 0x24
 80025a6:	bd90      	pop	{r4, r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	50000400 	.word	0x50000400
 80025b0:	50000800 	.word	0x50000800

080025b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	if(!tcp_alive)
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2201      	movs	r2, #1
 80025c2:	4053      	eors	r3, r2
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 fe3b 	bl	800324c <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80025d8:	2140      	movs	r1, #64	; 0x40
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 fe53 	bl	8003286 <HAL_GPIO_TogglePin>
	else
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	}
}
 80025e0:	e00a      	b.n	80025f8 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	2140      	movs	r1, #64	; 0x40
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 fe2f 	bl	800324c <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	0018      	movs	r0, r3
 80025f4:	f000 fe47 	bl	8003286 <HAL_GPIO_TogglePin>
}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b002      	add	sp, #8
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000311 	.word	0x20000311
 8002604:	50000800 	.word	0x50000800

08002608 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	0002      	movs	r2, r0
 8002610:	1dbb      	adds	r3, r7, #6
 8002612:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == EB_Pin)
 8002614:	1dbb      	adds	r3, r7, #6
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d103      	bne.n	8002624 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
	{
		alarm = 0;
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		__NOP();
	}
}
 8002622:	e000      	b.n	8002626 <HAL_GPIO_EXTI_Falling_Callback+0x1e>
		__NOP();
 8002624:	46c0      	nop			; (mov r8, r8)
}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	b002      	add	sp, #8
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	200000ed 	.word	0x200000ed

08002634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002638:	b672      	cpsid	i
}
 800263a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800263c:	e7fe      	b.n	800263c <Error_Handler+0x8>
	...

08002640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <HAL_MspInit+0x44>)
 8002648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_MspInit+0x44>)
 800264c:	2101      	movs	r1, #1
 800264e:	430a      	orrs	r2, r1
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <HAL_MspInit+0x44>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_MspInit+0x44>)
 8002660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_MspInit+0x44>)
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	0549      	lsls	r1, r1, #21
 8002668:	430a      	orrs	r2, r1
 800266a:	63da      	str	r2, [r3, #60]	; 0x3c
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_MspInit+0x44>)
 800266e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	055b      	lsls	r3, r3, #21
 8002674:	4013      	ands	r3, r2
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0d      	ldr	r2, [pc, #52]	; (80026cc <HAL_RTC_MspInit+0x44>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d114      	bne.n	80026c4 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <HAL_RTC_MspInit+0x48>)
 800269c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <HAL_RTC_MspInit+0x48>)
 80026a0:	2180      	movs	r1, #128	; 0x80
 80026a2:	0209      	lsls	r1, r1, #8
 80026a4:	430a      	orrs	r2, r1
 80026a6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RTC_MspInit+0x48>)
 80026aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_RTC_MspInit+0x48>)
 80026ae:	2180      	movs	r1, #128	; 0x80
 80026b0:	00c9      	lsls	r1, r1, #3
 80026b2:	430a      	orrs	r2, r1
 80026b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_RTC_MspInit+0x48>)
 80026b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4013      	ands	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b004      	add	sp, #16
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40002800 	.word	0x40002800
 80026d0:	40021000 	.word	0x40021000

080026d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0d      	ldr	r2, [pc, #52]	; (8002718 <HAL_TIM_Base_MspInit+0x44>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d113      	bne.n	800270e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_TIM_Base_MspInit+0x48>)
 80026e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_TIM_Base_MspInit+0x48>)
 80026ec:	2102      	movs	r1, #2
 80026ee:	430a      	orrs	r2, r1
 80026f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_TIM_Base_MspInit+0x48>)
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	2202      	movs	r2, #2
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	2010      	movs	r0, #16
 8002704:	f000 fb30 	bl	8002d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002708:	2010      	movs	r0, #16
 800270a:	f000 fb42 	bl	8002d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b004      	add	sp, #16
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	40000400 	.word	0x40000400
 800271c:	40021000 	.word	0x40021000

08002720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b08d      	sub	sp, #52	; 0x34
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	241c      	movs	r4, #28
 800272a:	193b      	adds	r3, r7, r4
 800272c:	0018      	movs	r0, r3
 800272e:	2314      	movs	r3, #20
 8002730:	001a      	movs	r2, r3
 8002732:	2100      	movs	r1, #0
 8002734:	f003 fe59 	bl	80063ea <memset>
  if(huart->Instance==USART1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a3f      	ldr	r2, [pc, #252]	; (800283c <HAL_UART_MspInit+0x11c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d13a      	bne.n	80027b8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002742:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <HAL_UART_MspInit+0x120>)
 8002744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002746:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <HAL_UART_MspInit+0x120>)
 8002748:	2180      	movs	r1, #128	; 0x80
 800274a:	01c9      	lsls	r1, r1, #7
 800274c:	430a      	orrs	r2, r1
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
 8002750:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_UART_MspInit+0x120>)
 8002752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	01db      	lsls	r3, r3, #7
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	4b38      	ldr	r3, [pc, #224]	; (8002840 <HAL_UART_MspInit+0x120>)
 8002760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002762:	4b37      	ldr	r3, [pc, #220]	; (8002840 <HAL_UART_MspInit+0x120>)
 8002764:	2101      	movs	r1, #1
 8002766:	430a      	orrs	r2, r1
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
 800276a:	4b35      	ldr	r3, [pc, #212]	; (8002840 <HAL_UART_MspInit+0x120>)
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	2201      	movs	r2, #1
 8002770:	4013      	ands	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002776:	193b      	adds	r3, r7, r4
 8002778:	22c0      	movs	r2, #192	; 0xc0
 800277a:	00d2      	lsls	r2, r2, #3
 800277c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	0021      	movs	r1, r4
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2202      	movs	r2, #2
 8002784:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002792:	187b      	adds	r3, r7, r1
 8002794:	2201      	movs	r2, #1
 8002796:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002798:	187a      	adds	r2, r7, r1
 800279a:	23a0      	movs	r3, #160	; 0xa0
 800279c:	05db      	lsls	r3, r3, #23
 800279e:	0011      	movs	r1, r2
 80027a0:	0018      	movs	r0, r3
 80027a2:	f000 fbef 	bl	8002f84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	201b      	movs	r0, #27
 80027ac:	f000 fadc 	bl	8002d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027b0:	201b      	movs	r0, #27
 80027b2:	f000 faee 	bl	8002d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027b6:	e03d      	b.n	8002834 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a21      	ldr	r2, [pc, #132]	; (8002844 <HAL_UART_MspInit+0x124>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d138      	bne.n	8002834 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027c2:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <HAL_UART_MspInit+0x120>)
 80027c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027c6:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <HAL_UART_MspInit+0x120>)
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	0289      	lsls	r1, r1, #10
 80027cc:	430a      	orrs	r2, r1
 80027ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_UART_MspInit+0x120>)
 80027d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_UART_MspInit+0x120>)
 80027e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <HAL_UART_MspInit+0x120>)
 80027e4:	2101      	movs	r1, #1
 80027e6:	430a      	orrs	r2, r1
 80027e8:	635a      	str	r2, [r3, #52]	; 0x34
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_UART_MspInit+0x120>)
 80027ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ee:	2201      	movs	r2, #1
 80027f0:	4013      	ands	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027f6:	211c      	movs	r1, #28
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	220c      	movs	r2, #12
 80027fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	2202      	movs	r2, #2
 8002802:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	187b      	adds	r3, r7, r1
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	187b      	adds	r3, r7, r1
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002810:	187b      	adds	r3, r7, r1
 8002812:	2201      	movs	r2, #1
 8002814:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002816:	187a      	adds	r2, r7, r1
 8002818:	23a0      	movs	r3, #160	; 0xa0
 800281a:	05db      	lsls	r3, r3, #23
 800281c:	0011      	movs	r1, r2
 800281e:	0018      	movs	r0, r3
 8002820:	f000 fbb0 	bl	8002f84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	2100      	movs	r1, #0
 8002828:	201c      	movs	r0, #28
 800282a:	f000 fa9d 	bl	8002d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800282e:	201c      	movs	r0, #28
 8002830:	f000 faaf 	bl	8002d92 <HAL_NVIC_EnableIRQ>
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b00d      	add	sp, #52	; 0x34
 800283a:	bd90      	pop	{r4, r7, pc}
 800283c:	40013800 	.word	0x40013800
 8002840:	40021000 	.word	0x40021000
 8002844:	40004400 	.word	0x40004400

08002848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800284c:	e7fe      	b.n	800284c <NMI_Handler+0x4>

0800284e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002852:	e7fe      	b.n	8002852 <HardFault_Handler+0x4>

08002854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800286c:	f000 f97e 	bl	8002b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002870:	f000 fab0 	bl	8002dd4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800287e:	2002      	movs	r0, #2
 8002880:	f000 fd1c 	bl	80032bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <TIM3_IRQHandler+0x14>)
 8002892:	0018      	movs	r0, r3
 8002894:	f001 ff9a 	bl	80047cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	20000718 	.word	0x20000718

080028a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <USART1_IRQHandler+0x14>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f002 fd22 	bl	80052f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028b0:	46c0      	nop			; (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	20000338 	.word	0x20000338

080028bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <USART2_IRQHandler+0x14>)
 80028c2:	0018      	movs	r0, r3
 80028c4:	f002 fd16 	bl	80052f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	200003f8 	.word	0x200003f8

080028d4 <__io_putchar>:

#include "sys_core.h"


int __io_putchar(int ch)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <__io_putchar+0x20>)
 80028de:	1d39      	adds	r1, r7, #4
 80028e0:	4805      	ldr	r0, [pc, #20]	; (80028f8 <__io_putchar+0x24>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	f002 fb68 	bl	8004fb8 <HAL_UART_Transmit>
	return ch;
 80028e8:	687b      	ldr	r3, [r7, #4]
}
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	0000ffff 	.word	0x0000ffff
 80028f8:	20000338 	.word	0x20000338

080028fc <_write>:

int _write(int file, char *ptr, int len)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
	int i = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]

	for(i = 0; i < len; i++)
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	e009      	b.n	8002926 <_write+0x2a>
	{
		__io_putchar(*ptr++);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	60ba      	str	r2, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	0018      	movs	r0, r3
 800291c:	f7ff ffda 	bl	80028d4 <__io_putchar>
	for(i = 0; i < len; i++)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	3301      	adds	r3, #1
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	dbf1      	blt.n	8002912 <_write+0x16>
	}

	return len;
 800292e:	687b      	ldr	r3, [r7, #4]
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b006      	add	sp, #24
 8002936:	bd80      	pop	{r7, pc}

08002938 <_read>:
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	e00a      	b.n	8002960 <_read+0x28>
 800294a:	e000      	b.n	800294e <_read+0x16>
 800294c:	bf00      	nop
 800294e:	0001      	movs	r1, r0
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	60ba      	str	r2, [r7, #8]
 8002956:	b2ca      	uxtb	r2, r1
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3301      	adds	r3, #1
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	dbf0      	blt.n	800294a <_read+0x12>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	0018      	movs	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	b006      	add	sp, #24
 8002970:	bd80      	pop	{r7, pc}

08002972 <_close>:
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	2301      	movs	r3, #1
 800297c:	425b      	negs	r3, r3
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b002      	add	sp, #8
 8002984:	bd80      	pop	{r7, pc}

08002986 <_fstat>:
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	0192      	lsls	r2, r2, #6
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	2300      	movs	r3, #0
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_isatty>:
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	2301      	movs	r3, #1
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b002      	add	sp, #8
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <_lseek>:
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	2300      	movs	r3, #0
 80029c2:	0018      	movs	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b004      	add	sp, #16
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <_sbrk>:
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <_sbrk+0x5c>)
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <_sbrk+0x60>)
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <_sbrk+0x64>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d102      	bne.n	80029ee <_sbrk+0x22>
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <_sbrk+0x64>)
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <_sbrk+0x68>)
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <_sbrk+0x64>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	18d3      	adds	r3, r2, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d207      	bcs.n	8002a0c <_sbrk+0x40>
 80029fc:	f003 fcc2 	bl	8006384 <__errno>
 8002a00:	0003      	movs	r3, r0
 8002a02:	220c      	movs	r2, #12
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	2301      	movs	r3, #1
 8002a08:	425b      	negs	r3, r3
 8002a0a:	e009      	b.n	8002a20 <_sbrk+0x54>
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <_sbrk+0x64>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <_sbrk+0x64>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	18d2      	adds	r2, r2, r3
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <_sbrk+0x64>)
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b006      	add	sp, #24
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20002000 	.word	0x20002000
 8002a2c:	00000400 	.word	0x00000400
 8002a30:	20000318 	.word	0x20000318
 8002a34:	20000778 	.word	0x20000778

08002a38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <Reset_Handler>:
 8002a44:	480d      	ldr	r0, [pc, #52]	; (8002a7c <LoopForever+0x2>)
 8002a46:	4685      	mov	sp, r0
 8002a48:	f7ff fff6 	bl	8002a38 <SystemInit>
 8002a4c:	480c      	ldr	r0, [pc, #48]	; (8002a80 <LoopForever+0x6>)
 8002a4e:	490d      	ldr	r1, [pc, #52]	; (8002a84 <LoopForever+0xa>)
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <LoopForever+0xe>)
 8002a52:	2300      	movs	r3, #0
 8002a54:	e002      	b.n	8002a5c <LoopCopyDataInit>

08002a56 <CopyDataInit>:
 8002a56:	58d4      	ldr	r4, [r2, r3]
 8002a58:	50c4      	str	r4, [r0, r3]
 8002a5a:	3304      	adds	r3, #4

08002a5c <LoopCopyDataInit>:
 8002a5c:	18c4      	adds	r4, r0, r3
 8002a5e:	428c      	cmp	r4, r1
 8002a60:	d3f9      	bcc.n	8002a56 <CopyDataInit>
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <LoopForever+0x12>)
 8002a64:	4c0a      	ldr	r4, [pc, #40]	; (8002a90 <LoopForever+0x16>)
 8002a66:	2300      	movs	r3, #0
 8002a68:	e001      	b.n	8002a6e <LoopFillZerobss>

08002a6a <FillZerobss>:
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	3204      	adds	r2, #4

08002a6e <LoopFillZerobss>:
 8002a6e:	42a2      	cmp	r2, r4
 8002a70:	d3fb      	bcc.n	8002a6a <FillZerobss>
 8002a72:	f003 fc8d 	bl	8006390 <__libc_init_array>
 8002a76:	f7ff fb11 	bl	800209c <main>

08002a7a <LoopForever>:
 8002a7a:	e7fe      	b.n	8002a7a <LoopForever>
 8002a7c:	20002000 	.word	0x20002000
 8002a80:	20000000 	.word	0x20000000
 8002a84:	200000c8 	.word	0x200000c8
 8002a88:	08007f88 	.word	0x08007f88
 8002a8c:	200000c8 	.word	0x200000c8
 8002a90:	20000778 	.word	0x20000778

08002a94 <ADC1_IRQHandler>:
 8002a94:	e7fe      	b.n	8002a94 <ADC1_IRQHandler>
	...

08002a98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a9e:	1dfb      	adds	r3, r7, #7
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_Init+0x3c>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <HAL_Init+0x3c>)
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	0049      	lsls	r1, r1, #1
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ab2:	2003      	movs	r0, #3
 8002ab4:	f000 f810 	bl	8002ad8 <HAL_InitTick>
 8002ab8:	1e03      	subs	r3, r0, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002abc:	1dfb      	adds	r3, r7, #7
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e001      	b.n	8002ac8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002ac4:	f7ff fdbc 	bl	8002640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ac8:	1dfb      	adds	r3, r7, #7
 8002aca:	781b      	ldrb	r3, [r3, #0]
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40022000 	.word	0x40022000

08002ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad8:	b590      	push	{r4, r7, lr}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_InitTick+0x88>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d02b      	beq.n	8002b48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002af0:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <HAL_InitTick+0x8c>)
 8002af2:	681c      	ldr	r4, [r3, #0]
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <HAL_InitTick+0x88>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	0019      	movs	r1, r3
 8002afa:	23fa      	movs	r3, #250	; 0xfa
 8002afc:	0098      	lsls	r0, r3, #2
 8002afe:	f7fd fb1b 	bl	8000138 <__udivsi3>
 8002b02:	0003      	movs	r3, r0
 8002b04:	0019      	movs	r1, r3
 8002b06:	0020      	movs	r0, r4
 8002b08:	f7fd fb16 	bl	8000138 <__udivsi3>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f000 f953 	bl	8002dba <HAL_SYSTICK_Config>
 8002b14:	1e03      	subs	r3, r0, #0
 8002b16:	d112      	bne.n	8002b3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d80a      	bhi.n	8002b34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	2301      	movs	r3, #1
 8002b22:	425b      	negs	r3, r3
 8002b24:	2200      	movs	r2, #0
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 f91e 	bl	8002d68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_InitTick+0x90>)
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e00d      	b.n	8002b50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b34:	230f      	movs	r3, #15
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e008      	b.n	8002b50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b3e:	230f      	movs	r3, #15
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e003      	b.n	8002b50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b48:	230f      	movs	r3, #15
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b50:	230f      	movs	r3, #15
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	781b      	ldrb	r3, [r3, #0]
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b005      	add	sp, #20
 8002b5c:	bd90      	pop	{r4, r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	20000060 	.word	0x20000060
 8002b64:	20000058 	.word	0x20000058
 8002b68:	2000005c 	.word	0x2000005c

08002b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_IncTick+0x1c>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	001a      	movs	r2, r3
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_IncTick+0x20>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	18d2      	adds	r2, r2, r3
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <HAL_IncTick+0x20>)
 8002b7e:	601a      	str	r2, [r3, #0]
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	20000060 	.word	0x20000060
 8002b8c:	20000764 	.word	0x20000764

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b02      	ldr	r3, [pc, #8]	; (8002ba0 <HAL_GetTick+0x10>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	0018      	movs	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	20000764 	.word	0x20000764

08002ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7ff fff0 	bl	8002b90 <HAL_GetTick>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	d005      	beq.n	8002bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_Delay+0x44>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	189b      	adds	r3, r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	f7ff ffe0 	bl	8002b90 <HAL_GetTick>
 8002bd0:	0002      	movs	r2, r0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d8f7      	bhi.n	8002bcc <HAL_Delay+0x28>
  {
  }
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b004      	add	sp, #16
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	20000060 	.word	0x20000060

08002bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	1dfb      	adds	r3, r7, #7
 8002bf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8002bfe:	d809      	bhi.n	8002c14 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c00:	1dfb      	adds	r3, r7, #7
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	001a      	movs	r2, r3
 8002c06:	231f      	movs	r3, #31
 8002c08:	401a      	ands	r2, r3
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <__NVIC_EnableIRQ+0x30>)
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4091      	lsls	r1, r2
 8002c10:	000a      	movs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	0002      	movs	r2, r0
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	1dfb      	adds	r3, r7, #7
 8002c2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b7f      	cmp	r3, #127	; 0x7f
 8002c34:	d828      	bhi.n	8002c88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c36:	4a2f      	ldr	r2, [pc, #188]	; (8002cf4 <__NVIC_SetPriority+0xd4>)
 8002c38:	1dfb      	adds	r3, r7, #7
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	b25b      	sxtb	r3, r3
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	33c0      	adds	r3, #192	; 0xc0
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	589b      	ldr	r3, [r3, r2]
 8002c46:	1dfa      	adds	r2, r7, #7
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	400a      	ands	r2, r1
 8002c50:	00d2      	lsls	r2, r2, #3
 8002c52:	21ff      	movs	r1, #255	; 0xff
 8002c54:	4091      	lsls	r1, r2
 8002c56:	000a      	movs	r2, r1
 8002c58:	43d2      	mvns	r2, r2
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	22ff      	movs	r2, #255	; 0xff
 8002c64:	401a      	ands	r2, r3
 8002c66:	1dfb      	adds	r3, r7, #7
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	4003      	ands	r3, r0
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c74:	481f      	ldr	r0, [pc, #124]	; (8002cf4 <__NVIC_SetPriority+0xd4>)
 8002c76:	1dfb      	adds	r3, r7, #7
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	33c0      	adds	r3, #192	; 0xc0
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c86:	e031      	b.n	8002cec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <__NVIC_SetPriority+0xd8>)
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	0019      	movs	r1, r3
 8002c90:	230f      	movs	r3, #15
 8002c92:	400b      	ands	r3, r1
 8002c94:	3b08      	subs	r3, #8
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3306      	adds	r3, #6
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	18d3      	adds	r3, r2, r3
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	1dfa      	adds	r2, r7, #7
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	0011      	movs	r1, r2
 8002ca8:	2203      	movs	r2, #3
 8002caa:	400a      	ands	r2, r1
 8002cac:	00d2      	lsls	r2, r2, #3
 8002cae:	21ff      	movs	r1, #255	; 0xff
 8002cb0:	4091      	lsls	r1, r2
 8002cb2:	000a      	movs	r2, r1
 8002cb4:	43d2      	mvns	r2, r2
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	22ff      	movs	r2, #255	; 0xff
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	1dfb      	adds	r3, r7, #7
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	2303      	movs	r3, #3
 8002cca:	4003      	ands	r3, r0
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd0:	4809      	ldr	r0, [pc, #36]	; (8002cf8 <__NVIC_SetPriority+0xd8>)
 8002cd2:	1dfb      	adds	r3, r7, #7
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	001c      	movs	r4, r3
 8002cd8:	230f      	movs	r3, #15
 8002cda:	4023      	ands	r3, r4
 8002cdc:	3b08      	subs	r3, #8
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	3306      	adds	r3, #6
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	18c3      	adds	r3, r0, r3
 8002ce8:	3304      	adds	r3, #4
 8002cea:	601a      	str	r2, [r3, #0]
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b003      	add	sp, #12
 8002cf2:	bd90      	pop	{r4, r7, pc}
 8002cf4:	e000e100 	.word	0xe000e100
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d00:	f3bf 8f4f 	dsb	sy
}
 8002d04:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <__NVIC_SystemReset+0x1c>)
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <__NVIC_SystemReset+0x20>)
 8002d0a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d0c:	f3bf 8f4f 	dsb	sy
}
 8002d10:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	e7fd      	b.n	8002d12 <__NVIC_SystemReset+0x16>
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	e000ed00 	.word	0xe000ed00
 8002d1c:	05fa0004 	.word	0x05fa0004

08002d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	1e5a      	subs	r2, r3, #1
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	045b      	lsls	r3, r3, #17
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d301      	bcc.n	8002d38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d34:	2301      	movs	r3, #1
 8002d36:	e010      	b.n	8002d5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <SysTick_Config+0x44>)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d40:	2301      	movs	r3, #1
 8002d42:	425b      	negs	r3, r3
 8002d44:	2103      	movs	r1, #3
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff ff6a 	bl	8002c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <SysTick_Config+0x44>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d52:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <SysTick_Config+0x44>)
 8002d54:	2207      	movs	r2, #7
 8002d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b002      	add	sp, #8
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	e000e010 	.word	0xe000e010

08002d68 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	210f      	movs	r1, #15
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	1c02      	adds	r2, r0, #0
 8002d78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	b25b      	sxtb	r3, r3
 8002d82:	0011      	movs	r1, r2
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7ff ff4b 	bl	8002c20 <__NVIC_SetPriority>
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b004      	add	sp, #16
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	0002      	movs	r2, r0
 8002d9a:	1dfb      	adds	r3, r7, #7
 8002d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d9e:	1dfb      	adds	r3, r7, #7
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b25b      	sxtb	r3, r3
 8002da4:	0018      	movs	r0, r3
 8002da6:	f7ff ff21 	bl	8002bec <__NVIC_EnableIRQ>
}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b002      	add	sp, #8
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002db6:	f7ff ffa1 	bl	8002cfc <__NVIC_SystemReset>

08002dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7ff ffab 	bl	8002d20 <SysTick_Config>
 8002dca:	0003      	movs	r3, r0
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002dd8:	f000 f803 	bl	8002de2 <HAL_SYSTICK_Callback>
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e050      	b.n	8002ea0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2225      	movs	r2, #37	; 0x25
 8002e02:	5c9b      	ldrb	r3, [r3, r2]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d008      	beq.n	8002e1c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2224      	movs	r2, #36	; 0x24
 8002e14:	2100      	movs	r1, #0
 8002e16:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e041      	b.n	8002ea0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	210e      	movs	r1, #14
 8002e28:	438a      	bics	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	491c      	ldr	r1, [pc, #112]	; (8002ea8 <HAL_DMA_Abort+0xbc>)
 8002e38:	400a      	ands	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2101      	movs	r1, #1
 8002e48:	438a      	bics	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002e4c:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_DMA_Abort+0xc0>)
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	221c      	movs	r2, #28
 8002e56:	4013      	ands	r3, r2
 8002e58:	2201      	movs	r2, #1
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_DMA_Abort+0xc0>)
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e6a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00c      	beq.n	8002e8e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	490a      	ldr	r1, [pc, #40]	; (8002ea8 <HAL_DMA_Abort+0xbc>)
 8002e80:	400a      	ands	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002e8c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2225      	movs	r2, #37	; 0x25
 8002e92:	2101      	movs	r1, #1
 8002e94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2224      	movs	r2, #36	; 0x24
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	fffffeff 	.word	0xfffffeff
 8002eac:	40020000 	.word	0x40020000

08002eb0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb8:	210f      	movs	r1, #15
 8002eba:	187b      	adds	r3, r7, r1
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2225      	movs	r2, #37	; 0x25
 8002ec4:	5c9b      	ldrb	r3, [r3, r2]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d006      	beq.n	8002eda <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ed2:	187b      	adds	r3, r7, r1
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e049      	b.n	8002f6e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	210e      	movs	r1, #14
 8002ee6:	438a      	bics	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	438a      	bics	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	491d      	ldr	r1, [pc, #116]	; (8002f7c <HAL_DMA_Abort_IT+0xcc>)
 8002f06:	400a      	ands	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_DMA_Abort_IT+0xd0>)
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	221c      	movs	r2, #28
 8002f14:	4013      	ands	r3, r2
 8002f16:	2201      	movs	r2, #1
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_DMA_Abort_IT+0xd0>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f28:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00c      	beq.n	8002f4c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3c:	490f      	ldr	r1, [pc, #60]	; (8002f7c <HAL_DMA_Abort_IT+0xcc>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f4a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2225      	movs	r2, #37	; 0x25
 8002f50:	2101      	movs	r1, #1
 8002f52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2224      	movs	r2, #36	; 0x24
 8002f58:	2100      	movs	r1, #0
 8002f5a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	0010      	movs	r0, r2
 8002f6c:	4798      	blx	r3
    }
  }
  return status;
 8002f6e:	230f      	movs	r3, #15
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	781b      	ldrb	r3, [r3, #0]
}
 8002f74:	0018      	movs	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b004      	add	sp, #16
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	fffffeff 	.word	0xfffffeff
 8002f80:	40020000 	.word	0x40020000

08002f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f92:	e147      	b.n	8003224 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4091      	lsls	r1, r2
 8002f9e:	000a      	movs	r2, r1
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d100      	bne.n	8002fac <HAL_GPIO_Init+0x28>
 8002faa:	e138      	b.n	800321e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d005      	beq.n	8002fc4 <HAL_GPIO_Init+0x40>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d130      	bne.n	8003026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	0013      	movs	r3, r2
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	409a      	lsls	r2, r3
 8003000:	0013      	movs	r3, r2
 8003002:	43da      	mvns	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	2201      	movs	r2, #1
 8003012:	401a      	ands	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	409a      	lsls	r2, r3
 8003018:	0013      	movs	r3, r2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2203      	movs	r2, #3
 800302c:	4013      	ands	r3, r2
 800302e:	2b03      	cmp	r3, #3
 8003030:	d017      	beq.n	8003062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	2203      	movs	r2, #3
 800303e:	409a      	lsls	r2, r3
 8003040:	0013      	movs	r3, r2
 8003042:	43da      	mvns	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	0013      	movs	r3, r2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2203      	movs	r2, #3
 8003068:	4013      	ands	r3, r2
 800306a:	2b02      	cmp	r3, #2
 800306c:	d123      	bne.n	80030b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	08da      	lsrs	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3208      	adds	r2, #8
 8003076:	0092      	lsls	r2, r2, #2
 8003078:	58d3      	ldr	r3, [r2, r3]
 800307a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2207      	movs	r2, #7
 8003080:	4013      	ands	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	220f      	movs	r2, #15
 8003086:	409a      	lsls	r2, r3
 8003088:	0013      	movs	r3, r2
 800308a:	43da      	mvns	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4013      	ands	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2107      	movs	r1, #7
 800309a:	400b      	ands	r3, r1
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	409a      	lsls	r2, r3
 80030a0:	0013      	movs	r3, r2
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	08da      	lsrs	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3208      	adds	r2, #8
 80030b0:	0092      	lsls	r2, r2, #2
 80030b2:	6939      	ldr	r1, [r7, #16]
 80030b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	2203      	movs	r2, #3
 80030c2:	409a      	lsls	r2, r3
 80030c4:	0013      	movs	r3, r2
 80030c6:	43da      	mvns	r2, r3
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2203      	movs	r2, #3
 80030d4:	401a      	ands	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	409a      	lsls	r2, r3
 80030dc:	0013      	movs	r3, r2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	23c0      	movs	r3, #192	; 0xc0
 80030f0:	029b      	lsls	r3, r3, #10
 80030f2:	4013      	ands	r3, r2
 80030f4:	d100      	bne.n	80030f8 <HAL_GPIO_Init+0x174>
 80030f6:	e092      	b.n	800321e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80030f8:	4a50      	ldr	r2, [pc, #320]	; (800323c <HAL_GPIO_Init+0x2b8>)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3318      	adds	r3, #24
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	589b      	ldr	r3, [r3, r2]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2203      	movs	r2, #3
 800310a:	4013      	ands	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	220f      	movs	r2, #15
 8003110:	409a      	lsls	r2, r3
 8003112:	0013      	movs	r3, r2
 8003114:	43da      	mvns	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	23a0      	movs	r3, #160	; 0xa0
 8003120:	05db      	lsls	r3, r3, #23
 8003122:	429a      	cmp	r2, r3
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0x1ca>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a45      	ldr	r2, [pc, #276]	; (8003240 <HAL_GPIO_Init+0x2bc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00d      	beq.n	800314a <HAL_GPIO_Init+0x1c6>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a44      	ldr	r2, [pc, #272]	; (8003244 <HAL_GPIO_Init+0x2c0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <HAL_GPIO_Init+0x1c2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a43      	ldr	r2, [pc, #268]	; (8003248 <HAL_GPIO_Init+0x2c4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_GPIO_Init+0x1be>
 800313e:	2303      	movs	r3, #3
 8003140:	e006      	b.n	8003150 <HAL_GPIO_Init+0x1cc>
 8003142:	2305      	movs	r3, #5
 8003144:	e004      	b.n	8003150 <HAL_GPIO_Init+0x1cc>
 8003146:	2302      	movs	r3, #2
 8003148:	e002      	b.n	8003150 <HAL_GPIO_Init+0x1cc>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_GPIO_Init+0x1cc>
 800314e:	2300      	movs	r3, #0
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	2103      	movs	r1, #3
 8003154:	400a      	ands	r2, r1
 8003156:	00d2      	lsls	r2, r2, #3
 8003158:	4093      	lsls	r3, r2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003160:	4936      	ldr	r1, [pc, #216]	; (800323c <HAL_GPIO_Init+0x2b8>)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3318      	adds	r3, #24
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800316e:	4a33      	ldr	r2, [pc, #204]	; (800323c <HAL_GPIO_Init+0x2b8>)
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	58d3      	ldr	r3, [r2, r3]
 8003174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	43da      	mvns	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	025b      	lsls	r3, r3, #9
 8003188:	4013      	ands	r3, r2
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003194:	4929      	ldr	r1, [pc, #164]	; (800323c <HAL_GPIO_Init+0x2b8>)
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800319c:	4a27      	ldr	r2, [pc, #156]	; (800323c <HAL_GPIO_Init+0x2b8>)
 800319e:	2384      	movs	r3, #132	; 0x84
 80031a0:	58d3      	ldr	r3, [r2, r3]
 80031a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	43da      	mvns	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	029b      	lsls	r3, r3, #10
 80031b6:	4013      	ands	r3, r2
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031c2:	491e      	ldr	r1, [pc, #120]	; (800323c <HAL_GPIO_Init+0x2b8>)
 80031c4:	2284      	movs	r2, #132	; 0x84
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <HAL_GPIO_Init+0x2b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	43da      	mvns	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	035b      	lsls	r3, r3, #13
 80031e2:	4013      	ands	r3, r2
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <HAL_GPIO_Init+0x2b8>)
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80031f4:	4b11      	ldr	r3, [pc, #68]	; (800323c <HAL_GPIO_Init+0x2b8>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	43da      	mvns	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	039b      	lsls	r3, r3, #14
 800320c:	4013      	ands	r3, r2
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003218:	4b08      	ldr	r3, [pc, #32]	; (800323c <HAL_GPIO_Init+0x2b8>)
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	3301      	adds	r3, #1
 8003222:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	40da      	lsrs	r2, r3
 800322c:	1e13      	subs	r3, r2, #0
 800322e:	d000      	beq.n	8003232 <HAL_GPIO_Init+0x2ae>
 8003230:	e6b0      	b.n	8002f94 <HAL_GPIO_Init+0x10>
  }
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b006      	add	sp, #24
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021800 	.word	0x40021800
 8003240:	50000400 	.word	0x50000400
 8003244:	50000800 	.word	0x50000800
 8003248:	50000c00 	.word	0x50000c00

0800324c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	0008      	movs	r0, r1
 8003256:	0011      	movs	r1, r2
 8003258:	1cbb      	adds	r3, r7, #2
 800325a:	1c02      	adds	r2, r0, #0
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	1c7b      	adds	r3, r7, #1
 8003260:	1c0a      	adds	r2, r1, #0
 8003262:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003264:	1c7b      	adds	r3, r7, #1
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800326c:	1cbb      	adds	r3, r7, #2
 800326e:	881a      	ldrh	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003276:	1cbb      	adds	r3, r7, #2
 8003278:	881a      	ldrh	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	b002      	add	sp, #8
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	000a      	movs	r2, r1
 8003290:	1cbb      	adds	r3, r7, #2
 8003292:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800329a:	1cbb      	adds	r3, r7, #2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4013      	ands	r3, r2
 80032a2:	041a      	lsls	r2, r3, #16
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	1cb9      	adds	r1, r7, #2
 80032aa:	8809      	ldrh	r1, [r1, #0]
 80032ac:	400b      	ands	r3, r1
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	619a      	str	r2, [r3, #24]
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b004      	add	sp, #16
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	0002      	movs	r2, r0
 80032c4:	1dbb      	adds	r3, r7, #6
 80032c6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	1dba      	adds	r2, r7, #6
 80032ce:	8812      	ldrh	r2, [r2, #0]
 80032d0:	4013      	ands	r3, r2
 80032d2:	d008      	beq.n	80032e6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80032d6:	1dba      	adds	r2, r7, #6
 80032d8:	8812      	ldrh	r2, [r2, #0]
 80032da:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80032dc:	1dbb      	adds	r3, r7, #6
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 f815 	bl	8003310 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	1dba      	adds	r2, r7, #6
 80032ec:	8812      	ldrh	r2, [r2, #0]
 80032ee:	4013      	ands	r3, r2
 80032f0:	d008      	beq.n	8003304 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80032f4:	1dba      	adds	r2, r7, #6
 80032f6:	8812      	ldrh	r2, [r2, #0]
 80032f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80032fa:	1dbb      	adds	r3, r7, #6
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff f982 	bl	8002608 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003304:	46c0      	nop			; (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b002      	add	sp, #8
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40021800 	.word	0x40021800

08003310 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	0002      	movs	r2, r0
 8003318:	1dbb      	adds	r3, r7, #6
 800331a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b002      	add	sp, #8
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <HAL_PWR_EnableBkUpAccess+0x18>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_PWR_EnableBkUpAccess+0x18>)
 800332e:	2180      	movs	r1, #128	; 0x80
 8003330:	0049      	lsls	r1, r1, #1
 8003332:	430a      	orrs	r2, r1
 8003334:	601a      	str	r2, [r3, #0]
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40007000 	.word	0x40007000

08003340 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800334e:	4013      	ands	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d11f      	bne.n	80033a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003364:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	0013      	movs	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	189b      	adds	r3, r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4912      	ldr	r1, [pc, #72]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003372:	0018      	movs	r0, r3
 8003374:	f7fc fee0 	bl	8000138 <__udivsi3>
 8003378:	0003      	movs	r3, r0
 800337a:	3301      	adds	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800337e:	e008      	b.n	8003392 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3b01      	subs	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e001      	b.n	8003392 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e009      	b.n	80033a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003392:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	401a      	ands	r2, r3
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d0ed      	beq.n	8003380 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b004      	add	sp, #16
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	40007000 	.word	0x40007000
 80033b4:	fffff9ff 	.word	0xfffff9ff
 80033b8:	20000058 	.word	0x20000058
 80033bc:	000f4240 	.word	0x000f4240

080033c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	23e0      	movs	r3, #224	; 0xe0
 80033ca:	01db      	lsls	r3, r3, #7
 80033cc:	4013      	ands	r3, r2
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000

080033d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e2f9      	b.n	80039de <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	d100      	bne.n	80033f6 <HAL_RCC_OscConfig+0x1e>
 80033f4:	e07c      	b.n	80034f0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f6:	4bc3      	ldr	r3, [pc, #780]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2238      	movs	r2, #56	; 0x38
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003400:	4bc0      	ldr	r3, [pc, #768]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2203      	movs	r2, #3
 8003406:	4013      	ands	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b10      	cmp	r3, #16
 800340e:	d102      	bne.n	8003416 <HAL_RCC_OscConfig+0x3e>
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d002      	beq.n	800341c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b08      	cmp	r3, #8
 800341a:	d10b      	bne.n	8003434 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	4bb9      	ldr	r3, [pc, #740]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	029b      	lsls	r3, r3, #10
 8003424:	4013      	ands	r3, r2
 8003426:	d062      	beq.n	80034ee <HAL_RCC_OscConfig+0x116>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d15e      	bne.n	80034ee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e2d4      	b.n	80039de <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	025b      	lsls	r3, r3, #9
 800343c:	429a      	cmp	r2, r3
 800343e:	d107      	bne.n	8003450 <HAL_RCC_OscConfig+0x78>
 8003440:	4bb0      	ldr	r3, [pc, #704]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4baf      	ldr	r3, [pc, #700]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003446:	2180      	movs	r1, #128	; 0x80
 8003448:	0249      	lsls	r1, r1, #9
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e020      	b.n	8003492 <HAL_RCC_OscConfig+0xba>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	23a0      	movs	r3, #160	; 0xa0
 8003456:	02db      	lsls	r3, r3, #11
 8003458:	429a      	cmp	r2, r3
 800345a:	d10e      	bne.n	800347a <HAL_RCC_OscConfig+0xa2>
 800345c:	4ba9      	ldr	r3, [pc, #676]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4ba8      	ldr	r3, [pc, #672]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003462:	2180      	movs	r1, #128	; 0x80
 8003464:	02c9      	lsls	r1, r1, #11
 8003466:	430a      	orrs	r2, r1
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	4ba6      	ldr	r3, [pc, #664]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4ba5      	ldr	r3, [pc, #660]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	0249      	lsls	r1, r1, #9
 8003474:	430a      	orrs	r2, r1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e00b      	b.n	8003492 <HAL_RCC_OscConfig+0xba>
 800347a:	4ba2      	ldr	r3, [pc, #648]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4ba1      	ldr	r3, [pc, #644]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003480:	49a1      	ldr	r1, [pc, #644]	; (8003708 <HAL_RCC_OscConfig+0x330>)
 8003482:	400a      	ands	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	4b9f      	ldr	r3, [pc, #636]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b9e      	ldr	r3, [pc, #632]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800348c:	499f      	ldr	r1, [pc, #636]	; (800370c <HAL_RCC_OscConfig+0x334>)
 800348e:	400a      	ands	r2, r1
 8003490:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d014      	beq.n	80034c4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7ff fb79 	bl	8002b90 <HAL_GetTick>
 800349e:	0003      	movs	r3, r0
 80034a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7ff fb74 	bl	8002b90 <HAL_GetTick>
 80034a8:	0002      	movs	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e293      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b6:	4b93      	ldr	r3, [pc, #588]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	029b      	lsls	r3, r3, #10
 80034be:	4013      	ands	r3, r2
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0xcc>
 80034c2:	e015      	b.n	80034f0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7ff fb64 	bl	8002b90 <HAL_GetTick>
 80034c8:	0003      	movs	r3, r0
 80034ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ce:	f7ff fb5f 	bl	8002b90 <HAL_GetTick>
 80034d2:	0002      	movs	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b64      	cmp	r3, #100	; 0x64
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e27e      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034e0:	4b88      	ldr	r3, [pc, #544]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	029b      	lsls	r3, r3, #10
 80034e8:	4013      	ands	r3, r2
 80034ea:	d1f0      	bne.n	80034ce <HAL_RCC_OscConfig+0xf6>
 80034ec:	e000      	b.n	80034f0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2202      	movs	r2, #2
 80034f6:	4013      	ands	r3, r2
 80034f8:	d100      	bne.n	80034fc <HAL_RCC_OscConfig+0x124>
 80034fa:	e099      	b.n	8003630 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fc:	4b81      	ldr	r3, [pc, #516]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2238      	movs	r2, #56	; 0x38
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003506:	4b7f      	ldr	r3, [pc, #508]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2203      	movs	r2, #3
 800350c:	4013      	ands	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2b10      	cmp	r3, #16
 8003514:	d102      	bne.n	800351c <HAL_RCC_OscConfig+0x144>
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d002      	beq.n	8003522 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d135      	bne.n	800358e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003522:	4b78      	ldr	r3, [pc, #480]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4013      	ands	r3, r2
 800352c:	d005      	beq.n	800353a <HAL_RCC_OscConfig+0x162>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e251      	b.n	80039de <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353a:	4b72      	ldr	r3, [pc, #456]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4a74      	ldr	r2, [pc, #464]	; (8003710 <HAL_RCC_OscConfig+0x338>)
 8003540:	4013      	ands	r3, r2
 8003542:	0019      	movs	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	021a      	lsls	r2, r3, #8
 800354a:	4b6e      	ldr	r3, [pc, #440]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800354c:	430a      	orrs	r2, r1
 800354e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d112      	bne.n	800357c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003556:	4b6b      	ldr	r3, [pc, #428]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6e      	ldr	r2, [pc, #440]	; (8003714 <HAL_RCC_OscConfig+0x33c>)
 800355c:	4013      	ands	r3, r2
 800355e:	0019      	movs	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	4b67      	ldr	r3, [pc, #412]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003566:	430a      	orrs	r2, r1
 8003568:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800356a:	4b66      	ldr	r3, [pc, #408]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	0adb      	lsrs	r3, r3, #11
 8003570:	2207      	movs	r2, #7
 8003572:	4013      	ands	r3, r2
 8003574:	4a68      	ldr	r2, [pc, #416]	; (8003718 <HAL_RCC_OscConfig+0x340>)
 8003576:	40da      	lsrs	r2, r3
 8003578:	4b68      	ldr	r3, [pc, #416]	; (800371c <HAL_RCC_OscConfig+0x344>)
 800357a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800357c:	4b68      	ldr	r3, [pc, #416]	; (8003720 <HAL_RCC_OscConfig+0x348>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	0018      	movs	r0, r3
 8003582:	f7ff faa9 	bl	8002ad8 <HAL_InitTick>
 8003586:	1e03      	subs	r3, r0, #0
 8003588:	d051      	beq.n	800362e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e227      	b.n	80039de <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d030      	beq.n	80035f8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003596:	4b5b      	ldr	r3, [pc, #364]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a5e      	ldr	r2, [pc, #376]	; (8003714 <HAL_RCC_OscConfig+0x33c>)
 800359c:	4013      	ands	r3, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	4b57      	ldr	r3, [pc, #348]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80035a6:	430a      	orrs	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80035aa:	4b56      	ldr	r3, [pc, #344]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b55      	ldr	r3, [pc, #340]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80035b0:	2180      	movs	r1, #128	; 0x80
 80035b2:	0049      	lsls	r1, r1, #1
 80035b4:	430a      	orrs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7ff faea 	bl	8002b90 <HAL_GetTick>
 80035bc:	0003      	movs	r3, r0
 80035be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c2:	f7ff fae5 	bl	8002b90 <HAL_GetTick>
 80035c6:	0002      	movs	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e204      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d4:	4b4b      	ldr	r3, [pc, #300]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4013      	ands	r3, r2
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e0:	4b48      	ldr	r3, [pc, #288]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a4a      	ldr	r2, [pc, #296]	; (8003710 <HAL_RCC_OscConfig+0x338>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	0019      	movs	r1, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	021a      	lsls	r2, r3, #8
 80035f0:	4b44      	ldr	r3, [pc, #272]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	e01b      	b.n	8003630 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80035f8:	4b42      	ldr	r3, [pc, #264]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b41      	ldr	r3, [pc, #260]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80035fe:	4949      	ldr	r1, [pc, #292]	; (8003724 <HAL_RCC_OscConfig+0x34c>)
 8003600:	400a      	ands	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7ff fac4 	bl	8002b90 <HAL_GetTick>
 8003608:	0003      	movs	r3, r0
 800360a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360e:	f7ff fabf 	bl	8002b90 <HAL_GetTick>
 8003612:	0002      	movs	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e1de      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003620:	4b38      	ldr	r3, [pc, #224]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4013      	ands	r3, r2
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x236>
 800362c:	e000      	b.n	8003630 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800362e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2208      	movs	r2, #8
 8003636:	4013      	ands	r3, r2
 8003638:	d047      	beq.n	80036ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800363a:	4b32      	ldr	r3, [pc, #200]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2238      	movs	r2, #56	; 0x38
 8003640:	4013      	ands	r3, r2
 8003642:	2b18      	cmp	r3, #24
 8003644:	d10a      	bne.n	800365c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364a:	2202      	movs	r2, #2
 800364c:	4013      	ands	r3, r2
 800364e:	d03c      	beq.n	80036ca <HAL_RCC_OscConfig+0x2f2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d138      	bne.n	80036ca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e1c0      	b.n	80039de <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d019      	beq.n	8003698 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003664:	4b27      	ldr	r3, [pc, #156]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 8003666:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003668:	4b26      	ldr	r3, [pc, #152]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800366a:	2101      	movs	r1, #1
 800366c:	430a      	orrs	r2, r1
 800366e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7ff fa8e 	bl	8002b90 <HAL_GetTick>
 8003674:	0003      	movs	r3, r0
 8003676:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800367a:	f7ff fa89 	bl	8002b90 <HAL_GetTick>
 800367e:	0002      	movs	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e1a8      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800368e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003690:	2202      	movs	r2, #2
 8003692:	4013      	ands	r3, r2
 8003694:	d0f1      	beq.n	800367a <HAL_RCC_OscConfig+0x2a2>
 8003696:	e018      	b.n	80036ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800369a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800369c:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 800369e:	2101      	movs	r1, #1
 80036a0:	438a      	bics	r2, r1
 80036a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7ff fa74 	bl	8002b90 <HAL_GetTick>
 80036a8:	0003      	movs	r3, r0
 80036aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ae:	f7ff fa6f 	bl	8002b90 <HAL_GetTick>
 80036b2:	0002      	movs	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e18e      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80036c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c4:	2202      	movs	r2, #2
 80036c6:	4013      	ands	r3, r2
 80036c8:	d1f1      	bne.n	80036ae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2204      	movs	r2, #4
 80036d0:	4013      	ands	r3, r2
 80036d2:	d100      	bne.n	80036d6 <HAL_RCC_OscConfig+0x2fe>
 80036d4:	e0c6      	b.n	8003864 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d6:	231f      	movs	r3, #31
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2238      	movs	r2, #56	; 0x38
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d11e      	bne.n	8003728 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_RCC_OscConfig+0x32c>)
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	2202      	movs	r2, #2
 80036f0:	4013      	ands	r3, r2
 80036f2:	d100      	bne.n	80036f6 <HAL_RCC_OscConfig+0x31e>
 80036f4:	e0b6      	b.n	8003864 <HAL_RCC_OscConfig+0x48c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d000      	beq.n	8003700 <HAL_RCC_OscConfig+0x328>
 80036fe:	e0b1      	b.n	8003864 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e16c      	b.n	80039de <HAL_RCC_OscConfig+0x606>
 8003704:	40021000 	.word	0x40021000
 8003708:	fffeffff 	.word	0xfffeffff
 800370c:	fffbffff 	.word	0xfffbffff
 8003710:	ffff80ff 	.word	0xffff80ff
 8003714:	ffffc7ff 	.word	0xffffc7ff
 8003718:	00f42400 	.word	0x00f42400
 800371c:	20000058 	.word	0x20000058
 8003720:	2000005c 	.word	0x2000005c
 8003724:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003728:	4baf      	ldr	r3, [pc, #700]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 800372a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	055b      	lsls	r3, r3, #21
 8003730:	4013      	ands	r3, r2
 8003732:	d101      	bne.n	8003738 <HAL_RCC_OscConfig+0x360>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x362>
 8003738:	2300      	movs	r3, #0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d011      	beq.n	8003762 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800373e:	4baa      	ldr	r3, [pc, #680]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 8003740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003742:	4ba9      	ldr	r3, [pc, #676]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	0549      	lsls	r1, r1, #21
 8003748:	430a      	orrs	r2, r1
 800374a:	63da      	str	r2, [r3, #60]	; 0x3c
 800374c:	4ba6      	ldr	r3, [pc, #664]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 800374e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	055b      	lsls	r3, r3, #21
 8003754:	4013      	ands	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800375a:	231f      	movs	r3, #31
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003762:	4ba2      	ldr	r3, [pc, #648]	; (80039ec <HAL_RCC_OscConfig+0x614>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4013      	ands	r3, r2
 800376c:	d11a      	bne.n	80037a4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800376e:	4b9f      	ldr	r3, [pc, #636]	; (80039ec <HAL_RCC_OscConfig+0x614>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b9e      	ldr	r3, [pc, #632]	; (80039ec <HAL_RCC_OscConfig+0x614>)
 8003774:	2180      	movs	r1, #128	; 0x80
 8003776:	0049      	lsls	r1, r1, #1
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800377c:	f7ff fa08 	bl	8002b90 <HAL_GetTick>
 8003780:	0003      	movs	r3, r0
 8003782:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003786:	f7ff fa03 	bl	8002b90 <HAL_GetTick>
 800378a:	0002      	movs	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e122      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003798:	4b94      	ldr	r3, [pc, #592]	; (80039ec <HAL_RCC_OscConfig+0x614>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4013      	ands	r3, r2
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x3e2>
 80037ac:	4b8e      	ldr	r3, [pc, #568]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80037ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037b0:	4b8d      	ldr	r3, [pc, #564]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80037b2:	2101      	movs	r1, #1
 80037b4:	430a      	orrs	r2, r1
 80037b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80037b8:	e01c      	b.n	80037f4 <HAL_RCC_OscConfig+0x41c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d10c      	bne.n	80037dc <HAL_RCC_OscConfig+0x404>
 80037c2:	4b89      	ldr	r3, [pc, #548]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80037c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037c6:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80037c8:	2104      	movs	r1, #4
 80037ca:	430a      	orrs	r2, r1
 80037cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80037ce:	4b86      	ldr	r3, [pc, #536]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80037d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037d2:	4b85      	ldr	r3, [pc, #532]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	430a      	orrs	r2, r1
 80037d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80037da:	e00b      	b.n	80037f4 <HAL_RCC_OscConfig+0x41c>
 80037dc:	4b82      	ldr	r3, [pc, #520]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80037de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037e0:	4b81      	ldr	r3, [pc, #516]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80037e2:	2101      	movs	r1, #1
 80037e4:	438a      	bics	r2, r1
 80037e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80037e8:	4b7f      	ldr	r3, [pc, #508]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80037ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037ec:	4b7e      	ldr	r3, [pc, #504]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80037ee:	2104      	movs	r1, #4
 80037f0:	438a      	bics	r2, r1
 80037f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d014      	beq.n	8003826 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7ff f9c8 	bl	8002b90 <HAL_GetTick>
 8003800:	0003      	movs	r3, r0
 8003802:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003804:	e009      	b.n	800381a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7ff f9c3 	bl	8002b90 <HAL_GetTick>
 800380a:	0002      	movs	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	4a77      	ldr	r2, [pc, #476]	; (80039f0 <HAL_RCC_OscConfig+0x618>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0e1      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381a:	4b73      	ldr	r3, [pc, #460]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	2202      	movs	r2, #2
 8003820:	4013      	ands	r3, r2
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x42e>
 8003824:	e013      	b.n	800384e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7ff f9b3 	bl	8002b90 <HAL_GetTick>
 800382a:	0003      	movs	r3, r0
 800382c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800382e:	e009      	b.n	8003844 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7ff f9ae 	bl	8002b90 <HAL_GetTick>
 8003834:	0002      	movs	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	4a6d      	ldr	r2, [pc, #436]	; (80039f0 <HAL_RCC_OscConfig+0x618>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0cc      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003844:	4b68      	ldr	r3, [pc, #416]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 8003846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003848:	2202      	movs	r2, #2
 800384a:	4013      	ands	r3, r2
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800384e:	231f      	movs	r3, #31
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003858:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 800385a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800385c:	4b62      	ldr	r3, [pc, #392]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 800385e:	4965      	ldr	r1, [pc, #404]	; (80039f4 <HAL_RCC_OscConfig+0x61c>)
 8003860:	400a      	ands	r2, r1
 8003862:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d100      	bne.n	800386e <HAL_RCC_OscConfig+0x496>
 800386c:	e0b6      	b.n	80039dc <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800386e:	4b5e      	ldr	r3, [pc, #376]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2238      	movs	r2, #56	; 0x38
 8003874:	4013      	ands	r3, r2
 8003876:	2b10      	cmp	r3, #16
 8003878:	d100      	bne.n	800387c <HAL_RCC_OscConfig+0x4a4>
 800387a:	e07e      	b.n	800397a <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d153      	bne.n	800392c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003884:	4b58      	ldr	r3, [pc, #352]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b57      	ldr	r3, [pc, #348]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 800388a:	495b      	ldr	r1, [pc, #364]	; (80039f8 <HAL_RCC_OscConfig+0x620>)
 800388c:	400a      	ands	r2, r1
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7ff f97e 	bl	8002b90 <HAL_GetTick>
 8003894:	0003      	movs	r3, r0
 8003896:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389a:	f7ff f979 	bl	8002b90 <HAL_GetTick>
 800389e:	0002      	movs	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e098      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ac:	4b4e      	ldr	r3, [pc, #312]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	049b      	lsls	r3, r3, #18
 80038b4:	4013      	ands	r3, r2
 80038b6:	d1f0      	bne.n	800389a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b8:	4b4b      	ldr	r3, [pc, #300]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4a4f      	ldr	r2, [pc, #316]	; (80039fc <HAL_RCC_OscConfig+0x624>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1a      	ldr	r2, [r3, #32]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	431a      	orrs	r2, r3
 80038e0:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80038e2:	430a      	orrs	r2, r1
 80038e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e6:	4b40      	ldr	r3, [pc, #256]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4b3f      	ldr	r3, [pc, #252]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80038ec:	2180      	movs	r1, #128	; 0x80
 80038ee:	0449      	lsls	r1, r1, #17
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80038f4:	4b3c      	ldr	r3, [pc, #240]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 80038fa:	2180      	movs	r1, #128	; 0x80
 80038fc:	0549      	lsls	r1, r1, #21
 80038fe:	430a      	orrs	r2, r1
 8003900:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7ff f945 	bl	8002b90 <HAL_GetTick>
 8003906:	0003      	movs	r3, r0
 8003908:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390c:	f7ff f940 	bl	8002b90 <HAL_GetTick>
 8003910:	0002      	movs	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e05f      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391e:	4b32      	ldr	r3, [pc, #200]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	049b      	lsls	r3, r3, #18
 8003926:	4013      	ands	r3, r2
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x534>
 800392a:	e057      	b.n	80039dc <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392c:	4b2e      	ldr	r3, [pc, #184]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 8003932:	4931      	ldr	r1, [pc, #196]	; (80039f8 <HAL_RCC_OscConfig+0x620>)
 8003934:	400a      	ands	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003938:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 800393e:	2103      	movs	r1, #3
 8003940:	438a      	bics	r2, r1
 8003942:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003944:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 800394a:	492d      	ldr	r1, [pc, #180]	; (8003a00 <HAL_RCC_OscConfig+0x628>)
 800394c:	400a      	ands	r2, r1
 800394e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7ff f91e 	bl	8002b90 <HAL_GetTick>
 8003954:	0003      	movs	r3, r0
 8003956:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395a:	f7ff f919 	bl	8002b90 <HAL_GetTick>
 800395e:	0002      	movs	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e038      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800396c:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	049b      	lsls	r3, r3, #18
 8003974:	4013      	ands	r3, r2
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x582>
 8003978:	e030      	b.n	80039dc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e02b      	b.n	80039de <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003986:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <HAL_RCC_OscConfig+0x610>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2203      	movs	r2, #3
 8003990:	401a      	ands	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	429a      	cmp	r2, r3
 8003998:	d11e      	bne.n	80039d8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2270      	movs	r2, #112	; 0x70
 800399e:	401a      	ands	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d117      	bne.n	80039d8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	23fe      	movs	r3, #254	; 0xfe
 80039ac:	01db      	lsls	r3, r3, #7
 80039ae:	401a      	ands	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d10e      	bne.n	80039d8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	23f8      	movs	r3, #248	; 0xf8
 80039be:	039b      	lsls	r3, r3, #14
 80039c0:	401a      	ands	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d106      	bne.n	80039d8 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	0f5b      	lsrs	r3, r3, #29
 80039ce:	075a      	lsls	r2, r3, #29
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	0018      	movs	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b008      	add	sp, #32
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40007000 	.word	0x40007000
 80039f0:	00001388 	.word	0x00001388
 80039f4:	efffffff 	.word	0xefffffff
 80039f8:	feffffff 	.word	0xfeffffff
 80039fc:	1fc1808c 	.word	0x1fc1808c
 8003a00:	effeffff 	.word	0xeffeffff

08003a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0e9      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a18:	4b76      	ldr	r3, [pc, #472]	; (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2207      	movs	r2, #7
 8003a1e:	4013      	ands	r3, r2
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d91e      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	4b73      	ldr	r3, [pc, #460]	; (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2207      	movs	r2, #7
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	4b70      	ldr	r3, [pc, #448]	; (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a38:	f7ff f8aa 	bl	8002b90 <HAL_GetTick>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a40:	e009      	b.n	8003a56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a42:	f7ff f8a5 	bl	8002b90 <HAL_GetTick>
 8003a46:	0002      	movs	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	4a6a      	ldr	r2, [pc, #424]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0ca      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a56:	4b67      	ldr	r3, [pc, #412]	; (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2207      	movs	r2, #7
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d1ee      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d015      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2204      	movs	r2, #4
 8003a74:	4013      	ands	r3, r2
 8003a76:	d006      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003a78:	4b60      	ldr	r3, [pc, #384]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	4b5f      	ldr	r3, [pc, #380]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003a7e:	21e0      	movs	r1, #224	; 0xe0
 8003a80:	01c9      	lsls	r1, r1, #7
 8003a82:	430a      	orrs	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a86:	4b5d      	ldr	r3, [pc, #372]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4a5d      	ldr	r2, [pc, #372]	; (8003c00 <HAL_RCC_ClockConfig+0x1fc>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	4b59      	ldr	r3, [pc, #356]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003a96:	430a      	orrs	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d057      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aac:	4b53      	ldr	r3, [pc, #332]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	029b      	lsls	r3, r3, #10
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d12b      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e097      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac4:	4b4d      	ldr	r3, [pc, #308]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	049b      	lsls	r3, r3, #18
 8003acc:	4013      	ands	r3, r2
 8003ace:	d11f      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e08b      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d107      	bne.n	8003aec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003adc:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d113      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e07f      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d106      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003af4:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af8:	2202      	movs	r2, #2
 8003afa:	4013      	ands	r3, r2
 8003afc:	d108      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e074      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	2202      	movs	r2, #2
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e06d      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b10:	4b3a      	ldr	r3, [pc, #232]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2207      	movs	r2, #7
 8003b16:	4393      	bics	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	4b37      	ldr	r3, [pc, #220]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003b20:	430a      	orrs	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b24:	f7ff f834 	bl	8002b90 <HAL_GetTick>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2c:	e009      	b.n	8003b42 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2e:	f7ff f82f 	bl	8002b90 <HAL_GetTick>
 8003b32:	0002      	movs	r2, r0
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	4a2f      	ldr	r2, [pc, #188]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e054      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b2e      	ldr	r3, [pc, #184]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2238      	movs	r2, #56	; 0x38
 8003b48:	401a      	ands	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1ec      	bne.n	8003b2e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2207      	movs	r2, #7
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d21e      	bcs.n	8003ba0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2207      	movs	r2, #7
 8003b68:	4393      	bics	r3, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b74:	f7ff f80c 	bl	8002b90 <HAL_GetTick>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b7c:	e009      	b.n	8003b92 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7e:	f7ff f807 	bl	8002b90 <HAL_GetTick>
 8003b82:	0002      	movs	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	4a1b      	ldr	r2, [pc, #108]	; (8003bf8 <HAL_RCC_ClockConfig+0x1f4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e02c      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b92:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2207      	movs	r2, #7
 8003b98:	4013      	ands	r3, r2
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d1ee      	bne.n	8003b7e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003baa:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <HAL_RCC_ClockConfig+0x200>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003bbe:	f000 f829 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8003bc2:	0001      	movs	r1, r0
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	220f      	movs	r2, #15
 8003bcc:	401a      	ands	r2, r3
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <HAL_RCC_ClockConfig+0x204>)
 8003bd0:	0092      	lsls	r2, r2, #2
 8003bd2:	58d3      	ldr	r3, [r2, r3]
 8003bd4:	221f      	movs	r2, #31
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	000a      	movs	r2, r1
 8003bda:	40da      	lsrs	r2, r3
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_ClockConfig+0x208>)
 8003bde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCC_ClockConfig+0x20c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7fe ff77 	bl	8002ad8 <HAL_InitTick>
 8003bea:	0003      	movs	r3, r0
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b004      	add	sp, #16
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	00001388 	.word	0x00001388
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	fffff0ff 	.word	0xfffff0ff
 8003c04:	ffff8fff 	.word	0xffff8fff
 8003c08:	08007d5c 	.word	0x08007d5c
 8003c0c:	20000058 	.word	0x20000058
 8003c10:	2000005c 	.word	0x2000005c

08003c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c1a:	4b3c      	ldr	r3, [pc, #240]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2238      	movs	r2, #56	; 0x38
 8003c20:	4013      	ands	r3, r2
 8003c22:	d10f      	bne.n	8003c44 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003c24:	4b39      	ldr	r3, [pc, #228]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0adb      	lsrs	r3, r3, #11
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2201      	movs	r2, #1
 8003c30:	409a      	lsls	r2, r3
 8003c32:	0013      	movs	r3, r2
 8003c34:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003c36:	6839      	ldr	r1, [r7, #0]
 8003c38:	4835      	ldr	r0, [pc, #212]	; (8003d10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c3a:	f7fc fa7d 	bl	8000138 <__udivsi3>
 8003c3e:	0003      	movs	r3, r0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	e05d      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c44:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2238      	movs	r2, #56	; 0x38
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d102      	bne.n	8003c56 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c50:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x100>)
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	e054      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c56:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2238      	movs	r2, #56	; 0x38
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d138      	bne.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003c62:	4b2a      	ldr	r3, [pc, #168]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2203      	movs	r2, #3
 8003c68:	4013      	ands	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c6c:	4b27      	ldr	r3, [pc, #156]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	2207      	movs	r2, #7
 8003c74:	4013      	ands	r3, r2
 8003c76:	3301      	adds	r3, #1
 8003c78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d10d      	bne.n	8003c9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	4824      	ldr	r0, [pc, #144]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x100>)
 8003c84:	f7fc fa58 	bl	8000138 <__udivsi3>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	227f      	movs	r2, #127	; 0x7f
 8003c94:	4013      	ands	r3, r2
 8003c96:	434b      	muls	r3, r1
 8003c98:	617b      	str	r3, [r7, #20]
        break;
 8003c9a:	e00d      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	481c      	ldr	r0, [pc, #112]	; (8003d10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ca0:	f7fc fa4a 	bl	8000138 <__udivsi3>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	227f      	movs	r2, #127	; 0x7f
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	434b      	muls	r3, r1
 8003cb4:	617b      	str	r3, [r7, #20]
        break;
 8003cb6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003cb8:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	0f5b      	lsrs	r3, r3, #29
 8003cbe:	2207      	movs	r2, #7
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	6978      	ldr	r0, [r7, #20]
 8003cca:	f7fc fa35 	bl	8000138 <__udivsi3>
 8003cce:	0003      	movs	r3, r0
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	e015      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003cd4:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2238      	movs	r2, #56	; 0x38
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d103      	bne.n	8003ce8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2238      	movs	r2, #56	; 0x38
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b18      	cmp	r3, #24
 8003cf2:	d103      	bne.n	8003cfc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003cf4:	23fa      	movs	r3, #250	; 0xfa
 8003cf6:	01db      	lsls	r3, r3, #7
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	e001      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d00:	693b      	ldr	r3, [r7, #16]
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b006      	add	sp, #24
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	00f42400 	.word	0x00f42400
 8003d14:	007a1200 	.word	0x007a1200

08003d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d1c:	4b02      	ldr	r3, [pc, #8]	; (8003d28 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	20000058 	.word	0x20000058

08003d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d2c:	b5b0      	push	{r4, r5, r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d30:	f7ff fff2 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d34:	0004      	movs	r4, r0
 8003d36:	f7ff fb43 	bl	80033c0 <LL_RCC_GetAPB1Prescaler>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	0b1a      	lsrs	r2, r3, #12
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d40:	0092      	lsls	r2, r2, #2
 8003d42:	58d3      	ldr	r3, [r2, r3]
 8003d44:	221f      	movs	r2, #31
 8003d46:	4013      	ands	r3, r2
 8003d48:	40dc      	lsrs	r4, r3
 8003d4a:	0023      	movs	r3, r4
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bdb0      	pop	{r4, r5, r7, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	08007d9c 	.word	0x08007d9c

08003d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003d60:	2313      	movs	r3, #19
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d68:	2312      	movs	r3, #18
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	029b      	lsls	r3, r3, #10
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003d7c:	e0a3      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7e:	2011      	movs	r0, #17
 8003d80:	183b      	adds	r3, r7, r0
 8003d82:	2200      	movs	r2, #0
 8003d84:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d86:	4b7f      	ldr	r3, [pc, #508]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	055b      	lsls	r3, r3, #21
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d110      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	4b7c      	ldr	r3, [pc, #496]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d96:	4b7b      	ldr	r3, [pc, #492]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	0549      	lsls	r1, r1, #21
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003da0:	4b78      	ldr	r3, [pc, #480]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	055b      	lsls	r3, r3, #21
 8003da8:	4013      	ands	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dae:	183b      	adds	r3, r7, r0
 8003db0:	2201      	movs	r2, #1
 8003db2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db4:	4b74      	ldr	r3, [pc, #464]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b73      	ldr	r3, [pc, #460]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003dba:	2180      	movs	r1, #128	; 0x80
 8003dbc:	0049      	lsls	r1, r1, #1
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc2:	f7fe fee5 	bl	8002b90 <HAL_GetTick>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dca:	e00b      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dcc:	f7fe fee0 	bl	8002b90 <HAL_GetTick>
 8003dd0:	0002      	movs	r2, r0
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d904      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003dda:	2313      	movs	r3, #19
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	2203      	movs	r2, #3
 8003de0:	701a      	strb	r2, [r3, #0]
        break;
 8003de2:	e005      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de4:	4b68      	ldr	r3, [pc, #416]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4013      	ands	r3, r2
 8003dee:	d0ed      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003df0:	2313      	movs	r3, #19
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d154      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dfa:	4b62      	ldr	r3, [pc, #392]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dfe:	23c0      	movs	r3, #192	; 0xc0
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4013      	ands	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d019      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d014      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e16:	4b5b      	ldr	r3, [pc, #364]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	4a5c      	ldr	r2, [pc, #368]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e20:	4b58      	ldr	r3, [pc, #352]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e24:	4b57      	ldr	r3, [pc, #348]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e26:	2180      	movs	r1, #128	; 0x80
 8003e28:	0249      	lsls	r1, r1, #9
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e2e:	4b55      	ldr	r3, [pc, #340]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e32:	4b54      	ldr	r3, [pc, #336]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e34:	4956      	ldr	r1, [pc, #344]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003e36:	400a      	ands	r2, r1
 8003e38:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e3a:	4b52      	ldr	r3, [pc, #328]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2201      	movs	r2, #1
 8003e44:	4013      	ands	r3, r2
 8003e46:	d016      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fe fea2 	bl	8002b90 <HAL_GetTick>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e50:	e00c      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fe fe9d 	bl	8002b90 <HAL_GetTick>
 8003e56:	0002      	movs	r2, r0
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	4a4d      	ldr	r2, [pc, #308]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d904      	bls.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003e62:	2313      	movs	r3, #19
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	2203      	movs	r2, #3
 8003e68:	701a      	strb	r2, [r3, #0]
            break;
 8003e6a:	e004      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6c:	4b45      	ldr	r3, [pc, #276]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	2202      	movs	r2, #2
 8003e72:	4013      	ands	r3, r2
 8003e74:	d0ed      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003e76:	2313      	movs	r3, #19
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e80:	4b40      	ldr	r3, [pc, #256]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	4a41      	ldr	r2, [pc, #260]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	0019      	movs	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e90:	430a      	orrs	r2, r1
 8003e92:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e94:	e00c      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e96:	2312      	movs	r3, #18
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	2213      	movs	r2, #19
 8003e9c:	18ba      	adds	r2, r7, r2
 8003e9e:	7812      	ldrb	r2, [r2, #0]
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e005      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	2312      	movs	r3, #18
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2213      	movs	r2, #19
 8003eaa:	18ba      	adds	r2, r7, r2
 8003eac:	7812      	ldrb	r2, [r2, #0]
 8003eae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eb0:	2311      	movs	r3, #17
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d105      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eba:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ebc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ebe:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ec0:	4935      	ldr	r1, [pc, #212]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d009      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ed0:	4b2c      	ldr	r3, [pc, #176]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	4393      	bics	r3, r2
 8003ed8:	0019      	movs	r1, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	4013      	ands	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eee:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	4a2a      	ldr	r2, [pc, #168]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	4b21      	ldr	r3, [pc, #132]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003efe:	430a      	orrs	r2, r1
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	01db      	lsls	r3, r3, #7
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d015      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	0899      	lsrs	r1, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	05db      	lsls	r3, r3, #23
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003f2c:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f32:	2180      	movs	r1, #128	; 0x80
 8003f34:	0249      	lsls	r1, r1, #9
 8003f36:	430a      	orrs	r2, r1
 8003f38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	4013      	ands	r3, r2
 8003f44:	d016      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003f46:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4a:	4a15      	ldr	r2, [pc, #84]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	0019      	movs	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f56:	430a      	orrs	r2, r1
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	01db      	lsls	r3, r3, #7
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d106      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003f6c:	2180      	movs	r1, #128	; 0x80
 8003f6e:	0249      	lsls	r1, r1, #9
 8003f70:	430a      	orrs	r2, r1
 8003f72:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003f74:	2312      	movs	r3, #18
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	781b      	ldrb	r3, [r3, #0]
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b006      	add	sp, #24
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	fffffcff 	.word	0xfffffcff
 8003f90:	fffeffff 	.word	0xfffeffff
 8003f94:	00001388 	.word	0x00001388
 8003f98:	efffffff 	.word	0xefffffff
 8003f9c:	ffffcfff 	.word	0xffffcfff
 8003fa0:	ffff3fff 	.word	0xffff3fff

08003fa4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fa4:	b5b0      	push	{r4, r5, r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003fac:	230f      	movs	r3, #15
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d100      	bne.n	8003fbc <HAL_RTC_Init+0x18>
 8003fba:	e080      	b.n	80040be <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2229      	movs	r2, #41	; 0x29
 8003fc0:	5c9b      	ldrb	r3, [r3, r2]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2228      	movs	r2, #40	; 0x28
 8003fcc:	2100      	movs	r1, #0
 8003fce:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2288      	movs	r2, #136	; 0x88
 8003fd4:	0212      	lsls	r2, r2, #8
 8003fd6:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7fe fb54 	bl	8002688 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2229      	movs	r2, #41	; 0x29
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	22ca      	movs	r2, #202	; 0xca
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2253      	movs	r2, #83	; 0x53
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003ff8:	250f      	movs	r5, #15
 8003ffa:	197c      	adds	r4, r7, r5
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	0018      	movs	r0, r3
 8004000:	f000 fa71 	bl	80044e6 <RTC_EnterInitMode>
 8004004:	0003      	movs	r3, r0
 8004006:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8004008:	0028      	movs	r0, r5
 800400a:	183b      	adds	r3, r7, r0
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d148      	bne.n	80040a4 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	492b      	ldr	r1, [pc, #172]	; (80040cc <HAL_RTC_Init+0x128>)
 800401e:	400a      	ands	r2, r1
 8004020:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6999      	ldr	r1, [r3, #24]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6912      	ldr	r2, [r2, #16]
 8004048:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6919      	ldr	r1, [r3, #16]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	041a      	lsls	r2, r3, #16
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800405e:	0005      	movs	r5, r0
 8004060:	183c      	adds	r4, r7, r0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	0018      	movs	r0, r3
 8004066:	f000 fa81 	bl	800456c <RTC_ExitInitMode>
 800406a:	0003      	movs	r3, r0
 800406c:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800406e:	197b      	adds	r3, r7, r5
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d116      	bne.n	80040a4 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	00d2      	lsls	r2, r2, #3
 8004082:	08d2      	lsrs	r2, r2, #3
 8004084:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6999      	ldr	r1, [r3, #24]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	22ff      	movs	r2, #255	; 0xff
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80040ac:	230f      	movs	r3, #15
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2229      	movs	r2, #41	; 0x29
 80040ba:	2101      	movs	r1, #1
 80040bc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80040be:	230f      	movs	r3, #15
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	781b      	ldrb	r3, [r3, #0]
}
 80040c4:	0018      	movs	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b004      	add	sp, #16
 80040ca:	bdb0      	pop	{r4, r5, r7, pc}
 80040cc:	fb8fffbf 	.word	0xfb8fffbf

080040d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040d0:	b5b0      	push	{r4, r5, r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2228      	movs	r2, #40	; 0x28
 80040e0:	5c9b      	ldrb	r3, [r3, r2]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_RTC_SetTime+0x1a>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e092      	b.n	8004210 <HAL_RTC_SetTime+0x140>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2228      	movs	r2, #40	; 0x28
 80040ee:	2101      	movs	r1, #1
 80040f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2229      	movs	r2, #41	; 0x29
 80040f6:	2102      	movs	r1, #2
 80040f8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	22ca      	movs	r2, #202	; 0xca
 8004100:	625a      	str	r2, [r3, #36]	; 0x24
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2253      	movs	r2, #83	; 0x53
 8004108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800410a:	2513      	movs	r5, #19
 800410c:	197c      	adds	r4, r7, r5
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	0018      	movs	r0, r3
 8004112:	f000 f9e8 	bl	80044e6 <RTC_EnterInitMode>
 8004116:	0003      	movs	r3, r0
 8004118:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800411a:	197b      	adds	r3, r7, r5
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d162      	bne.n	80041e8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d125      	bne.n	8004174 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2240      	movs	r2, #64	; 0x40
 8004130:	4013      	ands	r3, r2
 8004132:	d102      	bne.n	800413a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2200      	movs	r2, #0
 8004138:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	0018      	movs	r0, r3
 8004140:	f000 fa58 	bl	80045f4 <RTC_ByteToBcd2>
 8004144:	0003      	movs	r3, r0
 8004146:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	0018      	movs	r0, r3
 800414e:	f000 fa51 	bl	80045f4 <RTC_ByteToBcd2>
 8004152:	0003      	movs	r3, r0
 8004154:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004156:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	789b      	ldrb	r3, [r3, #2]
 800415c:	0018      	movs	r0, r3
 800415e:	f000 fa49 	bl	80045f4 <RTC_ByteToBcd2>
 8004162:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004164:	0022      	movs	r2, r4
 8004166:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	78db      	ldrb	r3, [r3, #3]
 800416c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	e017      	b.n	80041a4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2240      	movs	r2, #64	; 0x40
 800417c:	4013      	ands	r3, r2
 800417e:	d102      	bne.n	8004186 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2200      	movs	r2, #0
 8004184:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	785b      	ldrb	r3, [r3, #1]
 8004190:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004192:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004198:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	78db      	ldrb	r3, [r3, #3]
 800419e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	491b      	ldr	r1, [pc, #108]	; (8004218 <HAL_RTC_SetTime+0x148>)
 80041ac:	400a      	ands	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4918      	ldr	r1, [pc, #96]	; (800421c <HAL_RTC_SetTime+0x14c>)
 80041bc:	400a      	ands	r2, r1
 80041be:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6999      	ldr	r1, [r3, #24]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041d8:	2313      	movs	r3, #19
 80041da:	18fc      	adds	r4, r7, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	0018      	movs	r0, r3
 80041e0:	f000 f9c4 	bl	800456c <RTC_ExitInitMode>
 80041e4:	0003      	movs	r3, r0
 80041e6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	22ff      	movs	r2, #255	; 0xff
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80041f0:	2313      	movs	r3, #19
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2229      	movs	r2, #41	; 0x29
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2228      	movs	r2, #40	; 0x28
 8004206:	2100      	movs	r1, #0
 8004208:	5499      	strb	r1, [r3, r2]

  return status;
 800420a:	2313      	movs	r3, #19
 800420c:	18fb      	adds	r3, r7, r3
 800420e:	781b      	ldrb	r3, [r3, #0]
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	b006      	add	sp, #24
 8004216:	bdb0      	pop	{r4, r5, r7, pc}
 8004218:	007f7f7f 	.word	0x007f7f7f
 800421c:	fffbffff 	.word	0xfffbffff

08004220 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	045b      	lsls	r3, r3, #17
 800423e:	0c5a      	lsrs	r2, r3, #17
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a22      	ldr	r2, [pc, #136]	; (80042d4 <HAL_RTC_GetTime+0xb4>)
 800424c:	4013      	ands	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	b2db      	uxtb	r3, r3
 8004256:	223f      	movs	r2, #63	; 0x3f
 8004258:	4013      	ands	r3, r2
 800425a:	b2da      	uxtb	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	0a1b      	lsrs	r3, r3, #8
 8004264:	b2db      	uxtb	r3, r3
 8004266:	227f      	movs	r2, #127	; 0x7f
 8004268:	4013      	ands	r3, r2
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	227f      	movs	r2, #127	; 0x7f
 8004276:	4013      	ands	r3, r2
 8004278:	b2da      	uxtb	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	0d9b      	lsrs	r3, r3, #22
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2201      	movs	r2, #1
 8004286:	4013      	ands	r3, r2
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d11a      	bne.n	80042ca <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	0018      	movs	r0, r3
 800429a:	f000 f9d3 	bl	8004644 <RTC_Bcd2ToByte>
 800429e:	0003      	movs	r3, r0
 80042a0:	001a      	movs	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	785b      	ldrb	r3, [r3, #1]
 80042aa:	0018      	movs	r0, r3
 80042ac:	f000 f9ca 	bl	8004644 <RTC_Bcd2ToByte>
 80042b0:	0003      	movs	r3, r0
 80042b2:	001a      	movs	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	789b      	ldrb	r3, [r3, #2]
 80042bc:	0018      	movs	r0, r3
 80042be:	f000 f9c1 	bl	8004644 <RTC_Bcd2ToByte>
 80042c2:	0003      	movs	r3, r0
 80042c4:	001a      	movs	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	0018      	movs	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b006      	add	sp, #24
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	007f7f7f 	.word	0x007f7f7f

080042d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042d8:	b5b0      	push	{r4, r5, r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2228      	movs	r2, #40	; 0x28
 80042e8:	5c9b      	ldrb	r3, [r3, r2]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_RTC_SetDate+0x1a>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e07e      	b.n	80043f0 <HAL_RTC_SetDate+0x118>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2228      	movs	r2, #40	; 0x28
 80042f6:	2101      	movs	r1, #1
 80042f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2229      	movs	r2, #41	; 0x29
 80042fe:	2102      	movs	r1, #2
 8004300:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10e      	bne.n	8004326 <HAL_RTC_SetDate+0x4e>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	785b      	ldrb	r3, [r3, #1]
 800430c:	001a      	movs	r2, r3
 800430e:	2310      	movs	r3, #16
 8004310:	4013      	ands	r3, r2
 8004312:	d008      	beq.n	8004326 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	2210      	movs	r2, #16
 800431a:	4393      	bics	r3, r2
 800431c:	b2db      	uxtb	r3, r3
 800431e:	330a      	adds	r3, #10
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11c      	bne.n	8004366 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	78db      	ldrb	r3, [r3, #3]
 8004330:	0018      	movs	r0, r3
 8004332:	f000 f95f 	bl	80045f4 <RTC_ByteToBcd2>
 8004336:	0003      	movs	r3, r0
 8004338:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	785b      	ldrb	r3, [r3, #1]
 800433e:	0018      	movs	r0, r3
 8004340:	f000 f958 	bl	80045f4 <RTC_ByteToBcd2>
 8004344:	0003      	movs	r3, r0
 8004346:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004348:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	789b      	ldrb	r3, [r3, #2]
 800434e:	0018      	movs	r0, r3
 8004350:	f000 f950 	bl	80045f4 <RTC_ByteToBcd2>
 8004354:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004356:	0022      	movs	r2, r4
 8004358:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e00e      	b.n	8004384 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	78db      	ldrb	r3, [r3, #3]
 800436a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	785b      	ldrb	r3, [r3, #1]
 8004370:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004372:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004378:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	22ca      	movs	r2, #202	; 0xca
 800438a:	625a      	str	r2, [r3, #36]	; 0x24
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2253      	movs	r2, #83	; 0x53
 8004392:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004394:	2513      	movs	r5, #19
 8004396:	197c      	adds	r4, r7, r5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	0018      	movs	r0, r3
 800439c:	f000 f8a3 	bl	80044e6 <RTC_EnterInitMode>
 80043a0:	0003      	movs	r3, r0
 80043a2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80043a4:	0028      	movs	r0, r5
 80043a6:	183b      	adds	r3, r7, r0
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10c      	bne.n	80043c8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	4910      	ldr	r1, [pc, #64]	; (80043f8 <HAL_RTC_SetDate+0x120>)
 80043b6:	400a      	ands	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043ba:	183c      	adds	r4, r7, r0
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	0018      	movs	r0, r3
 80043c0:	f000 f8d4 	bl	800456c <RTC_ExitInitMode>
 80043c4:	0003      	movs	r3, r0
 80043c6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	22ff      	movs	r2, #255	; 0xff
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80043d0:	2313      	movs	r3, #19
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2229      	movs	r2, #41	; 0x29
 80043de:	2101      	movs	r1, #1
 80043e0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2228      	movs	r2, #40	; 0x28
 80043e6:	2100      	movs	r1, #0
 80043e8:	5499      	strb	r1, [r3, r2]

  return status;
 80043ea:	2313      	movs	r3, #19
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	781b      	ldrb	r3, [r3, #0]
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b006      	add	sp, #24
 80043f6:	bdb0      	pop	{r4, r5, r7, pc}
 80043f8:	00ffff3f 	.word	0x00ffff3f

080043fc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	4a21      	ldr	r2, [pc, #132]	; (8004494 <HAL_RTC_GetDate+0x98>)
 8004410:	4013      	ands	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	0c1b      	lsrs	r3, r3, #16
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	0a1b      	lsrs	r3, r3, #8
 8004422:	b2db      	uxtb	r3, r3
 8004424:	221f      	movs	r2, #31
 8004426:	4013      	ands	r3, r2
 8004428:	b2da      	uxtb	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	223f      	movs	r2, #63	; 0x3f
 8004434:	4013      	ands	r3, r2
 8004436:	b2da      	uxtb	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	0b5b      	lsrs	r3, r3, #13
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2207      	movs	r2, #7
 8004444:	4013      	ands	r3, r2
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d11a      	bne.n	8004488 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	78db      	ldrb	r3, [r3, #3]
 8004456:	0018      	movs	r0, r3
 8004458:	f000 f8f4 	bl	8004644 <RTC_Bcd2ToByte>
 800445c:	0003      	movs	r3, r0
 800445e:	001a      	movs	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	0018      	movs	r0, r3
 800446a:	f000 f8eb 	bl	8004644 <RTC_Bcd2ToByte>
 800446e:	0003      	movs	r3, r0
 8004470:	001a      	movs	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	789b      	ldrb	r3, [r3, #2]
 800447a:	0018      	movs	r0, r3
 800447c:	f000 f8e2 	bl	8004644 <RTC_Bcd2ToByte>
 8004480:	0003      	movs	r3, r0
 8004482:	001a      	movs	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b006      	add	sp, #24
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	00ffff3f 	.word	0x00ffff3f

08004498 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	21a0      	movs	r1, #160	; 0xa0
 80044ac:	438a      	bics	r2, r1
 80044ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80044b0:	f7fe fb6e 	bl	8002b90 <HAL_GetTick>
 80044b4:	0003      	movs	r3, r0
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80044b8:	e00a      	b.n	80044d0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80044ba:	f7fe fb69 	bl	8002b90 <HAL_GetTick>
 80044be:	0002      	movs	r2, r0
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1ad2      	subs	r2, r2, r3
 80044c4:	23fa      	movs	r3, #250	; 0xfa
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d901      	bls.n	80044d0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e006      	b.n	80044de <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	4013      	ands	r3, r2
 80044da:	d0ee      	beq.n	80044ba <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b004      	add	sp, #16
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80044ee:	230f      	movs	r3, #15
 80044f0:	18fb      	adds	r3, r7, r3
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2240      	movs	r2, #64	; 0x40
 80044fe:	4013      	ands	r3, r2
 8004500:	d12c      	bne.n	800455c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2180      	movs	r1, #128	; 0x80
 800450e:	430a      	orrs	r2, r1
 8004510:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004512:	f7fe fb3d 	bl	8002b90 <HAL_GetTick>
 8004516:	0003      	movs	r3, r0
 8004518:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800451a:	e014      	b.n	8004546 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800451c:	f7fe fb38 	bl	8002b90 <HAL_GetTick>
 8004520:	0002      	movs	r2, r0
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	1ad2      	subs	r2, r2, r3
 8004526:	200f      	movs	r0, #15
 8004528:	183b      	adds	r3, r7, r0
 800452a:	1839      	adds	r1, r7, r0
 800452c:	7809      	ldrb	r1, [r1, #0]
 800452e:	7019      	strb	r1, [r3, #0]
 8004530:	23fa      	movs	r3, #250	; 0xfa
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	429a      	cmp	r2, r3
 8004536:	d906      	bls.n	8004546 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004538:	183b      	adds	r3, r7, r0
 800453a:	2203      	movs	r2, #3
 800453c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2229      	movs	r2, #41	; 0x29
 8004542:	2103      	movs	r1, #3
 8004544:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2240      	movs	r2, #64	; 0x40
 800454e:	4013      	ands	r3, r2
 8004550:	d104      	bne.n	800455c <RTC_EnterInitMode+0x76>
 8004552:	230f      	movs	r3, #15
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d1df      	bne.n	800451c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800455c:	230f      	movs	r3, #15
 800455e:	18fb      	adds	r3, r7, r3
 8004560:	781b      	ldrb	r3, [r3, #0]
}
 8004562:	0018      	movs	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	b004      	add	sp, #16
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	240f      	movs	r4, #15
 8004576:	193b      	adds	r3, r7, r4
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800457c:	4b1c      	ldr	r3, [pc, #112]	; (80045f0 <RTC_ExitInitMode+0x84>)
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <RTC_ExitInitMode+0x84>)
 8004582:	2180      	movs	r1, #128	; 0x80
 8004584:	438a      	bics	r2, r1
 8004586:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004588:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <RTC_ExitInitMode+0x84>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2220      	movs	r2, #32
 800458e:	4013      	ands	r3, r2
 8004590:	d10d      	bne.n	80045ae <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0018      	movs	r0, r3
 8004596:	f7ff ff7f 	bl	8004498 <HAL_RTC_WaitForSynchro>
 800459a:	1e03      	subs	r3, r0, #0
 800459c:	d021      	beq.n	80045e2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2229      	movs	r2, #41	; 0x29
 80045a2:	2103      	movs	r1, #3
 80045a4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80045a6:	193b      	adds	r3, r7, r4
 80045a8:	2203      	movs	r2, #3
 80045aa:	701a      	strb	r2, [r3, #0]
 80045ac:	e019      	b.n	80045e2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80045ae:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <RTC_ExitInitMode+0x84>)
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <RTC_ExitInitMode+0x84>)
 80045b4:	2120      	movs	r1, #32
 80045b6:	438a      	bics	r2, r1
 80045b8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0018      	movs	r0, r3
 80045be:	f7ff ff6b 	bl	8004498 <HAL_RTC_WaitForSynchro>
 80045c2:	1e03      	subs	r3, r0, #0
 80045c4:	d007      	beq.n	80045d6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2229      	movs	r2, #41	; 0x29
 80045ca:	2103      	movs	r1, #3
 80045cc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80045ce:	230f      	movs	r3, #15
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	2203      	movs	r2, #3
 80045d4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <RTC_ExitInitMode+0x84>)
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <RTC_ExitInitMode+0x84>)
 80045dc:	2120      	movs	r1, #32
 80045de:	430a      	orrs	r2, r1
 80045e0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80045e2:	230f      	movs	r3, #15
 80045e4:	18fb      	adds	r3, r7, r3
 80045e6:	781b      	ldrb	r3, [r3, #0]
}
 80045e8:	0018      	movs	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b005      	add	sp, #20
 80045ee:	bd90      	pop	{r4, r7, pc}
 80045f0:	40002800 	.word	0x40002800

080045f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	0002      	movs	r2, r0
 80045fc:	1dfb      	adds	r3, r7, #7
 80045fe:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004604:	230b      	movs	r3, #11
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	1dfa      	adds	r2, r7, #7
 800460a:	7812      	ldrb	r2, [r2, #0]
 800460c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800460e:	e008      	b.n	8004622 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3301      	adds	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004616:	220b      	movs	r2, #11
 8004618:	18bb      	adds	r3, r7, r2
 800461a:	18ba      	adds	r2, r7, r2
 800461c:	7812      	ldrb	r2, [r2, #0]
 800461e:	3a0a      	subs	r2, #10
 8004620:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004622:	210b      	movs	r1, #11
 8004624:	187b      	adds	r3, r7, r1
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b09      	cmp	r3, #9
 800462a:	d8f1      	bhi.n	8004610 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	b2da      	uxtb	r2, r3
 8004634:	187b      	adds	r3, r7, r1
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	4313      	orrs	r3, r2
 800463a:	b2db      	uxtb	r3, r3
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b004      	add	sp, #16
 8004642:	bd80      	pop	{r7, pc}

08004644 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	0002      	movs	r2, r0
 800464c:	1dfb      	adds	r3, r7, #7
 800464e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004650:	1dfb      	adds	r3, r7, #7
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	b2db      	uxtb	r3, r3
 8004658:	001a      	movs	r2, r3
 800465a:	0013      	movs	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	189b      	adds	r3, r3, r2
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	1dfb      	adds	r3, r7, #7
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	210f      	movs	r1, #15
 800466e:	400b      	ands	r3, r1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	18d3      	adds	r3, r2, r3
 8004674:	b2db      	uxtb	r3, r3
}
 8004676:	0018      	movs	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	b004      	add	sp, #16
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e04a      	b.n	8004726 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	223d      	movs	r2, #61	; 0x3d
 8004694:	5c9b      	ldrb	r3, [r3, r2]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d107      	bne.n	80046ac <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	223c      	movs	r2, #60	; 0x3c
 80046a0:	2100      	movs	r1, #0
 80046a2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	0018      	movs	r0, r3
 80046a8:	f7fe f814 	bl	80026d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	223d      	movs	r2, #61	; 0x3d
 80046b0:	2102      	movs	r1, #2
 80046b2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	0019      	movs	r1, r3
 80046be:	0010      	movs	r0, r2
 80046c0:	f000 faa2 	bl	8004c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2248      	movs	r2, #72	; 0x48
 80046c8:	2101      	movs	r1, #1
 80046ca:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	223e      	movs	r2, #62	; 0x3e
 80046d0:	2101      	movs	r1, #1
 80046d2:	5499      	strb	r1, [r3, r2]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	223f      	movs	r2, #63	; 0x3f
 80046d8:	2101      	movs	r1, #1
 80046da:	5499      	strb	r1, [r3, r2]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2240      	movs	r2, #64	; 0x40
 80046e0:	2101      	movs	r1, #1
 80046e2:	5499      	strb	r1, [r3, r2]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2241      	movs	r2, #65	; 0x41
 80046e8:	2101      	movs	r1, #1
 80046ea:	5499      	strb	r1, [r3, r2]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2242      	movs	r2, #66	; 0x42
 80046f0:	2101      	movs	r1, #1
 80046f2:	5499      	strb	r1, [r3, r2]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2243      	movs	r2, #67	; 0x43
 80046f8:	2101      	movs	r1, #1
 80046fa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2244      	movs	r2, #68	; 0x44
 8004700:	2101      	movs	r1, #1
 8004702:	5499      	strb	r1, [r3, r2]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2245      	movs	r2, #69	; 0x45
 8004708:	2101      	movs	r1, #1
 800470a:	5499      	strb	r1, [r3, r2]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2246      	movs	r2, #70	; 0x46
 8004710:	2101      	movs	r1, #1
 8004712:	5499      	strb	r1, [r3, r2]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2247      	movs	r2, #71	; 0x47
 8004718:	2101      	movs	r1, #1
 800471a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	223d      	movs	r2, #61	; 0x3d
 8004720:	2101      	movs	r1, #1
 8004722:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	0018      	movs	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	b002      	add	sp, #8
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	223d      	movs	r2, #61	; 0x3d
 800473c:	5c9b      	ldrb	r3, [r3, r2]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d001      	beq.n	8004748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e037      	b.n	80047b8 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	223d      	movs	r2, #61	; 0x3d
 800474c:	2102      	movs	r1, #2
 800474e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2101      	movs	r1, #1
 800475c:	430a      	orrs	r2, r1
 800475e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <HAL_TIM_Base_Start_IT+0x90>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <HAL_TIM_Base_Start_IT+0x44>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <HAL_TIM_Base_Start_IT+0x94>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d116      	bne.n	80047a2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <HAL_TIM_Base_Start_IT+0x98>)
 800477c:	4013      	ands	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b06      	cmp	r3, #6
 8004784:	d016      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x84>
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	025b      	lsls	r3, r3, #9
 800478c:	429a      	cmp	r2, r3
 800478e:	d011      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2101      	movs	r1, #1
 800479c:	430a      	orrs	r2, r1
 800479e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a0:	e008      	b.n	80047b4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2101      	movs	r1, #1
 80047ae:	430a      	orrs	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e000      	b.n	80047b6 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	0018      	movs	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b004      	add	sp, #16
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40000400 	.word	0x40000400
 80047c8:	00010007 	.word	0x00010007

080047cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2202      	movs	r2, #2
 80047dc:	4013      	ands	r3, r2
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d124      	bne.n	800482c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2202      	movs	r2, #2
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d11d      	bne.n	800482c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2203      	movs	r2, #3
 80047f6:	4252      	negs	r2, r2
 80047f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2203      	movs	r2, #3
 8004808:	4013      	ands	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	0018      	movs	r0, r3
 8004810:	f000 f9e2 	bl	8004bd8 <HAL_TIM_IC_CaptureCallback>
 8004814:	e007      	b.n	8004826 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0018      	movs	r0, r3
 800481a:	f000 f9d5 	bl	8004bc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f000 f9e1 	bl	8004be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2204      	movs	r2, #4
 8004834:	4013      	ands	r3, r2
 8004836:	2b04      	cmp	r3, #4
 8004838:	d125      	bne.n	8004886 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2204      	movs	r2, #4
 8004842:	4013      	ands	r3, r2
 8004844:	2b04      	cmp	r3, #4
 8004846:	d11e      	bne.n	8004886 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2205      	movs	r2, #5
 800484e:	4252      	negs	r2, r2
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	23c0      	movs	r3, #192	; 0xc0
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4013      	ands	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0018      	movs	r0, r3
 800486a:	f000 f9b5 	bl	8004bd8 <HAL_TIM_IC_CaptureCallback>
 800486e:	e007      	b.n	8004880 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	0018      	movs	r0, r3
 8004874:	f000 f9a8 	bl	8004bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	0018      	movs	r0, r3
 800487c:	f000 f9b4 	bl	8004be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2208      	movs	r2, #8
 800488e:	4013      	ands	r3, r2
 8004890:	2b08      	cmp	r3, #8
 8004892:	d124      	bne.n	80048de <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2208      	movs	r2, #8
 800489c:	4013      	ands	r3, r2
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d11d      	bne.n	80048de <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2209      	movs	r2, #9
 80048a8:	4252      	negs	r2, r2
 80048aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2204      	movs	r2, #4
 80048b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	2203      	movs	r2, #3
 80048ba:	4013      	ands	r3, r2
 80048bc:	d004      	beq.n	80048c8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f000 f989 	bl	8004bd8 <HAL_TIM_IC_CaptureCallback>
 80048c6:	e007      	b.n	80048d8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 f97c 	bl	8004bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	0018      	movs	r0, r3
 80048d4:	f000 f988 	bl	8004be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2210      	movs	r2, #16
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d125      	bne.n	8004938 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2210      	movs	r2, #16
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b10      	cmp	r3, #16
 80048f8:	d11e      	bne.n	8004938 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2211      	movs	r2, #17
 8004900:	4252      	negs	r2, r2
 8004902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2208      	movs	r2, #8
 8004908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	23c0      	movs	r3, #192	; 0xc0
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4013      	ands	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	0018      	movs	r0, r3
 800491c:	f000 f95c 	bl	8004bd8 <HAL_TIM_IC_CaptureCallback>
 8004920:	e007      	b.n	8004932 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f94f 	bl	8004bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0018      	movs	r0, r3
 800492e:	f000 f95b 	bl	8004be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2201      	movs	r2, #1
 8004940:	4013      	ands	r3, r2
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10f      	bne.n	8004966 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	4013      	ands	r3, r2
 8004950:	2b01      	cmp	r3, #1
 8004952:	d108      	bne.n	8004966 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2202      	movs	r2, #2
 800495a:	4252      	negs	r2, r2
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	0018      	movs	r0, r3
 8004962:	f7fd fe27 	bl	80025b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	2280      	movs	r2, #128	; 0x80
 800496e:	4013      	ands	r3, r2
 8004970:	2b80      	cmp	r3, #128	; 0x80
 8004972:	d10f      	bne.n	8004994 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2280      	movs	r2, #128	; 0x80
 800497c:	4013      	ands	r3, r2
 800497e:	2b80      	cmp	r3, #128	; 0x80
 8004980:	d108      	bne.n	8004994 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2281      	movs	r2, #129	; 0x81
 8004988:	4252      	negs	r2, r2
 800498a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	0018      	movs	r0, r3
 8004990:	f000 faac 	bl	8004eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	401a      	ands	r2, r3
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d10e      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2280      	movs	r2, #128	; 0x80
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d107      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1c      	ldr	r2, [pc, #112]	; (8004a2c <HAL_TIM_IRQHandler+0x260>)
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f000 fa9b 	bl	8004efc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2240      	movs	r2, #64	; 0x40
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d10f      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2240      	movs	r2, #64	; 0x40
 80049dc:	4013      	ands	r3, r2
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d108      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2241      	movs	r2, #65	; 0x41
 80049e8:	4252      	negs	r2, r2
 80049ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 f902 	bl	8004bf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2220      	movs	r2, #32
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d10f      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d108      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2221      	movs	r2, #33	; 0x21
 8004a16:	4252      	negs	r2, r2
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f000 fa5d 	bl	8004edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b002      	add	sp, #8
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	fffffeff 	.word	0xfffffeff

08004a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	223c      	movs	r2, #60	; 0x3c
 8004a3e:	5c9b      	ldrb	r3, [r3, r2]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_TIM_ConfigClockSource+0x18>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e0b7      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x188>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	223c      	movs	r2, #60	; 0x3c
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	223d      	movs	r2, #61	; 0x3d
 8004a54:	2102      	movs	r1, #2
 8004a56:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4a57      	ldr	r2, [pc, #348]	; (8004bc0 <HAL_TIM_ConfigClockSource+0x190>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a56      	ldr	r2, [pc, #344]	; (8004bc4 <HAL_TIM_ConfigClockSource+0x194>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2280      	movs	r2, #128	; 0x80
 8004a7e:	0192      	lsls	r2, r2, #6
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d040      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0xd6>
 8004a84:	2280      	movs	r2, #128	; 0x80
 8004a86:	0192      	lsls	r2, r2, #6
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d900      	bls.n	8004a8e <HAL_TIM_ConfigClockSource+0x5e>
 8004a8c:	e088      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x170>
 8004a8e:	2280      	movs	r2, #128	; 0x80
 8004a90:	0152      	lsls	r2, r2, #5
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d100      	bne.n	8004a98 <HAL_TIM_ConfigClockSource+0x68>
 8004a96:	e085      	b.n	8004ba4 <HAL_TIM_ConfigClockSource+0x174>
 8004a98:	2280      	movs	r2, #128	; 0x80
 8004a9a:	0152      	lsls	r2, r2, #5
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d900      	bls.n	8004aa2 <HAL_TIM_ConfigClockSource+0x72>
 8004aa0:	e07e      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x170>
 8004aa2:	2b70      	cmp	r3, #112	; 0x70
 8004aa4:	d018      	beq.n	8004ad8 <HAL_TIM_ConfigClockSource+0xa8>
 8004aa6:	d900      	bls.n	8004aaa <HAL_TIM_ConfigClockSource+0x7a>
 8004aa8:	e07a      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x170>
 8004aaa:	2b60      	cmp	r3, #96	; 0x60
 8004aac:	d04f      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x11e>
 8004aae:	d900      	bls.n	8004ab2 <HAL_TIM_ConfigClockSource+0x82>
 8004ab0:	e076      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x170>
 8004ab2:	2b50      	cmp	r3, #80	; 0x50
 8004ab4:	d03b      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0xfe>
 8004ab6:	d900      	bls.n	8004aba <HAL_TIM_ConfigClockSource+0x8a>
 8004ab8:	e072      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x170>
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d057      	beq.n	8004b6e <HAL_TIM_ConfigClockSource+0x13e>
 8004abe:	d900      	bls.n	8004ac2 <HAL_TIM_ConfigClockSource+0x92>
 8004ac0:	e06e      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x170>
 8004ac2:	2b30      	cmp	r3, #48	; 0x30
 8004ac4:	d063      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x15e>
 8004ac6:	d86b      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x170>
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d060      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x15e>
 8004acc:	d868      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x170>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d05d      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x15e>
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d05b      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ad6:	e063      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	6899      	ldr	r1, [r3, #8]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f000 f976 	bl	8004dd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2277      	movs	r2, #119	; 0x77
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	609a      	str	r2, [r3, #8]
      break;
 8004b04:	e04f      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6899      	ldr	r1, [r3, #8]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f000 f95f 	bl	8004dd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2180      	movs	r1, #128	; 0x80
 8004b26:	01c9      	lsls	r1, r1, #7
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	609a      	str	r2, [r3, #8]
      break;
 8004b2c:	e03b      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6859      	ldr	r1, [r3, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	001a      	movs	r2, r3
 8004b3c:	f000 f8d0 	bl	8004ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2150      	movs	r1, #80	; 0x50
 8004b46:	0018      	movs	r0, r3
 8004b48:	f000 f92a 	bl	8004da0 <TIM_ITRx_SetConfig>
      break;
 8004b4c:	e02b      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6859      	ldr	r1, [r3, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	001a      	movs	r2, r3
 8004b5c:	f000 f8ee 	bl	8004d3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2160      	movs	r1, #96	; 0x60
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 f91a 	bl	8004da0 <TIM_ITRx_SetConfig>
      break;
 8004b6c:	e01b      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6859      	ldr	r1, [r3, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	001a      	movs	r2, r3
 8004b7c:	f000 f8b0 	bl	8004ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2140      	movs	r1, #64	; 0x40
 8004b86:	0018      	movs	r0, r3
 8004b88:	f000 f90a 	bl	8004da0 <TIM_ITRx_SetConfig>
      break;
 8004b8c:	e00b      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	0019      	movs	r1, r3
 8004b98:	0010      	movs	r0, r2
 8004b9a:	f000 f901 	bl	8004da0 <TIM_ITRx_SetConfig>
        break;
 8004b9e:	e002      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	e000      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004ba4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	223d      	movs	r2, #61	; 0x3d
 8004baa:	2101      	movs	r1, #1
 8004bac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	223c      	movs	r2, #60	; 0x3c
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	0018      	movs	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b004      	add	sp, #16
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	ffceff88 	.word	0xffceff88
 8004bc4:	ffff00ff 	.word	0xffff00ff

08004bc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bd0:	46c0      	nop			; (mov r8, r8)
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b002      	add	sp, #8
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004be0:	46c0      	nop			; (mov r8, r8)
 8004be2:	46bd      	mov	sp, r7
 8004be4:	b002      	add	sp, #8
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c00:	46c0      	nop			; (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a2b      	ldr	r2, [pc, #172]	; (8004cc8 <TIM_Base_SetConfig+0xc0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_Base_SetConfig+0x20>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <TIM_Base_SetConfig+0xc4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d108      	bne.n	8004c3a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2270      	movs	r2, #112	; 0x70
 8004c2c:	4393      	bics	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a22      	ldr	r2, [pc, #136]	; (8004cc8 <TIM_Base_SetConfig+0xc0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00f      	beq.n	8004c62 <TIM_Base_SetConfig+0x5a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a21      	ldr	r2, [pc, #132]	; (8004ccc <TIM_Base_SetConfig+0xc4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00b      	beq.n	8004c62 <TIM_Base_SetConfig+0x5a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a20      	ldr	r2, [pc, #128]	; (8004cd0 <TIM_Base_SetConfig+0xc8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d007      	beq.n	8004c62 <TIM_Base_SetConfig+0x5a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a1f      	ldr	r2, [pc, #124]	; (8004cd4 <TIM_Base_SetConfig+0xcc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_Base_SetConfig+0x5a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a1e      	ldr	r2, [pc, #120]	; (8004cd8 <TIM_Base_SetConfig+0xd0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d108      	bne.n	8004c74 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <TIM_Base_SetConfig+0xd4>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2280      	movs	r2, #128	; 0x80
 8004c78:	4393      	bics	r3, r2
 8004c7a:	001a      	movs	r2, r3
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <TIM_Base_SetConfig+0xc0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_Base_SetConfig+0xaa>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a0b      	ldr	r2, [pc, #44]	; (8004cd4 <TIM_Base_SetConfig+0xcc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_Base_SetConfig+0xaa>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <TIM_Base_SetConfig+0xd0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d103      	bne.n	8004cba <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	615a      	str	r2, [r3, #20]
}
 8004cc0:	46c0      	nop			; (mov r8, r8)
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b004      	add	sp, #16
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40002000 	.word	0x40002000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800
 8004cdc:	fffffcff 	.word	0xfffffcff

08004ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	4393      	bics	r3, r2
 8004cfa:	001a      	movs	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	22f0      	movs	r2, #240	; 0xf0
 8004d0a:	4393      	bics	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	220a      	movs	r2, #10
 8004d1c:	4393      	bics	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b006      	add	sp, #24
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	4393      	bics	r3, r2
 8004d50:	001a      	movs	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	4a0d      	ldr	r2, [pc, #52]	; (8004d9c <TIM_TI2_ConfigInputStage+0x60>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	031b      	lsls	r3, r3, #12
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	22a0      	movs	r2, #160	; 0xa0
 8004d78:	4393      	bics	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b006      	add	sp, #24
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	ffff0fff 	.word	0xffff0fff

08004da0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <TIM_ITRx_SetConfig+0x34>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	2207      	movs	r2, #7
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	609a      	str	r2, [r3, #8]
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b004      	add	sp, #16
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	ffcfff8f 	.word	0xffcfff8f

08004dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <TIM_ETR_SetConfig+0x3c>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	021a      	lsls	r2, r3, #8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	46c0      	nop			; (mov r8, r8)
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b006      	add	sp, #24
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	ffff00ff 	.word	0xffff00ff

08004e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	223c      	movs	r2, #60	; 0x3c
 8004e26:	5c9b      	ldrb	r3, [r3, r2]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e04a      	b.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	223c      	movs	r2, #60	; 0x3c
 8004e34:	2101      	movs	r1, #1
 8004e36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	223d      	movs	r2, #61	; 0x3d
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d108      	bne.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2270      	movs	r2, #112	; 0x70
 8004e70:	4393      	bics	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a11      	ldr	r2, [pc, #68]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d004      	beq.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a10      	ldr	r2, [pc, #64]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d10c      	bne.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2280      	movs	r2, #128	; 0x80
 8004e9e:	4393      	bics	r3, r2
 8004ea0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	223d      	movs	r2, #61	; 0x3d
 8004eb8:	2101      	movs	r1, #1
 8004eba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	223c      	movs	r2, #60	; 0x3c
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	b004      	add	sp, #16
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	ff0fffff 	.word	0xff0fffff
 8004ed8:	40000400 	.word	0x40000400

08004edc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ee4:	46c0      	nop			; (mov r8, r8)
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b002      	add	sp, #8
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b002      	add	sp, #8
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e046      	b.n	8004fac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2284      	movs	r2, #132	; 0x84
 8004f22:	589b      	ldr	r3, [r3, r2]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d107      	bne.n	8004f38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2280      	movs	r2, #128	; 0x80
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	0018      	movs	r0, r3
 8004f34:	f7fd fbf4 	bl	8002720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2284      	movs	r2, #132	; 0x84
 8004f3c:	2124      	movs	r1, #36	; 0x24
 8004f3e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	438a      	bics	r2, r1
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 fd04 	bl	8005960 <UART_SetConfig>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e024      	b.n	8004fac <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f000 fe61 	bl	8005c34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	490d      	ldr	r1, [pc, #52]	; (8004fb4 <HAL_UART_Init+0xa8>)
 8004f7e:	400a      	ands	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	212a      	movs	r1, #42	; 0x2a
 8004f8e:	438a      	bics	r2, r1
 8004f90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f000 fef9 	bl	8005d9c <UART_CheckIdleState>
 8004faa:	0003      	movs	r3, r0
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b002      	add	sp, #8
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	ffffb7ff 	.word	0xffffb7ff

08004fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08a      	sub	sp, #40	; 0x28
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	1dbb      	adds	r3, r7, #6
 8004fc6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2284      	movs	r2, #132	; 0x84
 8004fcc:	589b      	ldr	r3, [r3, r2]
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d000      	beq.n	8004fd4 <HAL_UART_Transmit+0x1c>
 8004fd2:	e097      	b.n	8005104 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_UART_Transmit+0x2a>
 8004fda:	1dbb      	adds	r3, r7, #6
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e08f      	b.n	8005106 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	2380      	movs	r3, #128	; 0x80
 8004fec:	015b      	lsls	r3, r3, #5
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d109      	bne.n	8005006 <HAL_UART_Transmit+0x4e>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d105      	bne.n	8005006 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	4013      	ands	r3, r2
 8005000:	d001      	beq.n	8005006 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e07f      	b.n	8005106 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2280      	movs	r2, #128	; 0x80
 800500a:	5c9b      	ldrb	r3, [r3, r2]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_UART_Transmit+0x5c>
 8005010:	2302      	movs	r3, #2
 8005012:	e078      	b.n	8005106 <HAL_UART_Transmit+0x14e>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2280      	movs	r2, #128	; 0x80
 8005018:	2101      	movs	r1, #1
 800501a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	228c      	movs	r2, #140	; 0x8c
 8005020:	2100      	movs	r1, #0
 8005022:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2284      	movs	r2, #132	; 0x84
 8005028:	2121      	movs	r1, #33	; 0x21
 800502a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800502c:	f7fd fdb0 	bl	8002b90 <HAL_GetTick>
 8005030:	0003      	movs	r3, r0
 8005032:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	1dba      	adds	r2, r7, #6
 8005038:	2154      	movs	r1, #84	; 0x54
 800503a:	8812      	ldrh	r2, [r2, #0]
 800503c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1dba      	adds	r2, r7, #6
 8005042:	2156      	movs	r1, #86	; 0x56
 8005044:	8812      	ldrh	r2, [r2, #0]
 8005046:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	2380      	movs	r3, #128	; 0x80
 800504e:	015b      	lsls	r3, r3, #5
 8005050:	429a      	cmp	r2, r3
 8005052:	d108      	bne.n	8005066 <HAL_UART_Transmit+0xae>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	e003      	b.n	800506e <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2280      	movs	r2, #128	; 0x80
 8005072:	2100      	movs	r1, #0
 8005074:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005076:	e02c      	b.n	80050d2 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	0013      	movs	r3, r2
 8005082:	2200      	movs	r2, #0
 8005084:	2180      	movs	r1, #128	; 0x80
 8005086:	f000 fed3 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 800508a:	1e03      	subs	r3, r0, #0
 800508c:	d001      	beq.n	8005092 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e039      	b.n	8005106 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10b      	bne.n	80050b0 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	001a      	movs	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	05d2      	lsls	r2, r2, #23
 80050a4:	0dd2      	lsrs	r2, r2, #23
 80050a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	3302      	adds	r3, #2
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e007      	b.n	80050c0 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3301      	adds	r3, #1
 80050be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2256      	movs	r2, #86	; 0x56
 80050c4:	5a9b      	ldrh	r3, [r3, r2]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b299      	uxth	r1, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2256      	movs	r2, #86	; 0x56
 80050d0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2256      	movs	r2, #86	; 0x56
 80050d6:	5a9b      	ldrh	r3, [r3, r2]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1cc      	bne.n	8005078 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	0013      	movs	r3, r2
 80050e8:	2200      	movs	r2, #0
 80050ea:	2140      	movs	r1, #64	; 0x40
 80050ec:	f000 fea0 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 80050f0:	1e03      	subs	r3, r0, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e006      	b.n	8005106 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2284      	movs	r2, #132	; 0x84
 80050fc:	2120      	movs	r1, #32
 80050fe:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	0018      	movs	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	b008      	add	sp, #32
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	1dbb      	adds	r3, r7, #6
 800511e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2288      	movs	r2, #136	; 0x88
 8005124:	589b      	ldr	r3, [r3, r2]
 8005126:	2b20      	cmp	r3, #32
 8005128:	d000      	beq.n	800512c <HAL_UART_Receive+0x1c>
 800512a:	e0db      	b.n	80052e4 <HAL_UART_Receive+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_UART_Receive+0x2a>
 8005132:	1dbb      	adds	r3, r7, #6
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e0d3      	b.n	80052e6 <HAL_UART_Receive+0x1d6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	2380      	movs	r3, #128	; 0x80
 8005144:	015b      	lsls	r3, r3, #5
 8005146:	429a      	cmp	r2, r3
 8005148:	d109      	bne.n	800515e <HAL_UART_Receive+0x4e>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d105      	bne.n	800515e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2201      	movs	r2, #1
 8005156:	4013      	ands	r3, r2
 8005158:	d001      	beq.n	800515e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e0c3      	b.n	80052e6 <HAL_UART_Receive+0x1d6>
      }
    }

    __HAL_LOCK(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2280      	movs	r2, #128	; 0x80
 8005162:	5c9b      	ldrb	r3, [r3, r2]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_UART_Receive+0x5c>
 8005168:	2302      	movs	r3, #2
 800516a:	e0bc      	b.n	80052e6 <HAL_UART_Receive+0x1d6>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2280      	movs	r2, #128	; 0x80
 8005170:	2101      	movs	r1, #1
 8005172:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	228c      	movs	r2, #140	; 0x8c
 8005178:	2100      	movs	r1, #0
 800517a:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2288      	movs	r2, #136	; 0x88
 8005180:	2122      	movs	r1, #34	; 0x22
 8005182:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800518a:	f7fd fd01 	bl	8002b90 <HAL_GetTick>
 800518e:	0003      	movs	r3, r0
 8005190:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1dba      	adds	r2, r7, #6
 8005196:	215c      	movs	r1, #92	; 0x5c
 8005198:	8812      	ldrh	r2, [r2, #0]
 800519a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1dba      	adds	r2, r7, #6
 80051a0:	215e      	movs	r1, #94	; 0x5e
 80051a2:	8812      	ldrh	r2, [r2, #0]
 80051a4:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	2380      	movs	r3, #128	; 0x80
 80051ac:	015b      	lsls	r3, r3, #5
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d10d      	bne.n	80051ce <HAL_UART_Receive+0xbe>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <HAL_UART_Receive+0xb4>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2260      	movs	r2, #96	; 0x60
 80051be:	494c      	ldr	r1, [pc, #304]	; (80052f0 <HAL_UART_Receive+0x1e0>)
 80051c0:	5299      	strh	r1, [r3, r2]
 80051c2:	e02e      	b.n	8005222 <HAL_UART_Receive+0x112>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2260      	movs	r2, #96	; 0x60
 80051c8:	21ff      	movs	r1, #255	; 0xff
 80051ca:	5299      	strh	r1, [r3, r2]
 80051cc:	e029      	b.n	8005222 <HAL_UART_Receive+0x112>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10d      	bne.n	80051f2 <HAL_UART_Receive+0xe2>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <HAL_UART_Receive+0xd8>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2260      	movs	r2, #96	; 0x60
 80051e2:	21ff      	movs	r1, #255	; 0xff
 80051e4:	5299      	strh	r1, [r3, r2]
 80051e6:	e01c      	b.n	8005222 <HAL_UART_Receive+0x112>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2260      	movs	r2, #96	; 0x60
 80051ec:	217f      	movs	r1, #127	; 0x7f
 80051ee:	5299      	strh	r1, [r3, r2]
 80051f0:	e017      	b.n	8005222 <HAL_UART_Receive+0x112>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	2380      	movs	r3, #128	; 0x80
 80051f8:	055b      	lsls	r3, r3, #21
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d10d      	bne.n	800521a <HAL_UART_Receive+0x10a>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d104      	bne.n	8005210 <HAL_UART_Receive+0x100>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2260      	movs	r2, #96	; 0x60
 800520a:	217f      	movs	r1, #127	; 0x7f
 800520c:	5299      	strh	r1, [r3, r2]
 800520e:	e008      	b.n	8005222 <HAL_UART_Receive+0x112>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2260      	movs	r2, #96	; 0x60
 8005214:	213f      	movs	r1, #63	; 0x3f
 8005216:	5299      	strh	r1, [r3, r2]
 8005218:	e003      	b.n	8005222 <HAL_UART_Receive+0x112>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2260      	movs	r2, #96	; 0x60
 800521e:	2100      	movs	r1, #0
 8005220:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005222:	2312      	movs	r3, #18
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	2160      	movs	r1, #96	; 0x60
 800522a:	5a52      	ldrh	r2, [r2, r1]
 800522c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	2380      	movs	r3, #128	; 0x80
 8005234:	015b      	lsls	r3, r3, #5
 8005236:	429a      	cmp	r2, r3
 8005238:	d108      	bne.n	800524c <HAL_UART_Receive+0x13c>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d104      	bne.n	800524c <HAL_UART_Receive+0x13c>
    {
      pdata8bits  = NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	e003      	b.n	8005254 <HAL_UART_Receive+0x144>
    }
    else
    {
      pdata8bits  = pData;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005250:	2300      	movs	r3, #0
 8005252:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2280      	movs	r2, #128	; 0x80
 8005258:	2100      	movs	r1, #0
 800525a:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800525c:	e036      	b.n	80052cc <HAL_UART_Receive+0x1bc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	0013      	movs	r3, r2
 8005268:	2200      	movs	r2, #0
 800526a:	2120      	movs	r1, #32
 800526c:	f000 fde0 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8005270:	1e03      	subs	r3, r0, #0
 8005272:	d001      	beq.n	8005278 <HAL_UART_Receive+0x168>
      {
        return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e036      	b.n	80052e6 <HAL_UART_Receive+0x1d6>
      }
      if (pdata8bits == NULL)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10e      	bne.n	800529c <HAL_UART_Receive+0x18c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	b29b      	uxth	r3, r3
 8005286:	2212      	movs	r2, #18
 8005288:	18ba      	adds	r2, r7, r2
 800528a:	8812      	ldrh	r2, [r2, #0]
 800528c:	4013      	ands	r3, r2
 800528e:	b29a      	uxth	r2, r3
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	3302      	adds	r3, #2
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e00e      	b.n	80052ba <HAL_UART_Receive+0x1aa>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2212      	movs	r2, #18
 80052a6:	18ba      	adds	r2, r7, r2
 80052a8:	8812      	ldrh	r2, [r2, #0]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	4013      	ands	r3, r2
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	3301      	adds	r3, #1
 80052b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	225e      	movs	r2, #94	; 0x5e
 80052be:	5a9b      	ldrh	r3, [r3, r2]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b299      	uxth	r1, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	225e      	movs	r2, #94	; 0x5e
 80052ca:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	225e      	movs	r2, #94	; 0x5e
 80052d0:	5a9b      	ldrh	r3, [r3, r2]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1c2      	bne.n	800525e <HAL_UART_Receive+0x14e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2288      	movs	r2, #136	; 0x88
 80052dc:	2120      	movs	r1, #32
 80052de:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e000      	b.n	80052e6 <HAL_UART_Receive+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 80052e4:	2302      	movs	r3, #2
  }
}
 80052e6:	0018      	movs	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b008      	add	sp, #32
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	000001ff 	.word	0x000001ff

080052f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052f4:	b5b0      	push	{r4, r5, r7, lr}
 80052f6:	b0aa      	sub	sp, #168	; 0xa8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	22a4      	movs	r2, #164	; 0xa4
 8005304:	18b9      	adds	r1, r7, r2
 8005306:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	20a0      	movs	r0, #160	; 0xa0
 8005310:	1839      	adds	r1, r7, r0
 8005312:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	249c      	movs	r4, #156	; 0x9c
 800531c:	1939      	adds	r1, r7, r4
 800531e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005320:	0011      	movs	r1, r2
 8005322:	18bb      	adds	r3, r7, r2
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4aa0      	ldr	r2, [pc, #640]	; (80055a8 <HAL_UART_IRQHandler+0x2b4>)
 8005328:	4013      	ands	r3, r2
 800532a:	2298      	movs	r2, #152	; 0x98
 800532c:	18bd      	adds	r5, r7, r2
 800532e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005330:	18bb      	adds	r3, r7, r2
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d11a      	bne.n	800536e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005338:	187b      	adds	r3, r7, r1
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2220      	movs	r2, #32
 800533e:	4013      	ands	r3, r2
 8005340:	d015      	beq.n	800536e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005342:	183b      	adds	r3, r7, r0
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2220      	movs	r2, #32
 8005348:	4013      	ands	r3, r2
 800534a:	d105      	bne.n	8005358 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800534c:	193b      	adds	r3, r7, r4
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	2380      	movs	r3, #128	; 0x80
 8005352:	055b      	lsls	r3, r3, #21
 8005354:	4013      	ands	r3, r2
 8005356:	d00a      	beq.n	800536e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535c:	2b00      	cmp	r3, #0
 800535e:	d100      	bne.n	8005362 <HAL_UART_IRQHandler+0x6e>
 8005360:	e2cf      	b.n	8005902 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	0010      	movs	r0, r2
 800536a:	4798      	blx	r3
      }
      return;
 800536c:	e2c9      	b.n	8005902 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800536e:	2398      	movs	r3, #152	; 0x98
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d100      	bne.n	800537a <HAL_UART_IRQHandler+0x86>
 8005378:	e11e      	b.n	80055b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800537a:	239c      	movs	r3, #156	; 0x9c
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a8a      	ldr	r2, [pc, #552]	; (80055ac <HAL_UART_IRQHandler+0x2b8>)
 8005382:	4013      	ands	r3, r2
 8005384:	d106      	bne.n	8005394 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005386:	23a0      	movs	r3, #160	; 0xa0
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a88      	ldr	r2, [pc, #544]	; (80055b0 <HAL_UART_IRQHandler+0x2bc>)
 800538e:	4013      	ands	r3, r2
 8005390:	d100      	bne.n	8005394 <HAL_UART_IRQHandler+0xa0>
 8005392:	e111      	b.n	80055b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005394:	23a4      	movs	r3, #164	; 0xa4
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2201      	movs	r2, #1
 800539c:	4013      	ands	r3, r2
 800539e:	d012      	beq.n	80053c6 <HAL_UART_IRQHandler+0xd2>
 80053a0:	23a0      	movs	r3, #160	; 0xa0
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	4013      	ands	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2201      	movs	r2, #1
 80053b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	228c      	movs	r2, #140	; 0x8c
 80053ba:	589b      	ldr	r3, [r3, r2]
 80053bc:	2201      	movs	r2, #1
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	218c      	movs	r1, #140	; 0x8c
 80053c4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053c6:	23a4      	movs	r3, #164	; 0xa4
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2202      	movs	r2, #2
 80053ce:	4013      	ands	r3, r2
 80053d0:	d011      	beq.n	80053f6 <HAL_UART_IRQHandler+0x102>
 80053d2:	239c      	movs	r3, #156	; 0x9c
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2201      	movs	r2, #1
 80053da:	4013      	ands	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2202      	movs	r2, #2
 80053e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	228c      	movs	r2, #140	; 0x8c
 80053ea:	589b      	ldr	r3, [r3, r2]
 80053ec:	2204      	movs	r2, #4
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	218c      	movs	r1, #140	; 0x8c
 80053f4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053f6:	23a4      	movs	r3, #164	; 0xa4
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2204      	movs	r2, #4
 80053fe:	4013      	ands	r3, r2
 8005400:	d011      	beq.n	8005426 <HAL_UART_IRQHandler+0x132>
 8005402:	239c      	movs	r3, #156	; 0x9c
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2201      	movs	r2, #1
 800540a:	4013      	ands	r3, r2
 800540c:	d00b      	beq.n	8005426 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2204      	movs	r2, #4
 8005414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	228c      	movs	r2, #140	; 0x8c
 800541a:	589b      	ldr	r3, [r3, r2]
 800541c:	2202      	movs	r2, #2
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	218c      	movs	r1, #140	; 0x8c
 8005424:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005426:	23a4      	movs	r3, #164	; 0xa4
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2208      	movs	r2, #8
 800542e:	4013      	ands	r3, r2
 8005430:	d017      	beq.n	8005462 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005432:	23a0      	movs	r3, #160	; 0xa0
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2220      	movs	r2, #32
 800543a:	4013      	ands	r3, r2
 800543c:	d105      	bne.n	800544a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800543e:	239c      	movs	r3, #156	; 0x9c
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a59      	ldr	r2, [pc, #356]	; (80055ac <HAL_UART_IRQHandler+0x2b8>)
 8005446:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005448:	d00b      	beq.n	8005462 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2208      	movs	r2, #8
 8005450:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	228c      	movs	r2, #140	; 0x8c
 8005456:	589b      	ldr	r3, [r3, r2]
 8005458:	2208      	movs	r2, #8
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	218c      	movs	r1, #140	; 0x8c
 8005460:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005462:	23a4      	movs	r3, #164	; 0xa4
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	4013      	ands	r3, r2
 800546e:	d013      	beq.n	8005498 <HAL_UART_IRQHandler+0x1a4>
 8005470:	23a0      	movs	r3, #160	; 0xa0
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	04db      	lsls	r3, r3, #19
 800547a:	4013      	ands	r3, r2
 800547c:	d00c      	beq.n	8005498 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2280      	movs	r2, #128	; 0x80
 8005484:	0112      	lsls	r2, r2, #4
 8005486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	228c      	movs	r2, #140	; 0x8c
 800548c:	589b      	ldr	r3, [r3, r2]
 800548e:	2220      	movs	r2, #32
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	218c      	movs	r1, #140	; 0x8c
 8005496:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	228c      	movs	r2, #140	; 0x8c
 800549c:	589b      	ldr	r3, [r3, r2]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d100      	bne.n	80054a4 <HAL_UART_IRQHandler+0x1b0>
 80054a2:	e230      	b.n	8005906 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054a4:	23a4      	movs	r3, #164	; 0xa4
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2220      	movs	r2, #32
 80054ac:	4013      	ands	r3, r2
 80054ae:	d015      	beq.n	80054dc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054b0:	23a0      	movs	r3, #160	; 0xa0
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2220      	movs	r2, #32
 80054b8:	4013      	ands	r3, r2
 80054ba:	d106      	bne.n	80054ca <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054bc:	239c      	movs	r3, #156	; 0x9c
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	055b      	lsls	r3, r3, #21
 80054c6:	4013      	ands	r3, r2
 80054c8:	d008      	beq.n	80054dc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	0010      	movs	r0, r2
 80054da:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	228c      	movs	r2, #140	; 0x8c
 80054e0:	589b      	ldr	r3, [r3, r2]
 80054e2:	2194      	movs	r1, #148	; 0x94
 80054e4:	187a      	adds	r2, r7, r1
 80054e6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	2240      	movs	r2, #64	; 0x40
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b40      	cmp	r3, #64	; 0x40
 80054f4:	d004      	beq.n	8005500 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054f6:	187b      	adds	r3, r7, r1
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2228      	movs	r2, #40	; 0x28
 80054fc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054fe:	d047      	beq.n	8005590 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	0018      	movs	r0, r3
 8005504:	f000 fd5c 	bl	8005fc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2240      	movs	r2, #64	; 0x40
 8005510:	4013      	ands	r3, r2
 8005512:	2b40      	cmp	r3, #64	; 0x40
 8005514:	d137      	bne.n	8005586 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005516:	f3ef 8310 	mrs	r3, PRIMASK
 800551a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800551c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800551e:	2090      	movs	r0, #144	; 0x90
 8005520:	183a      	adds	r2, r7, r0
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	2301      	movs	r3, #1
 8005526:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552a:	f383 8810 	msr	PRIMASK, r3
}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2140      	movs	r1, #64	; 0x40
 800553c:	438a      	bics	r2, r1
 800553e:	609a      	str	r2, [r3, #8]
 8005540:	183b      	adds	r3, r7, r0
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005548:	f383 8810 	msr	PRIMASK, r3
}
 800554c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d012      	beq.n	800557c <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800555a:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <HAL_UART_IRQHandler+0x2c0>)
 800555c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005562:	0018      	movs	r0, r3
 8005564:	f7fd fca4 	bl	8002eb0 <HAL_DMA_Abort_IT>
 8005568:	1e03      	subs	r3, r0, #0
 800556a:	d01a      	beq.n	80055a2 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005576:	0018      	movs	r0, r3
 8005578:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557a:	e012      	b.n	80055a2 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	0018      	movs	r0, r3
 8005580:	f000 f9da 	bl	8005938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005584:	e00d      	b.n	80055a2 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	0018      	movs	r0, r3
 800558a:	f000 f9d5 	bl	8005938 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558e:	e008      	b.n	80055a2 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	0018      	movs	r0, r3
 8005594:	f000 f9d0 	bl	8005938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	228c      	movs	r2, #140	; 0x8c
 800559c:	2100      	movs	r1, #0
 800559e:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80055a0:	e1b1      	b.n	8005906 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a2:	46c0      	nop			; (mov r8, r8)
    return;
 80055a4:	e1af      	b.n	8005906 <HAL_UART_IRQHandler+0x612>
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	0000080f 	.word	0x0000080f
 80055ac:	10000001 	.word	0x10000001
 80055b0:	04000120 	.word	0x04000120
 80055b4:	0800608d 	.word	0x0800608d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d000      	beq.n	80055c2 <HAL_UART_IRQHandler+0x2ce>
 80055c0:	e135      	b.n	800582e <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055c2:	23a4      	movs	r3, #164	; 0xa4
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2210      	movs	r2, #16
 80055ca:	4013      	ands	r3, r2
 80055cc:	d100      	bne.n	80055d0 <HAL_UART_IRQHandler+0x2dc>
 80055ce:	e12e      	b.n	800582e <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055d0:	23a0      	movs	r3, #160	; 0xa0
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2210      	movs	r2, #16
 80055d8:	4013      	ands	r3, r2
 80055da:	d100      	bne.n	80055de <HAL_UART_IRQHandler+0x2ea>
 80055dc:	e127      	b.n	800582e <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2210      	movs	r2, #16
 80055e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2240      	movs	r2, #64	; 0x40
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	d000      	beq.n	80055f6 <HAL_UART_IRQHandler+0x302>
 80055f4:	e09e      	b.n	8005734 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	217e      	movs	r1, #126	; 0x7e
 8005600:	187b      	adds	r3, r7, r1
 8005602:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005604:	187b      	adds	r3, r7, r1
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d100      	bne.n	800560e <HAL_UART_IRQHandler+0x31a>
 800560c:	e17d      	b.n	800590a <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	225c      	movs	r2, #92	; 0x5c
 8005612:	5a9b      	ldrh	r3, [r3, r2]
 8005614:	187a      	adds	r2, r7, r1
 8005616:	8812      	ldrh	r2, [r2, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d300      	bcc.n	800561e <HAL_UART_IRQHandler+0x32a>
 800561c:	e175      	b.n	800590a <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	187a      	adds	r2, r7, r1
 8005622:	215e      	movs	r1, #94	; 0x5e
 8005624:	8812      	ldrh	r2, [r2, #0]
 8005626:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2220      	movs	r2, #32
 8005632:	4013      	ands	r3, r2
 8005634:	d16f      	bne.n	8005716 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005636:	f3ef 8310 	mrs	r3, PRIMASK
 800563a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800563e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005640:	2301      	movs	r3, #1
 8005642:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	f383 8810 	msr	PRIMASK, r3
}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	49b1      	ldr	r1, [pc, #708]	; (800591c <HAL_UART_IRQHandler+0x628>)
 8005658:	400a      	ands	r2, r1
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800565e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	f383 8810 	msr	PRIMASK, r3
}
 8005666:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005668:	f3ef 8310 	mrs	r3, PRIMASK
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005670:	677b      	str	r3, [r7, #116]	; 0x74
 8005672:	2301      	movs	r3, #1
 8005674:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005678:	f383 8810 	msr	PRIMASK, r3
}
 800567c:	46c0      	nop			; (mov r8, r8)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2101      	movs	r1, #1
 800568a:	438a      	bics	r2, r1
 800568c:	609a      	str	r2, [r3, #8]
 800568e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005690:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005694:	f383 8810 	msr	PRIMASK, r3
}
 8005698:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800569a:	f3ef 8310 	mrs	r3, PRIMASK
 800569e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80056a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a2:	673b      	str	r3, [r7, #112]	; 0x70
 80056a4:	2301      	movs	r3, #1
 80056a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056aa:	f383 8810 	msr	PRIMASK, r3
}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2140      	movs	r1, #64	; 0x40
 80056bc:	438a      	bics	r2, r1
 80056be:	609a      	str	r2, [r3, #8]
 80056c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056c2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c6:	f383 8810 	msr	PRIMASK, r3
}
 80056ca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2288      	movs	r2, #136	; 0x88
 80056d0:	2120      	movs	r1, #32
 80056d2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056da:	f3ef 8310 	mrs	r3, PRIMASK
 80056de:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80056e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056e4:	2301      	movs	r3, #1
 80056e6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ea:	f383 8810 	msr	PRIMASK, r3
}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2110      	movs	r1, #16
 80056fc:	438a      	bics	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005702:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005706:	f383 8810 	msr	PRIMASK, r3
}
 800570a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005710:	0018      	movs	r0, r3
 8005712:	f7fd fb6b 	bl	8002dec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	225c      	movs	r2, #92	; 0x5c
 800571a:	5a9a      	ldrh	r2, [r3, r2]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	215e      	movs	r1, #94	; 0x5e
 8005720:	5a5b      	ldrh	r3, [r3, r1]
 8005722:	b29b      	uxth	r3, r3
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	b29a      	uxth	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	0011      	movs	r1, r2
 800572c:	0018      	movs	r0, r3
 800572e:	f000 f90b 	bl	8005948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005732:	e0ea      	b.n	800590a <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	225c      	movs	r2, #92	; 0x5c
 8005738:	5a99      	ldrh	r1, [r3, r2]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	225e      	movs	r2, #94	; 0x5e
 800573e:	5a9b      	ldrh	r3, [r3, r2]
 8005740:	b29a      	uxth	r2, r3
 8005742:	208e      	movs	r0, #142	; 0x8e
 8005744:	183b      	adds	r3, r7, r0
 8005746:	1a8a      	subs	r2, r1, r2
 8005748:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	225e      	movs	r2, #94	; 0x5e
 800574e:	5a9b      	ldrh	r3, [r3, r2]
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d100      	bne.n	8005758 <HAL_UART_IRQHandler+0x464>
 8005756:	e0da      	b.n	800590e <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8005758:	183b      	adds	r3, r7, r0
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d100      	bne.n	8005762 <HAL_UART_IRQHandler+0x46e>
 8005760:	e0d5      	b.n	800590e <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005762:	f3ef 8310 	mrs	r3, PRIMASK
 8005766:	60fb      	str	r3, [r7, #12]
  return(result);
 8005768:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800576a:	2488      	movs	r4, #136	; 0x88
 800576c:	193a      	adds	r2, r7, r4
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	2301      	movs	r3, #1
 8005772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f383 8810 	msr	PRIMASK, r3
}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4966      	ldr	r1, [pc, #408]	; (8005920 <HAL_UART_IRQHandler+0x62c>)
 8005788:	400a      	ands	r2, r1
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	193b      	adds	r3, r7, r4
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f383 8810 	msr	PRIMASK, r3
}
 8005798:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800579a:	f3ef 8310 	mrs	r3, PRIMASK
 800579e:	61bb      	str	r3, [r7, #24]
  return(result);
 80057a0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057a2:	2484      	movs	r4, #132	; 0x84
 80057a4:	193a      	adds	r2, r7, r4
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	2301      	movs	r3, #1
 80057aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f383 8810 	msr	PRIMASK, r3
}
 80057b2:	46c0      	nop			; (mov r8, r8)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4959      	ldr	r1, [pc, #356]	; (8005924 <HAL_UART_IRQHandler+0x630>)
 80057c0:	400a      	ands	r2, r1
 80057c2:	609a      	str	r2, [r3, #8]
 80057c4:	193b      	adds	r3, r7, r4
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	f383 8810 	msr	PRIMASK, r3
}
 80057d0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2288      	movs	r2, #136	; 0x88
 80057d6:	2120      	movs	r1, #32
 80057d8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e6:	f3ef 8310 	mrs	r3, PRIMASK
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ee:	2480      	movs	r4, #128	; 0x80
 80057f0:	193a      	adds	r2, r7, r4
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	2301      	movs	r3, #1
 80057f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	f383 8810 	msr	PRIMASK, r3
}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2110      	movs	r1, #16
 800580c:	438a      	bics	r2, r1
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	193b      	adds	r3, r7, r4
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005818:	f383 8810 	msr	PRIMASK, r3
}
 800581c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800581e:	183b      	adds	r3, r7, r0
 8005820:	881a      	ldrh	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f000 f88e 	bl	8005948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800582c:	e06f      	b.n	800590e <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800582e:	23a4      	movs	r3, #164	; 0xa4
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	035b      	lsls	r3, r3, #13
 8005838:	4013      	ands	r3, r2
 800583a:	d010      	beq.n	800585e <HAL_UART_IRQHandler+0x56a>
 800583c:	239c      	movs	r3, #156	; 0x9c
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	2380      	movs	r3, #128	; 0x80
 8005844:	03db      	lsls	r3, r3, #15
 8005846:	4013      	ands	r3, r2
 8005848:	d009      	beq.n	800585e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2280      	movs	r2, #128	; 0x80
 8005850:	0352      	lsls	r2, r2, #13
 8005852:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	0018      	movs	r0, r3
 8005858:	f000 fc5b 	bl	8006112 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800585c:	e05a      	b.n	8005914 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800585e:	23a4      	movs	r3, #164	; 0xa4
 8005860:	18fb      	adds	r3, r7, r3
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2280      	movs	r2, #128	; 0x80
 8005866:	4013      	ands	r3, r2
 8005868:	d016      	beq.n	8005898 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800586a:	23a0      	movs	r3, #160	; 0xa0
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2280      	movs	r2, #128	; 0x80
 8005872:	4013      	ands	r3, r2
 8005874:	d106      	bne.n	8005884 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005876:	239c      	movs	r3, #156	; 0x9c
 8005878:	18fb      	adds	r3, r7, r3
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	4013      	ands	r3, r2
 8005882:	d009      	beq.n	8005898 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005888:	2b00      	cmp	r3, #0
 800588a:	d042      	beq.n	8005912 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	0010      	movs	r0, r2
 8005894:	4798      	blx	r3
    }
    return;
 8005896:	e03c      	b.n	8005912 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005898:	23a4      	movs	r3, #164	; 0xa4
 800589a:	18fb      	adds	r3, r7, r3
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2240      	movs	r2, #64	; 0x40
 80058a0:	4013      	ands	r3, r2
 80058a2:	d00a      	beq.n	80058ba <HAL_UART_IRQHandler+0x5c6>
 80058a4:	23a0      	movs	r3, #160	; 0xa0
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2240      	movs	r2, #64	; 0x40
 80058ac:	4013      	ands	r3, r2
 80058ae:	d004      	beq.n	80058ba <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	0018      	movs	r0, r3
 80058b4:	f000 fc01 	bl	80060ba <UART_EndTransmit_IT>
    return;
 80058b8:	e02c      	b.n	8005914 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80058ba:	23a4      	movs	r3, #164	; 0xa4
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	2380      	movs	r3, #128	; 0x80
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	4013      	ands	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <HAL_UART_IRQHandler+0x5ec>
 80058c8:	23a0      	movs	r3, #160	; 0xa0
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	2380      	movs	r3, #128	; 0x80
 80058d0:	05db      	lsls	r3, r3, #23
 80058d2:	4013      	ands	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	0018      	movs	r0, r3
 80058da:	f000 fc2a 	bl	8006132 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058de:	e019      	b.n	8005914 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058e0:	23a4      	movs	r3, #164	; 0xa4
 80058e2:	18fb      	adds	r3, r7, r3
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	2380      	movs	r3, #128	; 0x80
 80058e8:	045b      	lsls	r3, r3, #17
 80058ea:	4013      	ands	r3, r2
 80058ec:	d012      	beq.n	8005914 <HAL_UART_IRQHandler+0x620>
 80058ee:	23a0      	movs	r3, #160	; 0xa0
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	da0d      	bge.n	8005914 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	0018      	movs	r0, r3
 80058fc:	f000 fc11 	bl	8006122 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005900:	e008      	b.n	8005914 <HAL_UART_IRQHandler+0x620>
      return;
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	e006      	b.n	8005914 <HAL_UART_IRQHandler+0x620>
    return;
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	e004      	b.n	8005914 <HAL_UART_IRQHandler+0x620>
      return;
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	e002      	b.n	8005914 <HAL_UART_IRQHandler+0x620>
      return;
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	e000      	b.n	8005914 <HAL_UART_IRQHandler+0x620>
    return;
 8005912:	46c0      	nop			; (mov r8, r8)
  }
}
 8005914:	46bd      	mov	sp, r7
 8005916:	b02a      	add	sp, #168	; 0xa8
 8005918:	bdb0      	pop	{r4, r5, r7, pc}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	fffffeff 	.word	0xfffffeff
 8005920:	fffffedf 	.word	0xfffffedf
 8005924:	effffffe 	.word	0xeffffffe

08005928 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005930:	46c0      	nop			; (mov r8, r8)
 8005932:	46bd      	mov	sp, r7
 8005934:	b002      	add	sp, #8
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005940:	46c0      	nop			; (mov r8, r8)
 8005942:	46bd      	mov	sp, r7
 8005944:	b002      	add	sp, #8
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	000a      	movs	r2, r1
 8005952:	1cbb      	adds	r3, r7, #2
 8005954:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	46bd      	mov	sp, r7
 800595a:	b002      	add	sp, #8
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005968:	231a      	movs	r3, #26
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	4313      	orrs	r3, r2
 8005986:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4aa1      	ldr	r2, [pc, #644]	; (8005c14 <UART_SetConfig+0x2b4>)
 8005990:	4013      	ands	r3, r2
 8005992:	0019      	movs	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	430a      	orrs	r2, r1
 800599c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4a9c      	ldr	r2, [pc, #624]	; (8005c18 <UART_SetConfig+0x2b8>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	0019      	movs	r1, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	4a93      	ldr	r2, [pc, #588]	; (8005c1c <UART_SetConfig+0x2bc>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	0019      	movs	r1, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	430a      	orrs	r2, r1
 80059da:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	220f      	movs	r2, #15
 80059e4:	4393      	bics	r3, r2
 80059e6:	0019      	movs	r1, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a89      	ldr	r2, [pc, #548]	; (8005c20 <UART_SetConfig+0x2c0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d127      	bne.n	8005a4e <UART_SetConfig+0xee>
 80059fe:	4b89      	ldr	r3, [pc, #548]	; (8005c24 <UART_SetConfig+0x2c4>)
 8005a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a02:	2203      	movs	r2, #3
 8005a04:	4013      	ands	r3, r2
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d017      	beq.n	8005a3a <UART_SetConfig+0xda>
 8005a0a:	d81b      	bhi.n	8005a44 <UART_SetConfig+0xe4>
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d00a      	beq.n	8005a26 <UART_SetConfig+0xc6>
 8005a10:	d818      	bhi.n	8005a44 <UART_SetConfig+0xe4>
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <UART_SetConfig+0xbc>
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d00a      	beq.n	8005a30 <UART_SetConfig+0xd0>
 8005a1a:	e013      	b.n	8005a44 <UART_SetConfig+0xe4>
 8005a1c:	231b      	movs	r3, #27
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e021      	b.n	8005a6a <UART_SetConfig+0x10a>
 8005a26:	231b      	movs	r3, #27
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e01c      	b.n	8005a6a <UART_SetConfig+0x10a>
 8005a30:	231b      	movs	r3, #27
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	2204      	movs	r2, #4
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	e017      	b.n	8005a6a <UART_SetConfig+0x10a>
 8005a3a:	231b      	movs	r3, #27
 8005a3c:	18fb      	adds	r3, r7, r3
 8005a3e:	2208      	movs	r2, #8
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	e012      	b.n	8005a6a <UART_SetConfig+0x10a>
 8005a44:	231b      	movs	r3, #27
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	2210      	movs	r2, #16
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e00d      	b.n	8005a6a <UART_SetConfig+0x10a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a75      	ldr	r2, [pc, #468]	; (8005c28 <UART_SetConfig+0x2c8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d104      	bne.n	8005a62 <UART_SetConfig+0x102>
 8005a58:	231b      	movs	r3, #27
 8005a5a:	18fb      	adds	r3, r7, r3
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	e003      	b.n	8005a6a <UART_SetConfig+0x10a>
 8005a62:	231b      	movs	r3, #27
 8005a64:	18fb      	adds	r3, r7, r3
 8005a66:	2210      	movs	r2, #16
 8005a68:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69da      	ldr	r2, [r3, #28]
 8005a6e:	2380      	movs	r3, #128	; 0x80
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d000      	beq.n	8005a78 <UART_SetConfig+0x118>
 8005a76:	e066      	b.n	8005b46 <UART_SetConfig+0x1e6>
  {
    switch (clocksource)
 8005a78:	231b      	movs	r3, #27
 8005a7a:	18fb      	adds	r3, r7, r3
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d015      	beq.n	8005aae <UART_SetConfig+0x14e>
 8005a82:	dc18      	bgt.n	8005ab6 <UART_SetConfig+0x156>
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d00d      	beq.n	8005aa4 <UART_SetConfig+0x144>
 8005a88:	dc15      	bgt.n	8005ab6 <UART_SetConfig+0x156>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <UART_SetConfig+0x134>
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d005      	beq.n	8005a9e <UART_SetConfig+0x13e>
 8005a92:	e010      	b.n	8005ab6 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a94:	f7fe f94a 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 8005a98:	0003      	movs	r3, r0
 8005a9a:	617b      	str	r3, [r7, #20]
        break;
 8005a9c:	e012      	b.n	8005ac4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a9e:	4b63      	ldr	r3, [pc, #396]	; (8005c2c <UART_SetConfig+0x2cc>)
 8005aa0:	617b      	str	r3, [r7, #20]
        break;
 8005aa2:	e00f      	b.n	8005ac4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aa4:	f7fe f8b6 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8005aa8:	0003      	movs	r3, r0
 8005aaa:	617b      	str	r3, [r7, #20]
        break;
 8005aac:	e00a      	b.n	8005ac4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aae:	2380      	movs	r3, #128	; 0x80
 8005ab0:	021b      	lsls	r3, r3, #8
 8005ab2:	617b      	str	r3, [r7, #20]
        break;
 8005ab4:	e006      	b.n	8005ac4 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005aba:	231a      	movs	r3, #26
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	2201      	movs	r2, #1
 8005ac0:	701a      	strb	r2, [r3, #0]
        break;
 8005ac2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d100      	bne.n	8005acc <UART_SetConfig+0x16c>
 8005aca:	e08e      	b.n	8005bea <UART_SetConfig+0x28a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad0:	4b57      	ldr	r3, [pc, #348]	; (8005c30 <UART_SetConfig+0x2d0>)
 8005ad2:	0052      	lsls	r2, r2, #1
 8005ad4:	5ad3      	ldrh	r3, [r2, r3]
 8005ad6:	0019      	movs	r1, r3
 8005ad8:	6978      	ldr	r0, [r7, #20]
 8005ada:	f7fa fb2d 	bl	8000138 <__udivsi3>
 8005ade:	0003      	movs	r3, r0
 8005ae0:	005a      	lsls	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	18d2      	adds	r2, r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	0019      	movs	r1, r3
 8005af0:	0010      	movs	r0, r2
 8005af2:	f7fa fb21 	bl	8000138 <__udivsi3>
 8005af6:	0003      	movs	r3, r0
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	2b0f      	cmp	r3, #15
 8005b00:	d91c      	bls.n	8005b3c <UART_SetConfig+0x1dc>
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	2380      	movs	r3, #128	; 0x80
 8005b06:	025b      	lsls	r3, r3, #9
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d217      	bcs.n	8005b3c <UART_SetConfig+0x1dc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	200e      	movs	r0, #14
 8005b12:	183b      	adds	r3, r7, r0
 8005b14:	210f      	movs	r1, #15
 8005b16:	438a      	bics	r2, r1
 8005b18:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2207      	movs	r2, #7
 8005b22:	4013      	ands	r3, r2
 8005b24:	b299      	uxth	r1, r3
 8005b26:	183b      	adds	r3, r7, r0
 8005b28:	183a      	adds	r2, r7, r0
 8005b2a:	8812      	ldrh	r2, [r2, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	183a      	adds	r2, r7, r0
 8005b36:	8812      	ldrh	r2, [r2, #0]
 8005b38:	60da      	str	r2, [r3, #12]
 8005b3a:	e056      	b.n	8005bea <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
 8005b3c:	231a      	movs	r3, #26
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	e051      	b.n	8005bea <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b46:	231b      	movs	r3, #27
 8005b48:	18fb      	adds	r3, r7, r3
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d015      	beq.n	8005b7c <UART_SetConfig+0x21c>
 8005b50:	dc18      	bgt.n	8005b84 <UART_SetConfig+0x224>
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d00d      	beq.n	8005b72 <UART_SetConfig+0x212>
 8005b56:	dc15      	bgt.n	8005b84 <UART_SetConfig+0x224>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <UART_SetConfig+0x202>
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d005      	beq.n	8005b6c <UART_SetConfig+0x20c>
 8005b60:	e010      	b.n	8005b84 <UART_SetConfig+0x224>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b62:	f7fe f8e3 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 8005b66:	0003      	movs	r3, r0
 8005b68:	617b      	str	r3, [r7, #20]
        break;
 8005b6a:	e012      	b.n	8005b92 <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b6c:	4b2f      	ldr	r3, [pc, #188]	; (8005c2c <UART_SetConfig+0x2cc>)
 8005b6e:	617b      	str	r3, [r7, #20]
        break;
 8005b70:	e00f      	b.n	8005b92 <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b72:	f7fe f84f 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8005b76:	0003      	movs	r3, r0
 8005b78:	617b      	str	r3, [r7, #20]
        break;
 8005b7a:	e00a      	b.n	8005b92 <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	617b      	str	r3, [r7, #20]
        break;
 8005b82:	e006      	b.n	8005b92 <UART_SetConfig+0x232>
      default:
        pclk = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b88:	231a      	movs	r3, #26
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
        break;
 8005b90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d028      	beq.n	8005bea <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b9c:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <UART_SetConfig+0x2d0>)
 8005b9e:	0052      	lsls	r2, r2, #1
 8005ba0:	5ad3      	ldrh	r3, [r2, r3]
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	6978      	ldr	r0, [r7, #20]
 8005ba6:	f7fa fac7 	bl	8000138 <__udivsi3>
 8005baa:	0003      	movs	r3, r0
 8005bac:	001a      	movs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	18d2      	adds	r2, r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	0019      	movs	r1, r3
 8005bbc:	0010      	movs	r0, r2
 8005bbe:	f7fa fabb 	bl	8000138 <__udivsi3>
 8005bc2:	0003      	movs	r3, r0
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b0f      	cmp	r3, #15
 8005bcc:	d909      	bls.n	8005be2 <UART_SetConfig+0x282>
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	025b      	lsls	r3, r3, #9
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d204      	bcs.n	8005be2 <UART_SetConfig+0x282>
      {
        huart->Instance->BRR = usartdiv;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	60da      	str	r2, [r3, #12]
 8005be0:	e003      	b.n	8005bea <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
 8005be2:	231a      	movs	r3, #26
 8005be4:	18fb      	adds	r3, r7, r3
 8005be6:	2201      	movs	r2, #1
 8005be8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	226a      	movs	r2, #106	; 0x6a
 8005bee:	2101      	movs	r1, #1
 8005bf0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2268      	movs	r2, #104	; 0x68
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c06:	231a      	movs	r3, #26
 8005c08:	18fb      	adds	r3, r7, r3
 8005c0a:	781b      	ldrb	r3, [r3, #0]
}
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b008      	add	sp, #32
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	cfff69f3 	.word	0xcfff69f3
 8005c18:	ffffcfff 	.word	0xffffcfff
 8005c1c:	11fff4ff 	.word	0x11fff4ff
 8005c20:	40013800 	.word	0x40013800
 8005c24:	40021000 	.word	0x40021000
 8005c28:	40004400 	.word	0x40004400
 8005c2c:	00f42400 	.word	0x00f42400
 8005c30:	08007dbc 	.word	0x08007dbc

08005c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	2201      	movs	r2, #1
 8005c42:	4013      	ands	r3, r2
 8005c44:	d00b      	beq.n	8005c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4a4a      	ldr	r2, [pc, #296]	; (8005d78 <UART_AdvFeatureConfig+0x144>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	0019      	movs	r1, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	2202      	movs	r2, #2
 8005c64:	4013      	ands	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	4a43      	ldr	r2, [pc, #268]	; (8005d7c <UART_AdvFeatureConfig+0x148>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	0019      	movs	r1, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c84:	2204      	movs	r2, #4
 8005c86:	4013      	ands	r3, r2
 8005c88:	d00b      	beq.n	8005ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	4a3b      	ldr	r2, [pc, #236]	; (8005d80 <UART_AdvFeatureConfig+0x14c>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	0019      	movs	r1, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	2208      	movs	r2, #8
 8005ca8:	4013      	ands	r3, r2
 8005caa:	d00b      	beq.n	8005cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4a34      	ldr	r2, [pc, #208]	; (8005d84 <UART_AdvFeatureConfig+0x150>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	0019      	movs	r1, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc8:	2210      	movs	r2, #16
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d00b      	beq.n	8005ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	4a2c      	ldr	r2, [pc, #176]	; (8005d88 <UART_AdvFeatureConfig+0x154>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	0019      	movs	r1, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	2220      	movs	r2, #32
 8005cec:	4013      	ands	r3, r2
 8005cee:	d00b      	beq.n	8005d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	4a25      	ldr	r2, [pc, #148]	; (8005d8c <UART_AdvFeatureConfig+0x158>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	0019      	movs	r1, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	2240      	movs	r2, #64	; 0x40
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d01d      	beq.n	8005d4e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4a1d      	ldr	r2, [pc, #116]	; (8005d90 <UART_AdvFeatureConfig+0x15c>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	0019      	movs	r1, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d2e:	2380      	movs	r3, #128	; 0x80
 8005d30:	035b      	lsls	r3, r3, #13
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d10b      	bne.n	8005d4e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <UART_AdvFeatureConfig+0x160>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	0019      	movs	r1, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d52:	2280      	movs	r2, #128	; 0x80
 8005d54:	4013      	ands	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4a0e      	ldr	r2, [pc, #56]	; (8005d98 <UART_AdvFeatureConfig+0x164>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	0019      	movs	r1, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
  }
}
 8005d70:	46c0      	nop			; (mov r8, r8)
 8005d72:	46bd      	mov	sp, r7
 8005d74:	b002      	add	sp, #8
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	fffdffff 	.word	0xfffdffff
 8005d7c:	fffeffff 	.word	0xfffeffff
 8005d80:	fffbffff 	.word	0xfffbffff
 8005d84:	ffff7fff 	.word	0xffff7fff
 8005d88:	ffffefff 	.word	0xffffefff
 8005d8c:	ffffdfff 	.word	0xffffdfff
 8005d90:	ffefffff 	.word	0xffefffff
 8005d94:	ff9fffff 	.word	0xff9fffff
 8005d98:	fff7ffff 	.word	0xfff7ffff

08005d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	228c      	movs	r2, #140	; 0x8c
 8005da8:	2100      	movs	r1, #0
 8005daa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dac:	f7fc fef0 	bl	8002b90 <HAL_GetTick>
 8005db0:	0003      	movs	r3, r0
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2208      	movs	r2, #8
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d10c      	bne.n	8005ddc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2280      	movs	r2, #128	; 0x80
 8005dc6:	0391      	lsls	r1, r2, #14
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <UART_CheckIdleState+0x90>)
 8005dcc:	9200      	str	r2, [sp, #0]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f000 f82e 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8005dd4:	1e03      	subs	r3, r0, #0
 8005dd6:	d001      	beq.n	8005ddc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e023      	b.n	8005e24 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2204      	movs	r2, #4
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d10c      	bne.n	8005e04 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2280      	movs	r2, #128	; 0x80
 8005dee:	03d1      	lsls	r1, r2, #15
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4a0e      	ldr	r2, [pc, #56]	; (8005e2c <UART_CheckIdleState+0x90>)
 8005df4:	9200      	str	r2, [sp, #0]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f000 f81a 	bl	8005e30 <UART_WaitOnFlagUntilTimeout>
 8005dfc:	1e03      	subs	r3, r0, #0
 8005dfe:	d001      	beq.n	8005e04 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e00f      	b.n	8005e24 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2284      	movs	r2, #132	; 0x84
 8005e08:	2120      	movs	r1, #32
 8005e0a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2288      	movs	r2, #136	; 0x88
 8005e10:	2120      	movs	r1, #32
 8005e12:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2280      	movs	r2, #128	; 0x80
 8005e1e:	2100      	movs	r1, #0
 8005e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	0018      	movs	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b004      	add	sp, #16
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	01ffffff 	.word	0x01ffffff

08005e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b094      	sub	sp, #80	; 0x50
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	1dfb      	adds	r3, r7, #7
 8005e3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e40:	e0a7      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e44:	3301      	adds	r3, #1
 8005e46:	d100      	bne.n	8005e4a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005e48:	e0a3      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4a:	f7fc fea1 	bl	8002b90 <HAL_GetTick>
 8005e4e:	0002      	movs	r2, r0
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d302      	bcc.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d13f      	bne.n	8005ee0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e60:	f3ef 8310 	mrs	r3, PRIMASK
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e68:	647b      	str	r3, [r7, #68]	; 0x44
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	f383 8810 	msr	PRIMASK, r3
}
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	494e      	ldr	r1, [pc, #312]	; (8005fbc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005e82:	400a      	ands	r2, r1
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e88:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	f383 8810 	msr	PRIMASK, r3
}
 8005e90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e92:	f3ef 8310 	mrs	r3, PRIMASK
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	f383 8810 	msr	PRIMASK, r3
}
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	438a      	bics	r2, r1
 8005eb6:	609a      	str	r2, [r3, #8]
 8005eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ebe:	f383 8810 	msr	PRIMASK, r3
}
 8005ec2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2284      	movs	r2, #132	; 0x84
 8005ec8:	2120      	movs	r1, #32
 8005eca:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2288      	movs	r2, #136	; 0x88
 8005ed0:	2120      	movs	r1, #32
 8005ed2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	2100      	movs	r1, #0
 8005eda:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e069      	b.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2204      	movs	r2, #4
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d052      	beq.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69da      	ldr	r2, [r3, #28]
 8005ef2:	2380      	movs	r3, #128	; 0x80
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	2380      	movs	r3, #128	; 0x80
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d148      	bne.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2280      	movs	r2, #128	; 0x80
 8005f06:	0112      	lsls	r2, r2, #4
 8005f08:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f0e:	613b      	str	r3, [r7, #16]
  return(result);
 8005f10:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f14:	2301      	movs	r3, #1
 8005f16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f383 8810 	msr	PRIMASK, r3
}
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4924      	ldr	r1, [pc, #144]	; (8005fbc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005f2c:	400a      	ands	r2, r1
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f383 8810 	msr	PRIMASK, r3
}
 8005f3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f40:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f42:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f46:	2301      	movs	r3, #1
 8005f48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	f383 8810 	msr	PRIMASK, r3
}
 8005f50:	46c0      	nop			; (mov r8, r8)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	438a      	bics	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]
 8005f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	f383 8810 	msr	PRIMASK, r3
}
 8005f6c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2284      	movs	r2, #132	; 0x84
 8005f72:	2120      	movs	r1, #32
 8005f74:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2288      	movs	r2, #136	; 0x88
 8005f7a:	2120      	movs	r1, #32
 8005f7c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	228c      	movs	r2, #140	; 0x8c
 8005f82:	2120      	movs	r1, #32
 8005f84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2280      	movs	r2, #128	; 0x80
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e010      	b.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	425a      	negs	r2, r3
 8005fa2:	4153      	adcs	r3, r2
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	001a      	movs	r2, r3
 8005fa8:	1dfb      	adds	r3, r7, #7
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d100      	bne.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0x182>
 8005fb0:	e747      	b.n	8005e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b014      	add	sp, #80	; 0x50
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	fffffe5f 	.word	0xfffffe5f

08005fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08e      	sub	sp, #56	; 0x38
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fcc:	617b      	str	r3, [r7, #20]
  return(result);
 8005fce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	f383 8810 	msr	PRIMASK, r3
}
 8005fdc:	46c0      	nop			; (mov r8, r8)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4926      	ldr	r1, [pc, #152]	; (8006084 <UART_EndRxTransfer+0xc4>)
 8005fea:	400a      	ands	r2, r1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	f383 8810 	msr	PRIMASK, r3
}
 8005ff8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffe:	623b      	str	r3, [r7, #32]
  return(result);
 8006000:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006002:	633b      	str	r3, [r7, #48]	; 0x30
 8006004:	2301      	movs	r3, #1
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	f383 8810 	msr	PRIMASK, r3
}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	491b      	ldr	r1, [pc, #108]	; (8006088 <UART_EndRxTransfer+0xc8>)
 800601c:	400a      	ands	r2, r1
 800601e:	609a      	str	r2, [r3, #8]
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	f383 8810 	msr	PRIMASK, r3
}
 800602a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006030:	2b01      	cmp	r3, #1
 8006032:	d118      	bne.n	8006066 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006034:	f3ef 8310 	mrs	r3, PRIMASK
 8006038:	60bb      	str	r3, [r7, #8]
  return(result);
 800603a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800603e:	2301      	movs	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f383 8810 	msr	PRIMASK, r3
}
 8006048:	46c0      	nop			; (mov r8, r8)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2110      	movs	r1, #16
 8006056:	438a      	bics	r2, r1
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f383 8810 	msr	PRIMASK, r3
}
 8006064:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2288      	movs	r2, #136	; 0x88
 800606a:	2120      	movs	r1, #32
 800606c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	671a      	str	r2, [r3, #112]	; 0x70
}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	46bd      	mov	sp, r7
 800607e:	b00e      	add	sp, #56	; 0x38
 8006080:	bd80      	pop	{r7, pc}
 8006082:	46c0      	nop			; (mov r8, r8)
 8006084:	fffffedf 	.word	0xfffffedf
 8006088:	effffffe 	.word	0xeffffffe

0800608c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006098:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	225e      	movs	r2, #94	; 0x5e
 800609e:	2100      	movs	r1, #0
 80060a0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2256      	movs	r2, #86	; 0x56
 80060a6:	2100      	movs	r1, #0
 80060a8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	0018      	movs	r0, r3
 80060ae:	f7ff fc43 	bl	8005938 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b004      	add	sp, #16
 80060b8:	bd80      	pop	{r7, pc}

080060ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b086      	sub	sp, #24
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060c2:	f3ef 8310 	mrs	r3, PRIMASK
 80060c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80060c8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	2301      	movs	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f383 8810 	msr	PRIMASK, r3
}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2140      	movs	r1, #64	; 0x40
 80060e4:	438a      	bics	r2, r1
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f383 8810 	msr	PRIMASK, r3
}
 80060f2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2284      	movs	r2, #132	; 0x84
 80060f8:	2120      	movs	r1, #32
 80060fa:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	0018      	movs	r0, r3
 8006106:	f7ff fc0f 	bl	8005928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	46bd      	mov	sp, r7
 800610e:	b006      	add	sp, #24
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800611a:	46c0      	nop			; (mov r8, r8)
 800611c:	46bd      	mov	sp, r7
 800611e:	b002      	add	sp, #8
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	46bd      	mov	sp, r7
 800612e:	b002      	add	sp, #8
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	b002      	add	sp, #8
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2280      	movs	r2, #128	; 0x80
 8006150:	5c9b      	ldrb	r3, [r3, r2]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_UARTEx_DisableFifoMode+0x16>
 8006156:	2302      	movs	r3, #2
 8006158:	e027      	b.n	80061aa <HAL_UARTEx_DisableFifoMode+0x66>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2280      	movs	r2, #128	; 0x80
 800615e:	2101      	movs	r1, #1
 8006160:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2284      	movs	r2, #132	; 0x84
 8006166:	2124      	movs	r1, #36	; 0x24
 8006168:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2101      	movs	r1, #1
 800617e:	438a      	bics	r2, r1
 8006180:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a0b      	ldr	r2, [pc, #44]	; (80061b4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006186:	4013      	ands	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2284      	movs	r2, #132	; 0x84
 800619c:	2120      	movs	r1, #32
 800619e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2280      	movs	r2, #128	; 0x80
 80061a4:	2100      	movs	r1, #0
 80061a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	0018      	movs	r0, r3
 80061ac:	46bd      	mov	sp, r7
 80061ae:	b004      	add	sp, #16
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	dfffffff 	.word	0xdfffffff

080061b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2280      	movs	r2, #128	; 0x80
 80061c6:	5c9b      	ldrb	r3, [r3, r2]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e02e      	b.n	800622e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2280      	movs	r2, #128	; 0x80
 80061d4:	2101      	movs	r1, #1
 80061d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2284      	movs	r2, #132	; 0x84
 80061dc:	2124      	movs	r1, #36	; 0x24
 80061de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2101      	movs	r1, #1
 80061f4:	438a      	bics	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	08d9      	lsrs	r1, r3, #3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	0018      	movs	r0, r3
 8006210:	f000 f854 	bl	80062bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2284      	movs	r2, #132	; 0x84
 8006220:	2120      	movs	r1, #32
 8006222:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2280      	movs	r2, #128	; 0x80
 8006228:	2100      	movs	r1, #0
 800622a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b004      	add	sp, #16
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2280      	movs	r2, #128	; 0x80
 8006246:	5c9b      	ldrb	r3, [r3, r2]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800624c:	2302      	movs	r3, #2
 800624e:	e02f      	b.n	80062b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2280      	movs	r2, #128	; 0x80
 8006254:	2101      	movs	r1, #1
 8006256:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2284      	movs	r2, #132	; 0x84
 800625c:	2124      	movs	r1, #36	; 0x24
 800625e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2101      	movs	r1, #1
 8006274:	438a      	bics	r2, r1
 8006276:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	4a0e      	ldr	r2, [pc, #56]	; (80062b8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006280:	4013      	ands	r3, r2
 8006282:	0019      	movs	r1, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	0018      	movs	r0, r3
 8006292:	f000 f813 	bl	80062bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2284      	movs	r2, #132	; 0x84
 80062a2:	2120      	movs	r1, #32
 80062a4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2280      	movs	r2, #128	; 0x80
 80062aa:	2100      	movs	r1, #0
 80062ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	0018      	movs	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b004      	add	sp, #16
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	f1ffffff 	.word	0xf1ffffff

080062bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d108      	bne.n	80062de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	226a      	movs	r2, #106	; 0x6a
 80062d0:	2101      	movs	r1, #1
 80062d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2268      	movs	r2, #104	; 0x68
 80062d8:	2101      	movs	r1, #1
 80062da:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062dc:	e043      	b.n	8006366 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062de:	260f      	movs	r6, #15
 80062e0:	19bb      	adds	r3, r7, r6
 80062e2:	2208      	movs	r2, #8
 80062e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062e6:	200e      	movs	r0, #14
 80062e8:	183b      	adds	r3, r7, r0
 80062ea:	2208      	movs	r2, #8
 80062ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	0e5b      	lsrs	r3, r3, #25
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	240d      	movs	r4, #13
 80062fa:	193b      	adds	r3, r7, r4
 80062fc:	2107      	movs	r1, #7
 80062fe:	400a      	ands	r2, r1
 8006300:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	0f5b      	lsrs	r3, r3, #29
 800630a:	b2da      	uxtb	r2, r3
 800630c:	250c      	movs	r5, #12
 800630e:	197b      	adds	r3, r7, r5
 8006310:	2107      	movs	r1, #7
 8006312:	400a      	ands	r2, r1
 8006314:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006316:	183b      	adds	r3, r7, r0
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	197a      	adds	r2, r7, r5
 800631c:	7812      	ldrb	r2, [r2, #0]
 800631e:	4914      	ldr	r1, [pc, #80]	; (8006370 <UARTEx_SetNbDataToProcess+0xb4>)
 8006320:	5c8a      	ldrb	r2, [r1, r2]
 8006322:	435a      	muls	r2, r3
 8006324:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006326:	197b      	adds	r3, r7, r5
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	4a12      	ldr	r2, [pc, #72]	; (8006374 <UARTEx_SetNbDataToProcess+0xb8>)
 800632c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800632e:	0019      	movs	r1, r3
 8006330:	f7f9 ff8c 	bl	800024c <__divsi3>
 8006334:	0003      	movs	r3, r0
 8006336:	b299      	uxth	r1, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	226a      	movs	r2, #106	; 0x6a
 800633c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800633e:	19bb      	adds	r3, r7, r6
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	193a      	adds	r2, r7, r4
 8006344:	7812      	ldrb	r2, [r2, #0]
 8006346:	490a      	ldr	r1, [pc, #40]	; (8006370 <UARTEx_SetNbDataToProcess+0xb4>)
 8006348:	5c8a      	ldrb	r2, [r1, r2]
 800634a:	435a      	muls	r2, r3
 800634c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800634e:	193b      	adds	r3, r7, r4
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	4a08      	ldr	r2, [pc, #32]	; (8006374 <UARTEx_SetNbDataToProcess+0xb8>)
 8006354:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006356:	0019      	movs	r1, r3
 8006358:	f7f9 ff78 	bl	800024c <__divsi3>
 800635c:	0003      	movs	r3, r0
 800635e:	b299      	uxth	r1, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2268      	movs	r2, #104	; 0x68
 8006364:	5299      	strh	r1, [r3, r2]
}
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	46bd      	mov	sp, r7
 800636a:	b005      	add	sp, #20
 800636c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800636e:	46c0      	nop			; (mov r8, r8)
 8006370:	08007dd4 	.word	0x08007dd4
 8006374:	08007ddc 	.word	0x08007ddc

08006378 <atoi>:
 8006378:	b510      	push	{r4, lr}
 800637a:	220a      	movs	r2, #10
 800637c:	2100      	movs	r1, #0
 800637e:	f000 f9ad 	bl	80066dc <strtol>
 8006382:	bd10      	pop	{r4, pc}

08006384 <__errno>:
 8006384:	4b01      	ldr	r3, [pc, #4]	; (800638c <__errno+0x8>)
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	4770      	bx	lr
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	20000064 	.word	0x20000064

08006390 <__libc_init_array>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	2600      	movs	r6, #0
 8006394:	4d0c      	ldr	r5, [pc, #48]	; (80063c8 <__libc_init_array+0x38>)
 8006396:	4c0d      	ldr	r4, [pc, #52]	; (80063cc <__libc_init_array+0x3c>)
 8006398:	1b64      	subs	r4, r4, r5
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	42a6      	cmp	r6, r4
 800639e:	d109      	bne.n	80063b4 <__libc_init_array+0x24>
 80063a0:	2600      	movs	r6, #0
 80063a2:	f001 facd 	bl	8007940 <_init>
 80063a6:	4d0a      	ldr	r5, [pc, #40]	; (80063d0 <__libc_init_array+0x40>)
 80063a8:	4c0a      	ldr	r4, [pc, #40]	; (80063d4 <__libc_init_array+0x44>)
 80063aa:	1b64      	subs	r4, r4, r5
 80063ac:	10a4      	asrs	r4, r4, #2
 80063ae:	42a6      	cmp	r6, r4
 80063b0:	d105      	bne.n	80063be <__libc_init_array+0x2e>
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	00b3      	lsls	r3, r6, #2
 80063b6:	58eb      	ldr	r3, [r5, r3]
 80063b8:	4798      	blx	r3
 80063ba:	3601      	adds	r6, #1
 80063bc:	e7ee      	b.n	800639c <__libc_init_array+0xc>
 80063be:	00b3      	lsls	r3, r6, #2
 80063c0:	58eb      	ldr	r3, [r5, r3]
 80063c2:	4798      	blx	r3
 80063c4:	3601      	adds	r6, #1
 80063c6:	e7f2      	b.n	80063ae <__libc_init_array+0x1e>
 80063c8:	08007f80 	.word	0x08007f80
 80063cc:	08007f80 	.word	0x08007f80
 80063d0:	08007f80 	.word	0x08007f80
 80063d4:	08007f84 	.word	0x08007f84

080063d8 <memcpy>:
 80063d8:	2300      	movs	r3, #0
 80063da:	b510      	push	{r4, lr}
 80063dc:	429a      	cmp	r2, r3
 80063de:	d100      	bne.n	80063e2 <memcpy+0xa>
 80063e0:	bd10      	pop	{r4, pc}
 80063e2:	5ccc      	ldrb	r4, [r1, r3]
 80063e4:	54c4      	strb	r4, [r0, r3]
 80063e6:	3301      	adds	r3, #1
 80063e8:	e7f8      	b.n	80063dc <memcpy+0x4>

080063ea <memset>:
 80063ea:	0003      	movs	r3, r0
 80063ec:	1882      	adds	r2, r0, r2
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d100      	bne.n	80063f4 <memset+0xa>
 80063f2:	4770      	bx	lr
 80063f4:	7019      	strb	r1, [r3, #0]
 80063f6:	3301      	adds	r3, #1
 80063f8:	e7f9      	b.n	80063ee <memset+0x4>
	...

080063fc <iprintf>:
 80063fc:	b40f      	push	{r0, r1, r2, r3}
 80063fe:	4b0b      	ldr	r3, [pc, #44]	; (800642c <iprintf+0x30>)
 8006400:	b513      	push	{r0, r1, r4, lr}
 8006402:	681c      	ldr	r4, [r3, #0]
 8006404:	2c00      	cmp	r4, #0
 8006406:	d005      	beq.n	8006414 <iprintf+0x18>
 8006408:	69a3      	ldr	r3, [r4, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d102      	bne.n	8006414 <iprintf+0x18>
 800640e:	0020      	movs	r0, r4
 8006410:	f000 fb6c 	bl	8006aec <__sinit>
 8006414:	ab05      	add	r3, sp, #20
 8006416:	0020      	movs	r0, r4
 8006418:	9a04      	ldr	r2, [sp, #16]
 800641a:	68a1      	ldr	r1, [r4, #8]
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	f000 fea7 	bl	8007170 <_vfiprintf_r>
 8006422:	bc16      	pop	{r1, r2, r4}
 8006424:	bc08      	pop	{r3}
 8006426:	b004      	add	sp, #16
 8006428:	4718      	bx	r3
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	20000064 	.word	0x20000064

08006430 <_puts_r>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	0005      	movs	r5, r0
 8006434:	000e      	movs	r6, r1
 8006436:	2800      	cmp	r0, #0
 8006438:	d004      	beq.n	8006444 <_puts_r+0x14>
 800643a:	6983      	ldr	r3, [r0, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <_puts_r+0x14>
 8006440:	f000 fb54 	bl	8006aec <__sinit>
 8006444:	69ab      	ldr	r3, [r5, #24]
 8006446:	68ac      	ldr	r4, [r5, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <_puts_r+0x22>
 800644c:	0028      	movs	r0, r5
 800644e:	f000 fb4d 	bl	8006aec <__sinit>
 8006452:	4b2d      	ldr	r3, [pc, #180]	; (8006508 <_puts_r+0xd8>)
 8006454:	429c      	cmp	r4, r3
 8006456:	d122      	bne.n	800649e <_puts_r+0x6e>
 8006458:	686c      	ldr	r4, [r5, #4]
 800645a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800645c:	07db      	lsls	r3, r3, #31
 800645e:	d405      	bmi.n	800646c <_puts_r+0x3c>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	059b      	lsls	r3, r3, #22
 8006464:	d402      	bmi.n	800646c <_puts_r+0x3c>
 8006466:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006468:	f000 fbe1 	bl	8006c2e <__retarget_lock_acquire_recursive>
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	071b      	lsls	r3, r3, #28
 8006470:	d502      	bpl.n	8006478 <_puts_r+0x48>
 8006472:	6923      	ldr	r3, [r4, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d129      	bne.n	80064cc <_puts_r+0x9c>
 8006478:	0021      	movs	r1, r4
 800647a:	0028      	movs	r0, r5
 800647c:	f000 f990 	bl	80067a0 <__swsetup_r>
 8006480:	2800      	cmp	r0, #0
 8006482:	d023      	beq.n	80064cc <_puts_r+0x9c>
 8006484:	2501      	movs	r5, #1
 8006486:	426d      	negs	r5, r5
 8006488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800648a:	07db      	lsls	r3, r3, #31
 800648c:	d405      	bmi.n	800649a <_puts_r+0x6a>
 800648e:	89a3      	ldrh	r3, [r4, #12]
 8006490:	059b      	lsls	r3, r3, #22
 8006492:	d402      	bmi.n	800649a <_puts_r+0x6a>
 8006494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006496:	f000 fbcb 	bl	8006c30 <__retarget_lock_release_recursive>
 800649a:	0028      	movs	r0, r5
 800649c:	bd70      	pop	{r4, r5, r6, pc}
 800649e:	4b1b      	ldr	r3, [pc, #108]	; (800650c <_puts_r+0xdc>)
 80064a0:	429c      	cmp	r4, r3
 80064a2:	d101      	bne.n	80064a8 <_puts_r+0x78>
 80064a4:	68ac      	ldr	r4, [r5, #8]
 80064a6:	e7d8      	b.n	800645a <_puts_r+0x2a>
 80064a8:	4b19      	ldr	r3, [pc, #100]	; (8006510 <_puts_r+0xe0>)
 80064aa:	429c      	cmp	r4, r3
 80064ac:	d1d5      	bne.n	800645a <_puts_r+0x2a>
 80064ae:	68ec      	ldr	r4, [r5, #12]
 80064b0:	e7d3      	b.n	800645a <_puts_r+0x2a>
 80064b2:	3601      	adds	r6, #1
 80064b4:	60a3      	str	r3, [r4, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	da04      	bge.n	80064c4 <_puts_r+0x94>
 80064ba:	69a2      	ldr	r2, [r4, #24]
 80064bc:	429a      	cmp	r2, r3
 80064be:	dc16      	bgt.n	80064ee <_puts_r+0xbe>
 80064c0:	290a      	cmp	r1, #10
 80064c2:	d014      	beq.n	80064ee <_puts_r+0xbe>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	6022      	str	r2, [r4, #0]
 80064ca:	7019      	strb	r1, [r3, #0]
 80064cc:	68a3      	ldr	r3, [r4, #8]
 80064ce:	7831      	ldrb	r1, [r6, #0]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	2900      	cmp	r1, #0
 80064d4:	d1ed      	bne.n	80064b2 <_puts_r+0x82>
 80064d6:	60a3      	str	r3, [r4, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	da0f      	bge.n	80064fc <_puts_r+0xcc>
 80064dc:	0028      	movs	r0, r5
 80064de:	0022      	movs	r2, r4
 80064e0:	310a      	adds	r1, #10
 80064e2:	f000 f907 	bl	80066f4 <__swbuf_r>
 80064e6:	250a      	movs	r5, #10
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d1cd      	bne.n	8006488 <_puts_r+0x58>
 80064ec:	e7ca      	b.n	8006484 <_puts_r+0x54>
 80064ee:	0022      	movs	r2, r4
 80064f0:	0028      	movs	r0, r5
 80064f2:	f000 f8ff 	bl	80066f4 <__swbuf_r>
 80064f6:	1c43      	adds	r3, r0, #1
 80064f8:	d1e8      	bne.n	80064cc <_puts_r+0x9c>
 80064fa:	e7c3      	b.n	8006484 <_puts_r+0x54>
 80064fc:	250a      	movs	r5, #10
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	6022      	str	r2, [r4, #0]
 8006504:	701d      	strb	r5, [r3, #0]
 8006506:	e7bf      	b.n	8006488 <_puts_r+0x58>
 8006508:	08007f0c 	.word	0x08007f0c
 800650c:	08007f2c 	.word	0x08007f2c
 8006510:	08007eec 	.word	0x08007eec

08006514 <puts>:
 8006514:	b510      	push	{r4, lr}
 8006516:	4b03      	ldr	r3, [pc, #12]	; (8006524 <puts+0x10>)
 8006518:	0001      	movs	r1, r0
 800651a:	6818      	ldr	r0, [r3, #0]
 800651c:	f7ff ff88 	bl	8006430 <_puts_r>
 8006520:	bd10      	pop	{r4, pc}
 8006522:	46c0      	nop			; (mov r8, r8)
 8006524:	20000064 	.word	0x20000064

08006528 <siprintf>:
 8006528:	b40e      	push	{r1, r2, r3}
 800652a:	b500      	push	{lr}
 800652c:	490b      	ldr	r1, [pc, #44]	; (800655c <siprintf+0x34>)
 800652e:	b09c      	sub	sp, #112	; 0x70
 8006530:	ab1d      	add	r3, sp, #116	; 0x74
 8006532:	9002      	str	r0, [sp, #8]
 8006534:	9006      	str	r0, [sp, #24]
 8006536:	9107      	str	r1, [sp, #28]
 8006538:	9104      	str	r1, [sp, #16]
 800653a:	4809      	ldr	r0, [pc, #36]	; (8006560 <siprintf+0x38>)
 800653c:	4909      	ldr	r1, [pc, #36]	; (8006564 <siprintf+0x3c>)
 800653e:	cb04      	ldmia	r3!, {r2}
 8006540:	9105      	str	r1, [sp, #20]
 8006542:	6800      	ldr	r0, [r0, #0]
 8006544:	a902      	add	r1, sp, #8
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	f000 fcea 	bl	8006f20 <_svfiprintf_r>
 800654c:	2300      	movs	r3, #0
 800654e:	9a02      	ldr	r2, [sp, #8]
 8006550:	7013      	strb	r3, [r2, #0]
 8006552:	b01c      	add	sp, #112	; 0x70
 8006554:	bc08      	pop	{r3}
 8006556:	b003      	add	sp, #12
 8006558:	4718      	bx	r3
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	7fffffff 	.word	0x7fffffff
 8006560:	20000064 	.word	0x20000064
 8006564:	ffff0208 	.word	0xffff0208

08006568 <strcat>:
 8006568:	0002      	movs	r2, r0
 800656a:	b510      	push	{r4, lr}
 800656c:	7813      	ldrb	r3, [r2, #0]
 800656e:	0014      	movs	r4, r2
 8006570:	3201      	adds	r2, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1fa      	bne.n	800656c <strcat+0x4>
 8006576:	5cca      	ldrb	r2, [r1, r3]
 8006578:	54e2      	strb	r2, [r4, r3]
 800657a:	3301      	adds	r3, #1
 800657c:	2a00      	cmp	r2, #0
 800657e:	d1fa      	bne.n	8006576 <strcat+0xe>
 8006580:	bd10      	pop	{r4, pc}

08006582 <strcpy>:
 8006582:	0003      	movs	r3, r0
 8006584:	780a      	ldrb	r2, [r1, #0]
 8006586:	3101      	adds	r1, #1
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	3301      	adds	r3, #1
 800658c:	2a00      	cmp	r2, #0
 800658e:	d1f9      	bne.n	8006584 <strcpy+0x2>
 8006590:	4770      	bx	lr

08006592 <strstr>:
 8006592:	780a      	ldrb	r2, [r1, #0]
 8006594:	b530      	push	{r4, r5, lr}
 8006596:	2a00      	cmp	r2, #0
 8006598:	d10c      	bne.n	80065b4 <strstr+0x22>
 800659a:	bd30      	pop	{r4, r5, pc}
 800659c:	429a      	cmp	r2, r3
 800659e:	d108      	bne.n	80065b2 <strstr+0x20>
 80065a0:	2301      	movs	r3, #1
 80065a2:	5ccc      	ldrb	r4, [r1, r3]
 80065a4:	2c00      	cmp	r4, #0
 80065a6:	d0f8      	beq.n	800659a <strstr+0x8>
 80065a8:	5cc5      	ldrb	r5, [r0, r3]
 80065aa:	42a5      	cmp	r5, r4
 80065ac:	d101      	bne.n	80065b2 <strstr+0x20>
 80065ae:	3301      	adds	r3, #1
 80065b0:	e7f7      	b.n	80065a2 <strstr+0x10>
 80065b2:	3001      	adds	r0, #1
 80065b4:	7803      	ldrb	r3, [r0, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <strstr+0xa>
 80065ba:	0018      	movs	r0, r3
 80065bc:	e7ed      	b.n	800659a <strstr+0x8>
	...

080065c0 <_strtol_l.isra.0>:
 80065c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065c2:	b087      	sub	sp, #28
 80065c4:	001e      	movs	r6, r3
 80065c6:	9005      	str	r0, [sp, #20]
 80065c8:	9101      	str	r1, [sp, #4]
 80065ca:	9202      	str	r2, [sp, #8]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d045      	beq.n	800665c <_strtol_l.isra.0+0x9c>
 80065d0:	0008      	movs	r0, r1
 80065d2:	2b24      	cmp	r3, #36	; 0x24
 80065d4:	d842      	bhi.n	800665c <_strtol_l.isra.0+0x9c>
 80065d6:	4b3f      	ldr	r3, [pc, #252]	; (80066d4 <_strtol_l.isra.0+0x114>)
 80065d8:	2208      	movs	r2, #8
 80065da:	469c      	mov	ip, r3
 80065dc:	0003      	movs	r3, r0
 80065de:	4661      	mov	r1, ip
 80065e0:	781c      	ldrb	r4, [r3, #0]
 80065e2:	1c45      	adds	r5, r0, #1
 80065e4:	5d09      	ldrb	r1, [r1, r4]
 80065e6:	0028      	movs	r0, r5
 80065e8:	000f      	movs	r7, r1
 80065ea:	4017      	ands	r7, r2
 80065ec:	4211      	tst	r1, r2
 80065ee:	d1f5      	bne.n	80065dc <_strtol_l.isra.0+0x1c>
 80065f0:	2c2d      	cmp	r4, #45	; 0x2d
 80065f2:	d13a      	bne.n	800666a <_strtol_l.isra.0+0xaa>
 80065f4:	2701      	movs	r7, #1
 80065f6:	782c      	ldrb	r4, [r5, #0]
 80065f8:	1c9d      	adds	r5, r3, #2
 80065fa:	2e00      	cmp	r6, #0
 80065fc:	d065      	beq.n	80066ca <_strtol_l.isra.0+0x10a>
 80065fe:	2e10      	cmp	r6, #16
 8006600:	d109      	bne.n	8006616 <_strtol_l.isra.0+0x56>
 8006602:	2c30      	cmp	r4, #48	; 0x30
 8006604:	d107      	bne.n	8006616 <_strtol_l.isra.0+0x56>
 8006606:	2220      	movs	r2, #32
 8006608:	782b      	ldrb	r3, [r5, #0]
 800660a:	4393      	bics	r3, r2
 800660c:	2b58      	cmp	r3, #88	; 0x58
 800660e:	d157      	bne.n	80066c0 <_strtol_l.isra.0+0x100>
 8006610:	2610      	movs	r6, #16
 8006612:	786c      	ldrb	r4, [r5, #1]
 8006614:	3502      	adds	r5, #2
 8006616:	4b30      	ldr	r3, [pc, #192]	; (80066d8 <_strtol_l.isra.0+0x118>)
 8006618:	0031      	movs	r1, r6
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	0018      	movs	r0, r3
 800661e:	9303      	str	r3, [sp, #12]
 8006620:	f7f9 fe10 	bl	8000244 <__aeabi_uidivmod>
 8006624:	2300      	movs	r3, #0
 8006626:	2201      	movs	r2, #1
 8006628:	4684      	mov	ip, r0
 800662a:	0018      	movs	r0, r3
 800662c:	9104      	str	r1, [sp, #16]
 800662e:	4252      	negs	r2, r2
 8006630:	0021      	movs	r1, r4
 8006632:	3930      	subs	r1, #48	; 0x30
 8006634:	2909      	cmp	r1, #9
 8006636:	d81d      	bhi.n	8006674 <_strtol_l.isra.0+0xb4>
 8006638:	000c      	movs	r4, r1
 800663a:	42a6      	cmp	r6, r4
 800663c:	dd28      	ble.n	8006690 <_strtol_l.isra.0+0xd0>
 800663e:	2b00      	cmp	r3, #0
 8006640:	db24      	blt.n	800668c <_strtol_l.isra.0+0xcc>
 8006642:	0013      	movs	r3, r2
 8006644:	4584      	cmp	ip, r0
 8006646:	d306      	bcc.n	8006656 <_strtol_l.isra.0+0x96>
 8006648:	d102      	bne.n	8006650 <_strtol_l.isra.0+0x90>
 800664a:	9904      	ldr	r1, [sp, #16]
 800664c:	42a1      	cmp	r1, r4
 800664e:	db02      	blt.n	8006656 <_strtol_l.isra.0+0x96>
 8006650:	2301      	movs	r3, #1
 8006652:	4370      	muls	r0, r6
 8006654:	1820      	adds	r0, r4, r0
 8006656:	782c      	ldrb	r4, [r5, #0]
 8006658:	3501      	adds	r5, #1
 800665a:	e7e9      	b.n	8006630 <_strtol_l.isra.0+0x70>
 800665c:	f7ff fe92 	bl	8006384 <__errno>
 8006660:	2316      	movs	r3, #22
 8006662:	6003      	str	r3, [r0, #0]
 8006664:	2000      	movs	r0, #0
 8006666:	b007      	add	sp, #28
 8006668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800666a:	2c2b      	cmp	r4, #43	; 0x2b
 800666c:	d1c5      	bne.n	80065fa <_strtol_l.isra.0+0x3a>
 800666e:	782c      	ldrb	r4, [r5, #0]
 8006670:	1c9d      	adds	r5, r3, #2
 8006672:	e7c2      	b.n	80065fa <_strtol_l.isra.0+0x3a>
 8006674:	0021      	movs	r1, r4
 8006676:	3941      	subs	r1, #65	; 0x41
 8006678:	2919      	cmp	r1, #25
 800667a:	d801      	bhi.n	8006680 <_strtol_l.isra.0+0xc0>
 800667c:	3c37      	subs	r4, #55	; 0x37
 800667e:	e7dc      	b.n	800663a <_strtol_l.isra.0+0x7a>
 8006680:	0021      	movs	r1, r4
 8006682:	3961      	subs	r1, #97	; 0x61
 8006684:	2919      	cmp	r1, #25
 8006686:	d803      	bhi.n	8006690 <_strtol_l.isra.0+0xd0>
 8006688:	3c57      	subs	r4, #87	; 0x57
 800668a:	e7d6      	b.n	800663a <_strtol_l.isra.0+0x7a>
 800668c:	0013      	movs	r3, r2
 800668e:	e7e2      	b.n	8006656 <_strtol_l.isra.0+0x96>
 8006690:	2b00      	cmp	r3, #0
 8006692:	da09      	bge.n	80066a8 <_strtol_l.isra.0+0xe8>
 8006694:	2322      	movs	r3, #34	; 0x22
 8006696:	9a05      	ldr	r2, [sp, #20]
 8006698:	9803      	ldr	r0, [sp, #12]
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	9b02      	ldr	r3, [sp, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0e1      	beq.n	8006666 <_strtol_l.isra.0+0xa6>
 80066a2:	1e6b      	subs	r3, r5, #1
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	e007      	b.n	80066b8 <_strtol_l.isra.0+0xf8>
 80066a8:	2f00      	cmp	r7, #0
 80066aa:	d000      	beq.n	80066ae <_strtol_l.isra.0+0xee>
 80066ac:	4240      	negs	r0, r0
 80066ae:	9a02      	ldr	r2, [sp, #8]
 80066b0:	2a00      	cmp	r2, #0
 80066b2:	d0d8      	beq.n	8006666 <_strtol_l.isra.0+0xa6>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1f4      	bne.n	80066a2 <_strtol_l.isra.0+0xe2>
 80066b8:	9b02      	ldr	r3, [sp, #8]
 80066ba:	9a01      	ldr	r2, [sp, #4]
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	e7d2      	b.n	8006666 <_strtol_l.isra.0+0xa6>
 80066c0:	2430      	movs	r4, #48	; 0x30
 80066c2:	2e00      	cmp	r6, #0
 80066c4:	d1a7      	bne.n	8006616 <_strtol_l.isra.0+0x56>
 80066c6:	3608      	adds	r6, #8
 80066c8:	e7a5      	b.n	8006616 <_strtol_l.isra.0+0x56>
 80066ca:	2c30      	cmp	r4, #48	; 0x30
 80066cc:	d09b      	beq.n	8006606 <_strtol_l.isra.0+0x46>
 80066ce:	260a      	movs	r6, #10
 80066d0:	e7a1      	b.n	8006616 <_strtol_l.isra.0+0x56>
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	08007de9 	.word	0x08007de9
 80066d8:	7fffffff 	.word	0x7fffffff

080066dc <strtol>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	0013      	movs	r3, r2
 80066e0:	000a      	movs	r2, r1
 80066e2:	0001      	movs	r1, r0
 80066e4:	4802      	ldr	r0, [pc, #8]	; (80066f0 <strtol+0x14>)
 80066e6:	6800      	ldr	r0, [r0, #0]
 80066e8:	f7ff ff6a 	bl	80065c0 <_strtol_l.isra.0>
 80066ec:	bd10      	pop	{r4, pc}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	20000064 	.word	0x20000064

080066f4 <__swbuf_r>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	0005      	movs	r5, r0
 80066f8:	000e      	movs	r6, r1
 80066fa:	0014      	movs	r4, r2
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d004      	beq.n	800670a <__swbuf_r+0x16>
 8006700:	6983      	ldr	r3, [r0, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <__swbuf_r+0x16>
 8006706:	f000 f9f1 	bl	8006aec <__sinit>
 800670a:	4b22      	ldr	r3, [pc, #136]	; (8006794 <__swbuf_r+0xa0>)
 800670c:	429c      	cmp	r4, r3
 800670e:	d12e      	bne.n	800676e <__swbuf_r+0x7a>
 8006710:	686c      	ldr	r4, [r5, #4]
 8006712:	69a3      	ldr	r3, [r4, #24]
 8006714:	60a3      	str	r3, [r4, #8]
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	071b      	lsls	r3, r3, #28
 800671a:	d532      	bpl.n	8006782 <__swbuf_r+0x8e>
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d02f      	beq.n	8006782 <__swbuf_r+0x8e>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	6922      	ldr	r2, [r4, #16]
 8006726:	b2f7      	uxtb	r7, r6
 8006728:	1a98      	subs	r0, r3, r2
 800672a:	6963      	ldr	r3, [r4, #20]
 800672c:	b2f6      	uxtb	r6, r6
 800672e:	4283      	cmp	r3, r0
 8006730:	dc05      	bgt.n	800673e <__swbuf_r+0x4a>
 8006732:	0021      	movs	r1, r4
 8006734:	0028      	movs	r0, r5
 8006736:	f000 f937 	bl	80069a8 <_fflush_r>
 800673a:	2800      	cmp	r0, #0
 800673c:	d127      	bne.n	800678e <__swbuf_r+0x9a>
 800673e:	68a3      	ldr	r3, [r4, #8]
 8006740:	3001      	adds	r0, #1
 8006742:	3b01      	subs	r3, #1
 8006744:	60a3      	str	r3, [r4, #8]
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	6022      	str	r2, [r4, #0]
 800674c:	701f      	strb	r7, [r3, #0]
 800674e:	6963      	ldr	r3, [r4, #20]
 8006750:	4283      	cmp	r3, r0
 8006752:	d004      	beq.n	800675e <__swbuf_r+0x6a>
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	07db      	lsls	r3, r3, #31
 8006758:	d507      	bpl.n	800676a <__swbuf_r+0x76>
 800675a:	2e0a      	cmp	r6, #10
 800675c:	d105      	bne.n	800676a <__swbuf_r+0x76>
 800675e:	0021      	movs	r1, r4
 8006760:	0028      	movs	r0, r5
 8006762:	f000 f921 	bl	80069a8 <_fflush_r>
 8006766:	2800      	cmp	r0, #0
 8006768:	d111      	bne.n	800678e <__swbuf_r+0x9a>
 800676a:	0030      	movs	r0, r6
 800676c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800676e:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <__swbuf_r+0xa4>)
 8006770:	429c      	cmp	r4, r3
 8006772:	d101      	bne.n	8006778 <__swbuf_r+0x84>
 8006774:	68ac      	ldr	r4, [r5, #8]
 8006776:	e7cc      	b.n	8006712 <__swbuf_r+0x1e>
 8006778:	4b08      	ldr	r3, [pc, #32]	; (800679c <__swbuf_r+0xa8>)
 800677a:	429c      	cmp	r4, r3
 800677c:	d1c9      	bne.n	8006712 <__swbuf_r+0x1e>
 800677e:	68ec      	ldr	r4, [r5, #12]
 8006780:	e7c7      	b.n	8006712 <__swbuf_r+0x1e>
 8006782:	0021      	movs	r1, r4
 8006784:	0028      	movs	r0, r5
 8006786:	f000 f80b 	bl	80067a0 <__swsetup_r>
 800678a:	2800      	cmp	r0, #0
 800678c:	d0c9      	beq.n	8006722 <__swbuf_r+0x2e>
 800678e:	2601      	movs	r6, #1
 8006790:	4276      	negs	r6, r6
 8006792:	e7ea      	b.n	800676a <__swbuf_r+0x76>
 8006794:	08007f0c 	.word	0x08007f0c
 8006798:	08007f2c 	.word	0x08007f2c
 800679c:	08007eec 	.word	0x08007eec

080067a0 <__swsetup_r>:
 80067a0:	4b37      	ldr	r3, [pc, #220]	; (8006880 <__swsetup_r+0xe0>)
 80067a2:	b570      	push	{r4, r5, r6, lr}
 80067a4:	681d      	ldr	r5, [r3, #0]
 80067a6:	0006      	movs	r6, r0
 80067a8:	000c      	movs	r4, r1
 80067aa:	2d00      	cmp	r5, #0
 80067ac:	d005      	beq.n	80067ba <__swsetup_r+0x1a>
 80067ae:	69ab      	ldr	r3, [r5, #24]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d102      	bne.n	80067ba <__swsetup_r+0x1a>
 80067b4:	0028      	movs	r0, r5
 80067b6:	f000 f999 	bl	8006aec <__sinit>
 80067ba:	4b32      	ldr	r3, [pc, #200]	; (8006884 <__swsetup_r+0xe4>)
 80067bc:	429c      	cmp	r4, r3
 80067be:	d10f      	bne.n	80067e0 <__swsetup_r+0x40>
 80067c0:	686c      	ldr	r4, [r5, #4]
 80067c2:	230c      	movs	r3, #12
 80067c4:	5ee2      	ldrsh	r2, [r4, r3]
 80067c6:	b293      	uxth	r3, r2
 80067c8:	0711      	lsls	r1, r2, #28
 80067ca:	d42d      	bmi.n	8006828 <__swsetup_r+0x88>
 80067cc:	06d9      	lsls	r1, r3, #27
 80067ce:	d411      	bmi.n	80067f4 <__swsetup_r+0x54>
 80067d0:	2309      	movs	r3, #9
 80067d2:	2001      	movs	r0, #1
 80067d4:	6033      	str	r3, [r6, #0]
 80067d6:	3337      	adds	r3, #55	; 0x37
 80067d8:	4313      	orrs	r3, r2
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	4240      	negs	r0, r0
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	4b29      	ldr	r3, [pc, #164]	; (8006888 <__swsetup_r+0xe8>)
 80067e2:	429c      	cmp	r4, r3
 80067e4:	d101      	bne.n	80067ea <__swsetup_r+0x4a>
 80067e6:	68ac      	ldr	r4, [r5, #8]
 80067e8:	e7eb      	b.n	80067c2 <__swsetup_r+0x22>
 80067ea:	4b28      	ldr	r3, [pc, #160]	; (800688c <__swsetup_r+0xec>)
 80067ec:	429c      	cmp	r4, r3
 80067ee:	d1e8      	bne.n	80067c2 <__swsetup_r+0x22>
 80067f0:	68ec      	ldr	r4, [r5, #12]
 80067f2:	e7e6      	b.n	80067c2 <__swsetup_r+0x22>
 80067f4:	075b      	lsls	r3, r3, #29
 80067f6:	d513      	bpl.n	8006820 <__swsetup_r+0x80>
 80067f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067fa:	2900      	cmp	r1, #0
 80067fc:	d008      	beq.n	8006810 <__swsetup_r+0x70>
 80067fe:	0023      	movs	r3, r4
 8006800:	3344      	adds	r3, #68	; 0x44
 8006802:	4299      	cmp	r1, r3
 8006804:	d002      	beq.n	800680c <__swsetup_r+0x6c>
 8006806:	0030      	movs	r0, r6
 8006808:	f000 fa80 	bl	8006d0c <_free_r>
 800680c:	2300      	movs	r3, #0
 800680e:	6363      	str	r3, [r4, #52]	; 0x34
 8006810:	2224      	movs	r2, #36	; 0x24
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	4393      	bics	r3, r2
 8006816:	81a3      	strh	r3, [r4, #12]
 8006818:	2300      	movs	r3, #0
 800681a:	6063      	str	r3, [r4, #4]
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	2308      	movs	r3, #8
 8006822:	89a2      	ldrh	r2, [r4, #12]
 8006824:	4313      	orrs	r3, r2
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10b      	bne.n	8006846 <__swsetup_r+0xa6>
 800682e:	21a0      	movs	r1, #160	; 0xa0
 8006830:	2280      	movs	r2, #128	; 0x80
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	0089      	lsls	r1, r1, #2
 8006836:	0092      	lsls	r2, r2, #2
 8006838:	400b      	ands	r3, r1
 800683a:	4293      	cmp	r3, r2
 800683c:	d003      	beq.n	8006846 <__swsetup_r+0xa6>
 800683e:	0021      	movs	r1, r4
 8006840:	0030      	movs	r0, r6
 8006842:	f000 fa1f 	bl	8006c84 <__smakebuf_r>
 8006846:	220c      	movs	r2, #12
 8006848:	5ea3      	ldrsh	r3, [r4, r2]
 800684a:	2001      	movs	r0, #1
 800684c:	001a      	movs	r2, r3
 800684e:	b299      	uxth	r1, r3
 8006850:	4002      	ands	r2, r0
 8006852:	4203      	tst	r3, r0
 8006854:	d00f      	beq.n	8006876 <__swsetup_r+0xd6>
 8006856:	2200      	movs	r2, #0
 8006858:	60a2      	str	r2, [r4, #8]
 800685a:	6962      	ldr	r2, [r4, #20]
 800685c:	4252      	negs	r2, r2
 800685e:	61a2      	str	r2, [r4, #24]
 8006860:	2000      	movs	r0, #0
 8006862:	6922      	ldr	r2, [r4, #16]
 8006864:	4282      	cmp	r2, r0
 8006866:	d1ba      	bne.n	80067de <__swsetup_r+0x3e>
 8006868:	060a      	lsls	r2, r1, #24
 800686a:	d5b8      	bpl.n	80067de <__swsetup_r+0x3e>
 800686c:	2240      	movs	r2, #64	; 0x40
 800686e:	4313      	orrs	r3, r2
 8006870:	81a3      	strh	r3, [r4, #12]
 8006872:	3801      	subs	r0, #1
 8006874:	e7b3      	b.n	80067de <__swsetup_r+0x3e>
 8006876:	0788      	lsls	r0, r1, #30
 8006878:	d400      	bmi.n	800687c <__swsetup_r+0xdc>
 800687a:	6962      	ldr	r2, [r4, #20]
 800687c:	60a2      	str	r2, [r4, #8]
 800687e:	e7ef      	b.n	8006860 <__swsetup_r+0xc0>
 8006880:	20000064 	.word	0x20000064
 8006884:	08007f0c 	.word	0x08007f0c
 8006888:	08007f2c 	.word	0x08007f2c
 800688c:	08007eec 	.word	0x08007eec

08006890 <__sflush_r>:
 8006890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006892:	898b      	ldrh	r3, [r1, #12]
 8006894:	0005      	movs	r5, r0
 8006896:	000c      	movs	r4, r1
 8006898:	071a      	lsls	r2, r3, #28
 800689a:	d45f      	bmi.n	800695c <__sflush_r+0xcc>
 800689c:	684a      	ldr	r2, [r1, #4]
 800689e:	2a00      	cmp	r2, #0
 80068a0:	dc04      	bgt.n	80068ac <__sflush_r+0x1c>
 80068a2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	dc01      	bgt.n	80068ac <__sflush_r+0x1c>
 80068a8:	2000      	movs	r0, #0
 80068aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80068ae:	2f00      	cmp	r7, #0
 80068b0:	d0fa      	beq.n	80068a8 <__sflush_r+0x18>
 80068b2:	2200      	movs	r2, #0
 80068b4:	2180      	movs	r1, #128	; 0x80
 80068b6:	682e      	ldr	r6, [r5, #0]
 80068b8:	602a      	str	r2, [r5, #0]
 80068ba:	001a      	movs	r2, r3
 80068bc:	0149      	lsls	r1, r1, #5
 80068be:	400a      	ands	r2, r1
 80068c0:	420b      	tst	r3, r1
 80068c2:	d034      	beq.n	800692e <__sflush_r+0x9e>
 80068c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	075b      	lsls	r3, r3, #29
 80068ca:	d506      	bpl.n	80068da <__sflush_r+0x4a>
 80068cc:	6863      	ldr	r3, [r4, #4]
 80068ce:	1ac0      	subs	r0, r0, r3
 80068d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <__sflush_r+0x4a>
 80068d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068d8:	1ac0      	subs	r0, r0, r3
 80068da:	0002      	movs	r2, r0
 80068dc:	6a21      	ldr	r1, [r4, #32]
 80068de:	2300      	movs	r3, #0
 80068e0:	0028      	movs	r0, r5
 80068e2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80068e4:	47b8      	blx	r7
 80068e6:	89a1      	ldrh	r1, [r4, #12]
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d106      	bne.n	80068fa <__sflush_r+0x6a>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	2b1d      	cmp	r3, #29
 80068f0:	d831      	bhi.n	8006956 <__sflush_r+0xc6>
 80068f2:	4a2c      	ldr	r2, [pc, #176]	; (80069a4 <__sflush_r+0x114>)
 80068f4:	40da      	lsrs	r2, r3
 80068f6:	07d3      	lsls	r3, r2, #31
 80068f8:	d52d      	bpl.n	8006956 <__sflush_r+0xc6>
 80068fa:	2300      	movs	r3, #0
 80068fc:	6063      	str	r3, [r4, #4]
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	04cb      	lsls	r3, r1, #19
 8006904:	d505      	bpl.n	8006912 <__sflush_r+0x82>
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	d102      	bne.n	8006910 <__sflush_r+0x80>
 800690a:	682b      	ldr	r3, [r5, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d100      	bne.n	8006912 <__sflush_r+0x82>
 8006910:	6560      	str	r0, [r4, #84]	; 0x54
 8006912:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006914:	602e      	str	r6, [r5, #0]
 8006916:	2900      	cmp	r1, #0
 8006918:	d0c6      	beq.n	80068a8 <__sflush_r+0x18>
 800691a:	0023      	movs	r3, r4
 800691c:	3344      	adds	r3, #68	; 0x44
 800691e:	4299      	cmp	r1, r3
 8006920:	d002      	beq.n	8006928 <__sflush_r+0x98>
 8006922:	0028      	movs	r0, r5
 8006924:	f000 f9f2 	bl	8006d0c <_free_r>
 8006928:	2000      	movs	r0, #0
 800692a:	6360      	str	r0, [r4, #52]	; 0x34
 800692c:	e7bd      	b.n	80068aa <__sflush_r+0x1a>
 800692e:	2301      	movs	r3, #1
 8006930:	0028      	movs	r0, r5
 8006932:	6a21      	ldr	r1, [r4, #32]
 8006934:	47b8      	blx	r7
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	d1c5      	bne.n	80068c6 <__sflush_r+0x36>
 800693a:	682b      	ldr	r3, [r5, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0c2      	beq.n	80068c6 <__sflush_r+0x36>
 8006940:	2b1d      	cmp	r3, #29
 8006942:	d001      	beq.n	8006948 <__sflush_r+0xb8>
 8006944:	2b16      	cmp	r3, #22
 8006946:	d101      	bne.n	800694c <__sflush_r+0xbc>
 8006948:	602e      	str	r6, [r5, #0]
 800694a:	e7ad      	b.n	80068a8 <__sflush_r+0x18>
 800694c:	2340      	movs	r3, #64	; 0x40
 800694e:	89a2      	ldrh	r2, [r4, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	81a3      	strh	r3, [r4, #12]
 8006954:	e7a9      	b.n	80068aa <__sflush_r+0x1a>
 8006956:	2340      	movs	r3, #64	; 0x40
 8006958:	430b      	orrs	r3, r1
 800695a:	e7fa      	b.n	8006952 <__sflush_r+0xc2>
 800695c:	690f      	ldr	r7, [r1, #16]
 800695e:	2f00      	cmp	r7, #0
 8006960:	d0a2      	beq.n	80068a8 <__sflush_r+0x18>
 8006962:	680a      	ldr	r2, [r1, #0]
 8006964:	600f      	str	r7, [r1, #0]
 8006966:	1bd2      	subs	r2, r2, r7
 8006968:	9201      	str	r2, [sp, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	079b      	lsls	r3, r3, #30
 800696e:	d100      	bne.n	8006972 <__sflush_r+0xe2>
 8006970:	694a      	ldr	r2, [r1, #20]
 8006972:	60a2      	str	r2, [r4, #8]
 8006974:	9b01      	ldr	r3, [sp, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	dc00      	bgt.n	800697c <__sflush_r+0xec>
 800697a:	e795      	b.n	80068a8 <__sflush_r+0x18>
 800697c:	003a      	movs	r2, r7
 800697e:	0028      	movs	r0, r5
 8006980:	9b01      	ldr	r3, [sp, #4]
 8006982:	6a21      	ldr	r1, [r4, #32]
 8006984:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006986:	47b0      	blx	r6
 8006988:	2800      	cmp	r0, #0
 800698a:	dc06      	bgt.n	800699a <__sflush_r+0x10a>
 800698c:	2340      	movs	r3, #64	; 0x40
 800698e:	2001      	movs	r0, #1
 8006990:	89a2      	ldrh	r2, [r4, #12]
 8006992:	4240      	negs	r0, r0
 8006994:	4313      	orrs	r3, r2
 8006996:	81a3      	strh	r3, [r4, #12]
 8006998:	e787      	b.n	80068aa <__sflush_r+0x1a>
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	183f      	adds	r7, r7, r0
 800699e:	1a1b      	subs	r3, r3, r0
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	e7e7      	b.n	8006974 <__sflush_r+0xe4>
 80069a4:	20400001 	.word	0x20400001

080069a8 <_fflush_r>:
 80069a8:	690b      	ldr	r3, [r1, #16]
 80069aa:	b570      	push	{r4, r5, r6, lr}
 80069ac:	0005      	movs	r5, r0
 80069ae:	000c      	movs	r4, r1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <_fflush_r+0x12>
 80069b4:	2500      	movs	r5, #0
 80069b6:	0028      	movs	r0, r5
 80069b8:	bd70      	pop	{r4, r5, r6, pc}
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d004      	beq.n	80069c8 <_fflush_r+0x20>
 80069be:	6983      	ldr	r3, [r0, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <_fflush_r+0x20>
 80069c4:	f000 f892 	bl	8006aec <__sinit>
 80069c8:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <_fflush_r+0x74>)
 80069ca:	429c      	cmp	r4, r3
 80069cc:	d11b      	bne.n	8006a06 <_fflush_r+0x5e>
 80069ce:	686c      	ldr	r4, [r5, #4]
 80069d0:	220c      	movs	r2, #12
 80069d2:	5ea3      	ldrsh	r3, [r4, r2]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0ed      	beq.n	80069b4 <_fflush_r+0xc>
 80069d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069da:	07d2      	lsls	r2, r2, #31
 80069dc:	d404      	bmi.n	80069e8 <_fflush_r+0x40>
 80069de:	059b      	lsls	r3, r3, #22
 80069e0:	d402      	bmi.n	80069e8 <_fflush_r+0x40>
 80069e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069e4:	f000 f923 	bl	8006c2e <__retarget_lock_acquire_recursive>
 80069e8:	0028      	movs	r0, r5
 80069ea:	0021      	movs	r1, r4
 80069ec:	f7ff ff50 	bl	8006890 <__sflush_r>
 80069f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069f2:	0005      	movs	r5, r0
 80069f4:	07db      	lsls	r3, r3, #31
 80069f6:	d4de      	bmi.n	80069b6 <_fflush_r+0xe>
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	059b      	lsls	r3, r3, #22
 80069fc:	d4db      	bmi.n	80069b6 <_fflush_r+0xe>
 80069fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a00:	f000 f916 	bl	8006c30 <__retarget_lock_release_recursive>
 8006a04:	e7d7      	b.n	80069b6 <_fflush_r+0xe>
 8006a06:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <_fflush_r+0x78>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	d101      	bne.n	8006a10 <_fflush_r+0x68>
 8006a0c:	68ac      	ldr	r4, [r5, #8]
 8006a0e:	e7df      	b.n	80069d0 <_fflush_r+0x28>
 8006a10:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <_fflush_r+0x7c>)
 8006a12:	429c      	cmp	r4, r3
 8006a14:	d1dc      	bne.n	80069d0 <_fflush_r+0x28>
 8006a16:	68ec      	ldr	r4, [r5, #12]
 8006a18:	e7da      	b.n	80069d0 <_fflush_r+0x28>
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	08007f0c 	.word	0x08007f0c
 8006a20:	08007f2c 	.word	0x08007f2c
 8006a24:	08007eec 	.word	0x08007eec

08006a28 <std>:
 8006a28:	2300      	movs	r3, #0
 8006a2a:	b510      	push	{r4, lr}
 8006a2c:	0004      	movs	r4, r0
 8006a2e:	6003      	str	r3, [r0, #0]
 8006a30:	6043      	str	r3, [r0, #4]
 8006a32:	6083      	str	r3, [r0, #8]
 8006a34:	8181      	strh	r1, [r0, #12]
 8006a36:	6643      	str	r3, [r0, #100]	; 0x64
 8006a38:	0019      	movs	r1, r3
 8006a3a:	81c2      	strh	r2, [r0, #14]
 8006a3c:	6103      	str	r3, [r0, #16]
 8006a3e:	6143      	str	r3, [r0, #20]
 8006a40:	6183      	str	r3, [r0, #24]
 8006a42:	2208      	movs	r2, #8
 8006a44:	305c      	adds	r0, #92	; 0x5c
 8006a46:	f7ff fcd0 	bl	80063ea <memset>
 8006a4a:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <std+0x38>)
 8006a4c:	6263      	str	r3, [r4, #36]	; 0x24
 8006a4e:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <std+0x3c>)
 8006a50:	6224      	str	r4, [r4, #32]
 8006a52:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a54:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <std+0x40>)
 8006a56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a58:	4b04      	ldr	r3, [pc, #16]	; (8006a6c <std+0x44>)
 8006a5a:	6323      	str	r3, [r4, #48]	; 0x30
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	0800770d 	.word	0x0800770d
 8006a64:	08007735 	.word	0x08007735
 8006a68:	0800776d 	.word	0x0800776d
 8006a6c:	08007799 	.word	0x08007799

08006a70 <_cleanup_r>:
 8006a70:	b510      	push	{r4, lr}
 8006a72:	4902      	ldr	r1, [pc, #8]	; (8006a7c <_cleanup_r+0xc>)
 8006a74:	f000 f8ba 	bl	8006bec <_fwalk_reent>
 8006a78:	bd10      	pop	{r4, pc}
 8006a7a:	46c0      	nop			; (mov r8, r8)
 8006a7c:	080069a9 	.word	0x080069a9

08006a80 <__sfmoreglue>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	2568      	movs	r5, #104	; 0x68
 8006a84:	1e4a      	subs	r2, r1, #1
 8006a86:	4355      	muls	r5, r2
 8006a88:	000e      	movs	r6, r1
 8006a8a:	0029      	movs	r1, r5
 8006a8c:	3174      	adds	r1, #116	; 0x74
 8006a8e:	f000 f987 	bl	8006da0 <_malloc_r>
 8006a92:	1e04      	subs	r4, r0, #0
 8006a94:	d008      	beq.n	8006aa8 <__sfmoreglue+0x28>
 8006a96:	2100      	movs	r1, #0
 8006a98:	002a      	movs	r2, r5
 8006a9a:	6001      	str	r1, [r0, #0]
 8006a9c:	6046      	str	r6, [r0, #4]
 8006a9e:	300c      	adds	r0, #12
 8006aa0:	60a0      	str	r0, [r4, #8]
 8006aa2:	3268      	adds	r2, #104	; 0x68
 8006aa4:	f7ff fca1 	bl	80063ea <memset>
 8006aa8:	0020      	movs	r0, r4
 8006aaa:	bd70      	pop	{r4, r5, r6, pc}

08006aac <__sfp_lock_acquire>:
 8006aac:	b510      	push	{r4, lr}
 8006aae:	4802      	ldr	r0, [pc, #8]	; (8006ab8 <__sfp_lock_acquire+0xc>)
 8006ab0:	f000 f8bd 	bl	8006c2e <__retarget_lock_acquire_recursive>
 8006ab4:	bd10      	pop	{r4, pc}
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	20000770 	.word	0x20000770

08006abc <__sfp_lock_release>:
 8006abc:	b510      	push	{r4, lr}
 8006abe:	4802      	ldr	r0, [pc, #8]	; (8006ac8 <__sfp_lock_release+0xc>)
 8006ac0:	f000 f8b6 	bl	8006c30 <__retarget_lock_release_recursive>
 8006ac4:	bd10      	pop	{r4, pc}
 8006ac6:	46c0      	nop			; (mov r8, r8)
 8006ac8:	20000770 	.word	0x20000770

08006acc <__sinit_lock_acquire>:
 8006acc:	b510      	push	{r4, lr}
 8006ace:	4802      	ldr	r0, [pc, #8]	; (8006ad8 <__sinit_lock_acquire+0xc>)
 8006ad0:	f000 f8ad 	bl	8006c2e <__retarget_lock_acquire_recursive>
 8006ad4:	bd10      	pop	{r4, pc}
 8006ad6:	46c0      	nop			; (mov r8, r8)
 8006ad8:	2000076b 	.word	0x2000076b

08006adc <__sinit_lock_release>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	4802      	ldr	r0, [pc, #8]	; (8006ae8 <__sinit_lock_release+0xc>)
 8006ae0:	f000 f8a6 	bl	8006c30 <__retarget_lock_release_recursive>
 8006ae4:	bd10      	pop	{r4, pc}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	2000076b 	.word	0x2000076b

08006aec <__sinit>:
 8006aec:	b513      	push	{r0, r1, r4, lr}
 8006aee:	0004      	movs	r4, r0
 8006af0:	f7ff ffec 	bl	8006acc <__sinit_lock_acquire>
 8006af4:	69a3      	ldr	r3, [r4, #24]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <__sinit+0x14>
 8006afa:	f7ff ffef 	bl	8006adc <__sinit_lock_release>
 8006afe:	bd13      	pop	{r0, r1, r4, pc}
 8006b00:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b02:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006b04:	6523      	str	r3, [r4, #80]	; 0x50
 8006b06:	4b13      	ldr	r3, [pc, #76]	; (8006b54 <__sinit+0x68>)
 8006b08:	4a13      	ldr	r2, [pc, #76]	; (8006b58 <__sinit+0x6c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b0e:	9301      	str	r3, [sp, #4]
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d101      	bne.n	8006b18 <__sinit+0x2c>
 8006b14:	2301      	movs	r3, #1
 8006b16:	61a3      	str	r3, [r4, #24]
 8006b18:	0020      	movs	r0, r4
 8006b1a:	f000 f81f 	bl	8006b5c <__sfp>
 8006b1e:	6060      	str	r0, [r4, #4]
 8006b20:	0020      	movs	r0, r4
 8006b22:	f000 f81b 	bl	8006b5c <__sfp>
 8006b26:	60a0      	str	r0, [r4, #8]
 8006b28:	0020      	movs	r0, r4
 8006b2a:	f000 f817 	bl	8006b5c <__sfp>
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2104      	movs	r1, #4
 8006b32:	60e0      	str	r0, [r4, #12]
 8006b34:	6860      	ldr	r0, [r4, #4]
 8006b36:	f7ff ff77 	bl	8006a28 <std>
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	2109      	movs	r1, #9
 8006b3e:	68a0      	ldr	r0, [r4, #8]
 8006b40:	f7ff ff72 	bl	8006a28 <std>
 8006b44:	2202      	movs	r2, #2
 8006b46:	2112      	movs	r1, #18
 8006b48:	68e0      	ldr	r0, [r4, #12]
 8006b4a:	f7ff ff6d 	bl	8006a28 <std>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	61a3      	str	r3, [r4, #24]
 8006b52:	e7d2      	b.n	8006afa <__sinit+0xe>
 8006b54:	08007de4 	.word	0x08007de4
 8006b58:	08006a71 	.word	0x08006a71

08006b5c <__sfp>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	0007      	movs	r7, r0
 8006b60:	f7ff ffa4 	bl	8006aac <__sfp_lock_acquire>
 8006b64:	4b1f      	ldr	r3, [pc, #124]	; (8006be4 <__sfp+0x88>)
 8006b66:	681e      	ldr	r6, [r3, #0]
 8006b68:	69b3      	ldr	r3, [r6, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d102      	bne.n	8006b74 <__sfp+0x18>
 8006b6e:	0030      	movs	r0, r6
 8006b70:	f7ff ffbc 	bl	8006aec <__sinit>
 8006b74:	3648      	adds	r6, #72	; 0x48
 8006b76:	68b4      	ldr	r4, [r6, #8]
 8006b78:	6873      	ldr	r3, [r6, #4]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	d504      	bpl.n	8006b88 <__sfp+0x2c>
 8006b7e:	6833      	ldr	r3, [r6, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d022      	beq.n	8006bca <__sfp+0x6e>
 8006b84:	6836      	ldr	r6, [r6, #0]
 8006b86:	e7f6      	b.n	8006b76 <__sfp+0x1a>
 8006b88:	220c      	movs	r2, #12
 8006b8a:	5ea5      	ldrsh	r5, [r4, r2]
 8006b8c:	2d00      	cmp	r5, #0
 8006b8e:	d11a      	bne.n	8006bc6 <__sfp+0x6a>
 8006b90:	0020      	movs	r0, r4
 8006b92:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <__sfp+0x8c>)
 8006b94:	3058      	adds	r0, #88	; 0x58
 8006b96:	60e3      	str	r3, [r4, #12]
 8006b98:	6665      	str	r5, [r4, #100]	; 0x64
 8006b9a:	f000 f847 	bl	8006c2c <__retarget_lock_init_recursive>
 8006b9e:	f7ff ff8d 	bl	8006abc <__sfp_lock_release>
 8006ba2:	0020      	movs	r0, r4
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	0029      	movs	r1, r5
 8006ba8:	6025      	str	r5, [r4, #0]
 8006baa:	60a5      	str	r5, [r4, #8]
 8006bac:	6065      	str	r5, [r4, #4]
 8006bae:	6125      	str	r5, [r4, #16]
 8006bb0:	6165      	str	r5, [r4, #20]
 8006bb2:	61a5      	str	r5, [r4, #24]
 8006bb4:	305c      	adds	r0, #92	; 0x5c
 8006bb6:	f7ff fc18 	bl	80063ea <memset>
 8006bba:	6365      	str	r5, [r4, #52]	; 0x34
 8006bbc:	63a5      	str	r5, [r4, #56]	; 0x38
 8006bbe:	64a5      	str	r5, [r4, #72]	; 0x48
 8006bc0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006bc2:	0020      	movs	r0, r4
 8006bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc6:	3468      	adds	r4, #104	; 0x68
 8006bc8:	e7d7      	b.n	8006b7a <__sfp+0x1e>
 8006bca:	2104      	movs	r1, #4
 8006bcc:	0038      	movs	r0, r7
 8006bce:	f7ff ff57 	bl	8006a80 <__sfmoreglue>
 8006bd2:	1e04      	subs	r4, r0, #0
 8006bd4:	6030      	str	r0, [r6, #0]
 8006bd6:	d1d5      	bne.n	8006b84 <__sfp+0x28>
 8006bd8:	f7ff ff70 	bl	8006abc <__sfp_lock_release>
 8006bdc:	230c      	movs	r3, #12
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	e7ef      	b.n	8006bc2 <__sfp+0x66>
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	08007de4 	.word	0x08007de4
 8006be8:	ffff0001 	.word	0xffff0001

08006bec <_fwalk_reent>:
 8006bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bee:	0004      	movs	r4, r0
 8006bf0:	0006      	movs	r6, r0
 8006bf2:	2700      	movs	r7, #0
 8006bf4:	9101      	str	r1, [sp, #4]
 8006bf6:	3448      	adds	r4, #72	; 0x48
 8006bf8:	6863      	ldr	r3, [r4, #4]
 8006bfa:	68a5      	ldr	r5, [r4, #8]
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	9b00      	ldr	r3, [sp, #0]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	d504      	bpl.n	8006c10 <_fwalk_reent+0x24>
 8006c06:	6824      	ldr	r4, [r4, #0]
 8006c08:	2c00      	cmp	r4, #0
 8006c0a:	d1f5      	bne.n	8006bf8 <_fwalk_reent+0xc>
 8006c0c:	0038      	movs	r0, r7
 8006c0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c10:	89ab      	ldrh	r3, [r5, #12]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d908      	bls.n	8006c28 <_fwalk_reent+0x3c>
 8006c16:	220e      	movs	r2, #14
 8006c18:	5eab      	ldrsh	r3, [r5, r2]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	d004      	beq.n	8006c28 <_fwalk_reent+0x3c>
 8006c1e:	0029      	movs	r1, r5
 8006c20:	0030      	movs	r0, r6
 8006c22:	9b01      	ldr	r3, [sp, #4]
 8006c24:	4798      	blx	r3
 8006c26:	4307      	orrs	r7, r0
 8006c28:	3568      	adds	r5, #104	; 0x68
 8006c2a:	e7e8      	b.n	8006bfe <_fwalk_reent+0x12>

08006c2c <__retarget_lock_init_recursive>:
 8006c2c:	4770      	bx	lr

08006c2e <__retarget_lock_acquire_recursive>:
 8006c2e:	4770      	bx	lr

08006c30 <__retarget_lock_release_recursive>:
 8006c30:	4770      	bx	lr
	...

08006c34 <__swhatbuf_r>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	000e      	movs	r6, r1
 8006c38:	001d      	movs	r5, r3
 8006c3a:	230e      	movs	r3, #14
 8006c3c:	5ec9      	ldrsh	r1, [r1, r3]
 8006c3e:	0014      	movs	r4, r2
 8006c40:	b096      	sub	sp, #88	; 0x58
 8006c42:	2900      	cmp	r1, #0
 8006c44:	da07      	bge.n	8006c56 <__swhatbuf_r+0x22>
 8006c46:	2300      	movs	r3, #0
 8006c48:	602b      	str	r3, [r5, #0]
 8006c4a:	89b3      	ldrh	r3, [r6, #12]
 8006c4c:	061b      	lsls	r3, r3, #24
 8006c4e:	d411      	bmi.n	8006c74 <__swhatbuf_r+0x40>
 8006c50:	2380      	movs	r3, #128	; 0x80
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	e00f      	b.n	8006c76 <__swhatbuf_r+0x42>
 8006c56:	466a      	mov	r2, sp
 8006c58:	f000 fdca 	bl	80077f0 <_fstat_r>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	dbf2      	blt.n	8006c46 <__swhatbuf_r+0x12>
 8006c60:	23f0      	movs	r3, #240	; 0xf0
 8006c62:	9901      	ldr	r1, [sp, #4]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	4019      	ands	r1, r3
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <__swhatbuf_r+0x4c>)
 8006c6a:	18c9      	adds	r1, r1, r3
 8006c6c:	424b      	negs	r3, r1
 8006c6e:	4159      	adcs	r1, r3
 8006c70:	6029      	str	r1, [r5, #0]
 8006c72:	e7ed      	b.n	8006c50 <__swhatbuf_r+0x1c>
 8006c74:	2340      	movs	r3, #64	; 0x40
 8006c76:	2000      	movs	r0, #0
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	b016      	add	sp, #88	; 0x58
 8006c7c:	bd70      	pop	{r4, r5, r6, pc}
 8006c7e:	46c0      	nop			; (mov r8, r8)
 8006c80:	ffffe000 	.word	0xffffe000

08006c84 <__smakebuf_r>:
 8006c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c86:	2602      	movs	r6, #2
 8006c88:	898b      	ldrh	r3, [r1, #12]
 8006c8a:	0005      	movs	r5, r0
 8006c8c:	000c      	movs	r4, r1
 8006c8e:	4233      	tst	r3, r6
 8006c90:	d006      	beq.n	8006ca0 <__smakebuf_r+0x1c>
 8006c92:	0023      	movs	r3, r4
 8006c94:	3347      	adds	r3, #71	; 0x47
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	6123      	str	r3, [r4, #16]
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	6163      	str	r3, [r4, #20]
 8006c9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006ca0:	466a      	mov	r2, sp
 8006ca2:	ab01      	add	r3, sp, #4
 8006ca4:	f7ff ffc6 	bl	8006c34 <__swhatbuf_r>
 8006ca8:	9900      	ldr	r1, [sp, #0]
 8006caa:	0007      	movs	r7, r0
 8006cac:	0028      	movs	r0, r5
 8006cae:	f000 f877 	bl	8006da0 <_malloc_r>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d108      	bne.n	8006cc8 <__smakebuf_r+0x44>
 8006cb6:	220c      	movs	r2, #12
 8006cb8:	5ea3      	ldrsh	r3, [r4, r2]
 8006cba:	059a      	lsls	r2, r3, #22
 8006cbc:	d4ef      	bmi.n	8006c9e <__smakebuf_r+0x1a>
 8006cbe:	2203      	movs	r2, #3
 8006cc0:	4393      	bics	r3, r2
 8006cc2:	431e      	orrs	r6, r3
 8006cc4:	81a6      	strh	r6, [r4, #12]
 8006cc6:	e7e4      	b.n	8006c92 <__smakebuf_r+0xe>
 8006cc8:	4b0f      	ldr	r3, [pc, #60]	; (8006d08 <__smakebuf_r+0x84>)
 8006cca:	62ab      	str	r3, [r5, #40]	; 0x28
 8006ccc:	2380      	movs	r3, #128	; 0x80
 8006cce:	89a2      	ldrh	r2, [r4, #12]
 8006cd0:	6020      	str	r0, [r4, #0]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	81a3      	strh	r3, [r4, #12]
 8006cd6:	9b00      	ldr	r3, [sp, #0]
 8006cd8:	6120      	str	r0, [r4, #16]
 8006cda:	6163      	str	r3, [r4, #20]
 8006cdc:	9b01      	ldr	r3, [sp, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00d      	beq.n	8006cfe <__smakebuf_r+0x7a>
 8006ce2:	0028      	movs	r0, r5
 8006ce4:	230e      	movs	r3, #14
 8006ce6:	5ee1      	ldrsh	r1, [r4, r3]
 8006ce8:	f000 fd94 	bl	8007814 <_isatty_r>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d006      	beq.n	8006cfe <__smakebuf_r+0x7a>
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	89a3      	ldrh	r3, [r4, #12]
 8006cf4:	4393      	bics	r3, r2
 8006cf6:	001a      	movs	r2, r3
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	81a3      	strh	r3, [r4, #12]
 8006cfe:	89a0      	ldrh	r0, [r4, #12]
 8006d00:	4307      	orrs	r7, r0
 8006d02:	81a7      	strh	r7, [r4, #12]
 8006d04:	e7cb      	b.n	8006c9e <__smakebuf_r+0x1a>
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	08006a71 	.word	0x08006a71

08006d0c <_free_r>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	0005      	movs	r5, r0
 8006d10:	2900      	cmp	r1, #0
 8006d12:	d010      	beq.n	8006d36 <_free_r+0x2a>
 8006d14:	1f0c      	subs	r4, r1, #4
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	da00      	bge.n	8006d1e <_free_r+0x12>
 8006d1c:	18e4      	adds	r4, r4, r3
 8006d1e:	0028      	movs	r0, r5
 8006d20:	f000 fdbc 	bl	800789c <__malloc_lock>
 8006d24:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <_free_r+0x90>)
 8006d26:	6813      	ldr	r3, [r2, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d105      	bne.n	8006d38 <_free_r+0x2c>
 8006d2c:	6063      	str	r3, [r4, #4]
 8006d2e:	6014      	str	r4, [r2, #0]
 8006d30:	0028      	movs	r0, r5
 8006d32:	f000 fdbb 	bl	80078ac <__malloc_unlock>
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	42a3      	cmp	r3, r4
 8006d3a:	d908      	bls.n	8006d4e <_free_r+0x42>
 8006d3c:	6821      	ldr	r1, [r4, #0]
 8006d3e:	1860      	adds	r0, r4, r1
 8006d40:	4283      	cmp	r3, r0
 8006d42:	d1f3      	bne.n	8006d2c <_free_r+0x20>
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	1841      	adds	r1, r0, r1
 8006d4a:	6021      	str	r1, [r4, #0]
 8006d4c:	e7ee      	b.n	8006d2c <_free_r+0x20>
 8006d4e:	001a      	movs	r2, r3
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <_free_r+0x4e>
 8006d56:	42a3      	cmp	r3, r4
 8006d58:	d9f9      	bls.n	8006d4e <_free_r+0x42>
 8006d5a:	6811      	ldr	r1, [r2, #0]
 8006d5c:	1850      	adds	r0, r2, r1
 8006d5e:	42a0      	cmp	r0, r4
 8006d60:	d10b      	bne.n	8006d7a <_free_r+0x6e>
 8006d62:	6820      	ldr	r0, [r4, #0]
 8006d64:	1809      	adds	r1, r1, r0
 8006d66:	1850      	adds	r0, r2, r1
 8006d68:	6011      	str	r1, [r2, #0]
 8006d6a:	4283      	cmp	r3, r0
 8006d6c:	d1e0      	bne.n	8006d30 <_free_r+0x24>
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	1841      	adds	r1, r0, r1
 8006d74:	6011      	str	r1, [r2, #0]
 8006d76:	6053      	str	r3, [r2, #4]
 8006d78:	e7da      	b.n	8006d30 <_free_r+0x24>
 8006d7a:	42a0      	cmp	r0, r4
 8006d7c:	d902      	bls.n	8006d84 <_free_r+0x78>
 8006d7e:	230c      	movs	r3, #12
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	e7d5      	b.n	8006d30 <_free_r+0x24>
 8006d84:	6821      	ldr	r1, [r4, #0]
 8006d86:	1860      	adds	r0, r4, r1
 8006d88:	4283      	cmp	r3, r0
 8006d8a:	d103      	bne.n	8006d94 <_free_r+0x88>
 8006d8c:	6818      	ldr	r0, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	1841      	adds	r1, r0, r1
 8006d92:	6021      	str	r1, [r4, #0]
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	6054      	str	r4, [r2, #4]
 8006d98:	e7ca      	b.n	8006d30 <_free_r+0x24>
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	2000031c 	.word	0x2000031c

08006da0 <_malloc_r>:
 8006da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da2:	2303      	movs	r3, #3
 8006da4:	1ccd      	adds	r5, r1, #3
 8006da6:	439d      	bics	r5, r3
 8006da8:	3508      	adds	r5, #8
 8006daa:	0006      	movs	r6, r0
 8006dac:	2d0c      	cmp	r5, #12
 8006dae:	d21f      	bcs.n	8006df0 <_malloc_r+0x50>
 8006db0:	250c      	movs	r5, #12
 8006db2:	42a9      	cmp	r1, r5
 8006db4:	d81e      	bhi.n	8006df4 <_malloc_r+0x54>
 8006db6:	0030      	movs	r0, r6
 8006db8:	f000 fd70 	bl	800789c <__malloc_lock>
 8006dbc:	4925      	ldr	r1, [pc, #148]	; (8006e54 <_malloc_r+0xb4>)
 8006dbe:	680a      	ldr	r2, [r1, #0]
 8006dc0:	0014      	movs	r4, r2
 8006dc2:	2c00      	cmp	r4, #0
 8006dc4:	d11a      	bne.n	8006dfc <_malloc_r+0x5c>
 8006dc6:	4f24      	ldr	r7, [pc, #144]	; (8006e58 <_malloc_r+0xb8>)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d104      	bne.n	8006dd8 <_malloc_r+0x38>
 8006dce:	0021      	movs	r1, r4
 8006dd0:	0030      	movs	r0, r6
 8006dd2:	f000 fc89 	bl	80076e8 <_sbrk_r>
 8006dd6:	6038      	str	r0, [r7, #0]
 8006dd8:	0029      	movs	r1, r5
 8006dda:	0030      	movs	r0, r6
 8006ddc:	f000 fc84 	bl	80076e8 <_sbrk_r>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d12b      	bne.n	8006e3c <_malloc_r+0x9c>
 8006de4:	230c      	movs	r3, #12
 8006de6:	0030      	movs	r0, r6
 8006de8:	6033      	str	r3, [r6, #0]
 8006dea:	f000 fd5f 	bl	80078ac <__malloc_unlock>
 8006dee:	e003      	b.n	8006df8 <_malloc_r+0x58>
 8006df0:	2d00      	cmp	r5, #0
 8006df2:	dade      	bge.n	8006db2 <_malloc_r+0x12>
 8006df4:	230c      	movs	r3, #12
 8006df6:	6033      	str	r3, [r6, #0]
 8006df8:	2000      	movs	r0, #0
 8006dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	1b5b      	subs	r3, r3, r5
 8006e00:	d419      	bmi.n	8006e36 <_malloc_r+0x96>
 8006e02:	2b0b      	cmp	r3, #11
 8006e04:	d903      	bls.n	8006e0e <_malloc_r+0x6e>
 8006e06:	6023      	str	r3, [r4, #0]
 8006e08:	18e4      	adds	r4, r4, r3
 8006e0a:	6025      	str	r5, [r4, #0]
 8006e0c:	e003      	b.n	8006e16 <_malloc_r+0x76>
 8006e0e:	6863      	ldr	r3, [r4, #4]
 8006e10:	42a2      	cmp	r2, r4
 8006e12:	d10e      	bne.n	8006e32 <_malloc_r+0x92>
 8006e14:	600b      	str	r3, [r1, #0]
 8006e16:	0030      	movs	r0, r6
 8006e18:	f000 fd48 	bl	80078ac <__malloc_unlock>
 8006e1c:	0020      	movs	r0, r4
 8006e1e:	2207      	movs	r2, #7
 8006e20:	300b      	adds	r0, #11
 8006e22:	1d23      	adds	r3, r4, #4
 8006e24:	4390      	bics	r0, r2
 8006e26:	1ac2      	subs	r2, r0, r3
 8006e28:	4298      	cmp	r0, r3
 8006e2a:	d0e6      	beq.n	8006dfa <_malloc_r+0x5a>
 8006e2c:	1a1b      	subs	r3, r3, r0
 8006e2e:	50a3      	str	r3, [r4, r2]
 8006e30:	e7e3      	b.n	8006dfa <_malloc_r+0x5a>
 8006e32:	6053      	str	r3, [r2, #4]
 8006e34:	e7ef      	b.n	8006e16 <_malloc_r+0x76>
 8006e36:	0022      	movs	r2, r4
 8006e38:	6864      	ldr	r4, [r4, #4]
 8006e3a:	e7c2      	b.n	8006dc2 <_malloc_r+0x22>
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	1cc4      	adds	r4, r0, #3
 8006e40:	439c      	bics	r4, r3
 8006e42:	42a0      	cmp	r0, r4
 8006e44:	d0e1      	beq.n	8006e0a <_malloc_r+0x6a>
 8006e46:	1a21      	subs	r1, r4, r0
 8006e48:	0030      	movs	r0, r6
 8006e4a:	f000 fc4d 	bl	80076e8 <_sbrk_r>
 8006e4e:	1c43      	adds	r3, r0, #1
 8006e50:	d1db      	bne.n	8006e0a <_malloc_r+0x6a>
 8006e52:	e7c7      	b.n	8006de4 <_malloc_r+0x44>
 8006e54:	2000031c 	.word	0x2000031c
 8006e58:	20000320 	.word	0x20000320

08006e5c <__ssputs_r>:
 8006e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e5e:	688e      	ldr	r6, [r1, #8]
 8006e60:	b085      	sub	sp, #20
 8006e62:	0007      	movs	r7, r0
 8006e64:	000c      	movs	r4, r1
 8006e66:	9203      	str	r2, [sp, #12]
 8006e68:	9301      	str	r3, [sp, #4]
 8006e6a:	429e      	cmp	r6, r3
 8006e6c:	d83c      	bhi.n	8006ee8 <__ssputs_r+0x8c>
 8006e6e:	2390      	movs	r3, #144	; 0x90
 8006e70:	898a      	ldrh	r2, [r1, #12]
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	421a      	tst	r2, r3
 8006e76:	d034      	beq.n	8006ee2 <__ssputs_r+0x86>
 8006e78:	2503      	movs	r5, #3
 8006e7a:	6909      	ldr	r1, [r1, #16]
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	1a5b      	subs	r3, r3, r1
 8006e80:	9302      	str	r3, [sp, #8]
 8006e82:	6963      	ldr	r3, [r4, #20]
 8006e84:	9802      	ldr	r0, [sp, #8]
 8006e86:	435d      	muls	r5, r3
 8006e88:	0feb      	lsrs	r3, r5, #31
 8006e8a:	195d      	adds	r5, r3, r5
 8006e8c:	9b01      	ldr	r3, [sp, #4]
 8006e8e:	106d      	asrs	r5, r5, #1
 8006e90:	3301      	adds	r3, #1
 8006e92:	181b      	adds	r3, r3, r0
 8006e94:	42ab      	cmp	r3, r5
 8006e96:	d900      	bls.n	8006e9a <__ssputs_r+0x3e>
 8006e98:	001d      	movs	r5, r3
 8006e9a:	0553      	lsls	r3, r2, #21
 8006e9c:	d532      	bpl.n	8006f04 <__ssputs_r+0xa8>
 8006e9e:	0029      	movs	r1, r5
 8006ea0:	0038      	movs	r0, r7
 8006ea2:	f7ff ff7d 	bl	8006da0 <_malloc_r>
 8006ea6:	1e06      	subs	r6, r0, #0
 8006ea8:	d109      	bne.n	8006ebe <__ssputs_r+0x62>
 8006eaa:	230c      	movs	r3, #12
 8006eac:	603b      	str	r3, [r7, #0]
 8006eae:	2340      	movs	r3, #64	; 0x40
 8006eb0:	2001      	movs	r0, #1
 8006eb2:	89a2      	ldrh	r2, [r4, #12]
 8006eb4:	4240      	negs	r0, r0
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	81a3      	strh	r3, [r4, #12]
 8006eba:	b005      	add	sp, #20
 8006ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ebe:	9a02      	ldr	r2, [sp, #8]
 8006ec0:	6921      	ldr	r1, [r4, #16]
 8006ec2:	f7ff fa89 	bl	80063d8 <memcpy>
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	4a14      	ldr	r2, [pc, #80]	; (8006f1c <__ssputs_r+0xc0>)
 8006eca:	401a      	ands	r2, r3
 8006ecc:	2380      	movs	r3, #128	; 0x80
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	81a3      	strh	r3, [r4, #12]
 8006ed2:	9b02      	ldr	r3, [sp, #8]
 8006ed4:	6126      	str	r6, [r4, #16]
 8006ed6:	18f6      	adds	r6, r6, r3
 8006ed8:	6026      	str	r6, [r4, #0]
 8006eda:	6165      	str	r5, [r4, #20]
 8006edc:	9e01      	ldr	r6, [sp, #4]
 8006ede:	1aed      	subs	r5, r5, r3
 8006ee0:	60a5      	str	r5, [r4, #8]
 8006ee2:	9b01      	ldr	r3, [sp, #4]
 8006ee4:	429e      	cmp	r6, r3
 8006ee6:	d900      	bls.n	8006eea <__ssputs_r+0x8e>
 8006ee8:	9e01      	ldr	r6, [sp, #4]
 8006eea:	0032      	movs	r2, r6
 8006eec:	9903      	ldr	r1, [sp, #12]
 8006eee:	6820      	ldr	r0, [r4, #0]
 8006ef0:	f000 fcc1 	bl	8007876 <memmove>
 8006ef4:	68a3      	ldr	r3, [r4, #8]
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	1b9b      	subs	r3, r3, r6
 8006efa:	60a3      	str	r3, [r4, #8]
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	199e      	adds	r6, r3, r6
 8006f00:	6026      	str	r6, [r4, #0]
 8006f02:	e7da      	b.n	8006eba <__ssputs_r+0x5e>
 8006f04:	002a      	movs	r2, r5
 8006f06:	0038      	movs	r0, r7
 8006f08:	f000 fcd8 	bl	80078bc <_realloc_r>
 8006f0c:	1e06      	subs	r6, r0, #0
 8006f0e:	d1e0      	bne.n	8006ed2 <__ssputs_r+0x76>
 8006f10:	0038      	movs	r0, r7
 8006f12:	6921      	ldr	r1, [r4, #16]
 8006f14:	f7ff fefa 	bl	8006d0c <_free_r>
 8006f18:	e7c7      	b.n	8006eaa <__ssputs_r+0x4e>
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	fffffb7f 	.word	0xfffffb7f

08006f20 <_svfiprintf_r>:
 8006f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f22:	b0a1      	sub	sp, #132	; 0x84
 8006f24:	9003      	str	r0, [sp, #12]
 8006f26:	001d      	movs	r5, r3
 8006f28:	898b      	ldrh	r3, [r1, #12]
 8006f2a:	000f      	movs	r7, r1
 8006f2c:	0016      	movs	r6, r2
 8006f2e:	061b      	lsls	r3, r3, #24
 8006f30:	d511      	bpl.n	8006f56 <_svfiprintf_r+0x36>
 8006f32:	690b      	ldr	r3, [r1, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10e      	bne.n	8006f56 <_svfiprintf_r+0x36>
 8006f38:	2140      	movs	r1, #64	; 0x40
 8006f3a:	f7ff ff31 	bl	8006da0 <_malloc_r>
 8006f3e:	6038      	str	r0, [r7, #0]
 8006f40:	6138      	str	r0, [r7, #16]
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d105      	bne.n	8006f52 <_svfiprintf_r+0x32>
 8006f46:	230c      	movs	r3, #12
 8006f48:	9a03      	ldr	r2, [sp, #12]
 8006f4a:	3801      	subs	r0, #1
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	b021      	add	sp, #132	; 0x84
 8006f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f52:	2340      	movs	r3, #64	; 0x40
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	2300      	movs	r3, #0
 8006f58:	ac08      	add	r4, sp, #32
 8006f5a:	6163      	str	r3, [r4, #20]
 8006f5c:	3320      	adds	r3, #32
 8006f5e:	7663      	strb	r3, [r4, #25]
 8006f60:	3310      	adds	r3, #16
 8006f62:	76a3      	strb	r3, [r4, #26]
 8006f64:	9507      	str	r5, [sp, #28]
 8006f66:	0035      	movs	r5, r6
 8006f68:	782b      	ldrb	r3, [r5, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <_svfiprintf_r+0x52>
 8006f6e:	2b25      	cmp	r3, #37	; 0x25
 8006f70:	d147      	bne.n	8007002 <_svfiprintf_r+0xe2>
 8006f72:	1bab      	subs	r3, r5, r6
 8006f74:	9305      	str	r3, [sp, #20]
 8006f76:	42b5      	cmp	r5, r6
 8006f78:	d00c      	beq.n	8006f94 <_svfiprintf_r+0x74>
 8006f7a:	0032      	movs	r2, r6
 8006f7c:	0039      	movs	r1, r7
 8006f7e:	9803      	ldr	r0, [sp, #12]
 8006f80:	f7ff ff6c 	bl	8006e5c <__ssputs_r>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d100      	bne.n	8006f8a <_svfiprintf_r+0x6a>
 8006f88:	e0ae      	b.n	80070e8 <_svfiprintf_r+0x1c8>
 8006f8a:	6962      	ldr	r2, [r4, #20]
 8006f8c:	9b05      	ldr	r3, [sp, #20]
 8006f8e:	4694      	mov	ip, r2
 8006f90:	4463      	add	r3, ip
 8006f92:	6163      	str	r3, [r4, #20]
 8006f94:	782b      	ldrb	r3, [r5, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d100      	bne.n	8006f9c <_svfiprintf_r+0x7c>
 8006f9a:	e0a5      	b.n	80070e8 <_svfiprintf_r+0x1c8>
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4252      	negs	r2, r2
 8006fa2:	6062      	str	r2, [r4, #4]
 8006fa4:	a904      	add	r1, sp, #16
 8006fa6:	3254      	adds	r2, #84	; 0x54
 8006fa8:	1852      	adds	r2, r2, r1
 8006faa:	1c6e      	adds	r6, r5, #1
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	60e3      	str	r3, [r4, #12]
 8006fb0:	60a3      	str	r3, [r4, #8]
 8006fb2:	7013      	strb	r3, [r2, #0]
 8006fb4:	65a3      	str	r3, [r4, #88]	; 0x58
 8006fb6:	2205      	movs	r2, #5
 8006fb8:	7831      	ldrb	r1, [r6, #0]
 8006fba:	4854      	ldr	r0, [pc, #336]	; (800710c <_svfiprintf_r+0x1ec>)
 8006fbc:	f000 fc50 	bl	8007860 <memchr>
 8006fc0:	1c75      	adds	r5, r6, #1
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d11f      	bne.n	8007006 <_svfiprintf_r+0xe6>
 8006fc6:	6822      	ldr	r2, [r4, #0]
 8006fc8:	06d3      	lsls	r3, r2, #27
 8006fca:	d504      	bpl.n	8006fd6 <_svfiprintf_r+0xb6>
 8006fcc:	2353      	movs	r3, #83	; 0x53
 8006fce:	a904      	add	r1, sp, #16
 8006fd0:	185b      	adds	r3, r3, r1
 8006fd2:	2120      	movs	r1, #32
 8006fd4:	7019      	strb	r1, [r3, #0]
 8006fd6:	0713      	lsls	r3, r2, #28
 8006fd8:	d504      	bpl.n	8006fe4 <_svfiprintf_r+0xc4>
 8006fda:	2353      	movs	r3, #83	; 0x53
 8006fdc:	a904      	add	r1, sp, #16
 8006fde:	185b      	adds	r3, r3, r1
 8006fe0:	212b      	movs	r1, #43	; 0x2b
 8006fe2:	7019      	strb	r1, [r3, #0]
 8006fe4:	7833      	ldrb	r3, [r6, #0]
 8006fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8006fe8:	d016      	beq.n	8007018 <_svfiprintf_r+0xf8>
 8006fea:	0035      	movs	r5, r6
 8006fec:	2100      	movs	r1, #0
 8006fee:	200a      	movs	r0, #10
 8006ff0:	68e3      	ldr	r3, [r4, #12]
 8006ff2:	782a      	ldrb	r2, [r5, #0]
 8006ff4:	1c6e      	adds	r6, r5, #1
 8006ff6:	3a30      	subs	r2, #48	; 0x30
 8006ff8:	2a09      	cmp	r2, #9
 8006ffa:	d94e      	bls.n	800709a <_svfiprintf_r+0x17a>
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	d111      	bne.n	8007024 <_svfiprintf_r+0x104>
 8007000:	e017      	b.n	8007032 <_svfiprintf_r+0x112>
 8007002:	3501      	adds	r5, #1
 8007004:	e7b0      	b.n	8006f68 <_svfiprintf_r+0x48>
 8007006:	4b41      	ldr	r3, [pc, #260]	; (800710c <_svfiprintf_r+0x1ec>)
 8007008:	6822      	ldr	r2, [r4, #0]
 800700a:	1ac0      	subs	r0, r0, r3
 800700c:	2301      	movs	r3, #1
 800700e:	4083      	lsls	r3, r0
 8007010:	4313      	orrs	r3, r2
 8007012:	002e      	movs	r6, r5
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	e7ce      	b.n	8006fb6 <_svfiprintf_r+0x96>
 8007018:	9b07      	ldr	r3, [sp, #28]
 800701a:	1d19      	adds	r1, r3, #4
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	9107      	str	r1, [sp, #28]
 8007020:	2b00      	cmp	r3, #0
 8007022:	db01      	blt.n	8007028 <_svfiprintf_r+0x108>
 8007024:	930b      	str	r3, [sp, #44]	; 0x2c
 8007026:	e004      	b.n	8007032 <_svfiprintf_r+0x112>
 8007028:	425b      	negs	r3, r3
 800702a:	60e3      	str	r3, [r4, #12]
 800702c:	2302      	movs	r3, #2
 800702e:	4313      	orrs	r3, r2
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	782b      	ldrb	r3, [r5, #0]
 8007034:	2b2e      	cmp	r3, #46	; 0x2e
 8007036:	d10a      	bne.n	800704e <_svfiprintf_r+0x12e>
 8007038:	786b      	ldrb	r3, [r5, #1]
 800703a:	2b2a      	cmp	r3, #42	; 0x2a
 800703c:	d135      	bne.n	80070aa <_svfiprintf_r+0x18a>
 800703e:	9b07      	ldr	r3, [sp, #28]
 8007040:	3502      	adds	r5, #2
 8007042:	1d1a      	adds	r2, r3, #4
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	9207      	str	r2, [sp, #28]
 8007048:	2b00      	cmp	r3, #0
 800704a:	db2b      	blt.n	80070a4 <_svfiprintf_r+0x184>
 800704c:	9309      	str	r3, [sp, #36]	; 0x24
 800704e:	4e30      	ldr	r6, [pc, #192]	; (8007110 <_svfiprintf_r+0x1f0>)
 8007050:	2203      	movs	r2, #3
 8007052:	0030      	movs	r0, r6
 8007054:	7829      	ldrb	r1, [r5, #0]
 8007056:	f000 fc03 	bl	8007860 <memchr>
 800705a:	2800      	cmp	r0, #0
 800705c:	d006      	beq.n	800706c <_svfiprintf_r+0x14c>
 800705e:	2340      	movs	r3, #64	; 0x40
 8007060:	1b80      	subs	r0, r0, r6
 8007062:	4083      	lsls	r3, r0
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	3501      	adds	r5, #1
 8007068:	4313      	orrs	r3, r2
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	7829      	ldrb	r1, [r5, #0]
 800706e:	2206      	movs	r2, #6
 8007070:	4828      	ldr	r0, [pc, #160]	; (8007114 <_svfiprintf_r+0x1f4>)
 8007072:	1c6e      	adds	r6, r5, #1
 8007074:	7621      	strb	r1, [r4, #24]
 8007076:	f000 fbf3 	bl	8007860 <memchr>
 800707a:	2800      	cmp	r0, #0
 800707c:	d03c      	beq.n	80070f8 <_svfiprintf_r+0x1d8>
 800707e:	4b26      	ldr	r3, [pc, #152]	; (8007118 <_svfiprintf_r+0x1f8>)
 8007080:	2b00      	cmp	r3, #0
 8007082:	d125      	bne.n	80070d0 <_svfiprintf_r+0x1b0>
 8007084:	2207      	movs	r2, #7
 8007086:	9b07      	ldr	r3, [sp, #28]
 8007088:	3307      	adds	r3, #7
 800708a:	4393      	bics	r3, r2
 800708c:	3308      	adds	r3, #8
 800708e:	9307      	str	r3, [sp, #28]
 8007090:	6963      	ldr	r3, [r4, #20]
 8007092:	9a04      	ldr	r2, [sp, #16]
 8007094:	189b      	adds	r3, r3, r2
 8007096:	6163      	str	r3, [r4, #20]
 8007098:	e765      	b.n	8006f66 <_svfiprintf_r+0x46>
 800709a:	4343      	muls	r3, r0
 800709c:	0035      	movs	r5, r6
 800709e:	2101      	movs	r1, #1
 80070a0:	189b      	adds	r3, r3, r2
 80070a2:	e7a6      	b.n	8006ff2 <_svfiprintf_r+0xd2>
 80070a4:	2301      	movs	r3, #1
 80070a6:	425b      	negs	r3, r3
 80070a8:	e7d0      	b.n	800704c <_svfiprintf_r+0x12c>
 80070aa:	2300      	movs	r3, #0
 80070ac:	200a      	movs	r0, #10
 80070ae:	001a      	movs	r2, r3
 80070b0:	3501      	adds	r5, #1
 80070b2:	6063      	str	r3, [r4, #4]
 80070b4:	7829      	ldrb	r1, [r5, #0]
 80070b6:	1c6e      	adds	r6, r5, #1
 80070b8:	3930      	subs	r1, #48	; 0x30
 80070ba:	2909      	cmp	r1, #9
 80070bc:	d903      	bls.n	80070c6 <_svfiprintf_r+0x1a6>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0c5      	beq.n	800704e <_svfiprintf_r+0x12e>
 80070c2:	9209      	str	r2, [sp, #36]	; 0x24
 80070c4:	e7c3      	b.n	800704e <_svfiprintf_r+0x12e>
 80070c6:	4342      	muls	r2, r0
 80070c8:	0035      	movs	r5, r6
 80070ca:	2301      	movs	r3, #1
 80070cc:	1852      	adds	r2, r2, r1
 80070ce:	e7f1      	b.n	80070b4 <_svfiprintf_r+0x194>
 80070d0:	ab07      	add	r3, sp, #28
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	003a      	movs	r2, r7
 80070d6:	0021      	movs	r1, r4
 80070d8:	4b10      	ldr	r3, [pc, #64]	; (800711c <_svfiprintf_r+0x1fc>)
 80070da:	9803      	ldr	r0, [sp, #12]
 80070dc:	e000      	b.n	80070e0 <_svfiprintf_r+0x1c0>
 80070de:	bf00      	nop
 80070e0:	9004      	str	r0, [sp, #16]
 80070e2:	9b04      	ldr	r3, [sp, #16]
 80070e4:	3301      	adds	r3, #1
 80070e6:	d1d3      	bne.n	8007090 <_svfiprintf_r+0x170>
 80070e8:	89bb      	ldrh	r3, [r7, #12]
 80070ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 80070ec:	065b      	lsls	r3, r3, #25
 80070ee:	d400      	bmi.n	80070f2 <_svfiprintf_r+0x1d2>
 80070f0:	e72d      	b.n	8006f4e <_svfiprintf_r+0x2e>
 80070f2:	2001      	movs	r0, #1
 80070f4:	4240      	negs	r0, r0
 80070f6:	e72a      	b.n	8006f4e <_svfiprintf_r+0x2e>
 80070f8:	ab07      	add	r3, sp, #28
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	003a      	movs	r2, r7
 80070fe:	0021      	movs	r1, r4
 8007100:	4b06      	ldr	r3, [pc, #24]	; (800711c <_svfiprintf_r+0x1fc>)
 8007102:	9803      	ldr	r0, [sp, #12]
 8007104:	f000 f9de 	bl	80074c4 <_printf_i>
 8007108:	e7ea      	b.n	80070e0 <_svfiprintf_r+0x1c0>
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	08007f4c 	.word	0x08007f4c
 8007110:	08007f52 	.word	0x08007f52
 8007114:	08007f56 	.word	0x08007f56
 8007118:	00000000 	.word	0x00000000
 800711c:	08006e5d 	.word	0x08006e5d

08007120 <__sfputc_r>:
 8007120:	6893      	ldr	r3, [r2, #8]
 8007122:	b510      	push	{r4, lr}
 8007124:	3b01      	subs	r3, #1
 8007126:	6093      	str	r3, [r2, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	da04      	bge.n	8007136 <__sfputc_r+0x16>
 800712c:	6994      	ldr	r4, [r2, #24]
 800712e:	42a3      	cmp	r3, r4
 8007130:	db07      	blt.n	8007142 <__sfputc_r+0x22>
 8007132:	290a      	cmp	r1, #10
 8007134:	d005      	beq.n	8007142 <__sfputc_r+0x22>
 8007136:	6813      	ldr	r3, [r2, #0]
 8007138:	1c58      	adds	r0, r3, #1
 800713a:	6010      	str	r0, [r2, #0]
 800713c:	7019      	strb	r1, [r3, #0]
 800713e:	0008      	movs	r0, r1
 8007140:	bd10      	pop	{r4, pc}
 8007142:	f7ff fad7 	bl	80066f4 <__swbuf_r>
 8007146:	0001      	movs	r1, r0
 8007148:	e7f9      	b.n	800713e <__sfputc_r+0x1e>

0800714a <__sfputs_r>:
 800714a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714c:	0006      	movs	r6, r0
 800714e:	000f      	movs	r7, r1
 8007150:	0014      	movs	r4, r2
 8007152:	18d5      	adds	r5, r2, r3
 8007154:	42ac      	cmp	r4, r5
 8007156:	d101      	bne.n	800715c <__sfputs_r+0x12>
 8007158:	2000      	movs	r0, #0
 800715a:	e007      	b.n	800716c <__sfputs_r+0x22>
 800715c:	7821      	ldrb	r1, [r4, #0]
 800715e:	003a      	movs	r2, r7
 8007160:	0030      	movs	r0, r6
 8007162:	f7ff ffdd 	bl	8007120 <__sfputc_r>
 8007166:	3401      	adds	r4, #1
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	d1f3      	bne.n	8007154 <__sfputs_r+0xa>
 800716c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007170 <_vfiprintf_r>:
 8007170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007172:	b0a1      	sub	sp, #132	; 0x84
 8007174:	0006      	movs	r6, r0
 8007176:	000c      	movs	r4, r1
 8007178:	001f      	movs	r7, r3
 800717a:	9203      	str	r2, [sp, #12]
 800717c:	2800      	cmp	r0, #0
 800717e:	d004      	beq.n	800718a <_vfiprintf_r+0x1a>
 8007180:	6983      	ldr	r3, [r0, #24]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <_vfiprintf_r+0x1a>
 8007186:	f7ff fcb1 	bl	8006aec <__sinit>
 800718a:	4b8e      	ldr	r3, [pc, #568]	; (80073c4 <_vfiprintf_r+0x254>)
 800718c:	429c      	cmp	r4, r3
 800718e:	d11c      	bne.n	80071ca <_vfiprintf_r+0x5a>
 8007190:	6874      	ldr	r4, [r6, #4]
 8007192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007194:	07db      	lsls	r3, r3, #31
 8007196:	d405      	bmi.n	80071a4 <_vfiprintf_r+0x34>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	059b      	lsls	r3, r3, #22
 800719c:	d402      	bmi.n	80071a4 <_vfiprintf_r+0x34>
 800719e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071a0:	f7ff fd45 	bl	8006c2e <__retarget_lock_acquire_recursive>
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	071b      	lsls	r3, r3, #28
 80071a8:	d502      	bpl.n	80071b0 <_vfiprintf_r+0x40>
 80071aa:	6923      	ldr	r3, [r4, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d11d      	bne.n	80071ec <_vfiprintf_r+0x7c>
 80071b0:	0021      	movs	r1, r4
 80071b2:	0030      	movs	r0, r6
 80071b4:	f7ff faf4 	bl	80067a0 <__swsetup_r>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d017      	beq.n	80071ec <_vfiprintf_r+0x7c>
 80071bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071be:	07db      	lsls	r3, r3, #31
 80071c0:	d50d      	bpl.n	80071de <_vfiprintf_r+0x6e>
 80071c2:	2001      	movs	r0, #1
 80071c4:	4240      	negs	r0, r0
 80071c6:	b021      	add	sp, #132	; 0x84
 80071c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ca:	4b7f      	ldr	r3, [pc, #508]	; (80073c8 <_vfiprintf_r+0x258>)
 80071cc:	429c      	cmp	r4, r3
 80071ce:	d101      	bne.n	80071d4 <_vfiprintf_r+0x64>
 80071d0:	68b4      	ldr	r4, [r6, #8]
 80071d2:	e7de      	b.n	8007192 <_vfiprintf_r+0x22>
 80071d4:	4b7d      	ldr	r3, [pc, #500]	; (80073cc <_vfiprintf_r+0x25c>)
 80071d6:	429c      	cmp	r4, r3
 80071d8:	d1db      	bne.n	8007192 <_vfiprintf_r+0x22>
 80071da:	68f4      	ldr	r4, [r6, #12]
 80071dc:	e7d9      	b.n	8007192 <_vfiprintf_r+0x22>
 80071de:	89a3      	ldrh	r3, [r4, #12]
 80071e0:	059b      	lsls	r3, r3, #22
 80071e2:	d4ee      	bmi.n	80071c2 <_vfiprintf_r+0x52>
 80071e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071e6:	f7ff fd23 	bl	8006c30 <__retarget_lock_release_recursive>
 80071ea:	e7ea      	b.n	80071c2 <_vfiprintf_r+0x52>
 80071ec:	2300      	movs	r3, #0
 80071ee:	ad08      	add	r5, sp, #32
 80071f0:	616b      	str	r3, [r5, #20]
 80071f2:	3320      	adds	r3, #32
 80071f4:	766b      	strb	r3, [r5, #25]
 80071f6:	3310      	adds	r3, #16
 80071f8:	76ab      	strb	r3, [r5, #26]
 80071fa:	9707      	str	r7, [sp, #28]
 80071fc:	9f03      	ldr	r7, [sp, #12]
 80071fe:	783b      	ldrb	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <_vfiprintf_r+0x98>
 8007204:	2b25      	cmp	r3, #37	; 0x25
 8007206:	d14e      	bne.n	80072a6 <_vfiprintf_r+0x136>
 8007208:	9b03      	ldr	r3, [sp, #12]
 800720a:	1afb      	subs	r3, r7, r3
 800720c:	9305      	str	r3, [sp, #20]
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	429f      	cmp	r7, r3
 8007212:	d00d      	beq.n	8007230 <_vfiprintf_r+0xc0>
 8007214:	9b05      	ldr	r3, [sp, #20]
 8007216:	0021      	movs	r1, r4
 8007218:	0030      	movs	r0, r6
 800721a:	9a03      	ldr	r2, [sp, #12]
 800721c:	f7ff ff95 	bl	800714a <__sfputs_r>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d100      	bne.n	8007226 <_vfiprintf_r+0xb6>
 8007224:	e0b5      	b.n	8007392 <_vfiprintf_r+0x222>
 8007226:	696a      	ldr	r2, [r5, #20]
 8007228:	9b05      	ldr	r3, [sp, #20]
 800722a:	4694      	mov	ip, r2
 800722c:	4463      	add	r3, ip
 800722e:	616b      	str	r3, [r5, #20]
 8007230:	783b      	ldrb	r3, [r7, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d100      	bne.n	8007238 <_vfiprintf_r+0xc8>
 8007236:	e0ac      	b.n	8007392 <_vfiprintf_r+0x222>
 8007238:	2201      	movs	r2, #1
 800723a:	1c7b      	adds	r3, r7, #1
 800723c:	9303      	str	r3, [sp, #12]
 800723e:	2300      	movs	r3, #0
 8007240:	4252      	negs	r2, r2
 8007242:	606a      	str	r2, [r5, #4]
 8007244:	a904      	add	r1, sp, #16
 8007246:	3254      	adds	r2, #84	; 0x54
 8007248:	1852      	adds	r2, r2, r1
 800724a:	602b      	str	r3, [r5, #0]
 800724c:	60eb      	str	r3, [r5, #12]
 800724e:	60ab      	str	r3, [r5, #8]
 8007250:	7013      	strb	r3, [r2, #0]
 8007252:	65ab      	str	r3, [r5, #88]	; 0x58
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	2205      	movs	r2, #5
 8007258:	7819      	ldrb	r1, [r3, #0]
 800725a:	485d      	ldr	r0, [pc, #372]	; (80073d0 <_vfiprintf_r+0x260>)
 800725c:	f000 fb00 	bl	8007860 <memchr>
 8007260:	9b03      	ldr	r3, [sp, #12]
 8007262:	1c5f      	adds	r7, r3, #1
 8007264:	2800      	cmp	r0, #0
 8007266:	d120      	bne.n	80072aa <_vfiprintf_r+0x13a>
 8007268:	682a      	ldr	r2, [r5, #0]
 800726a:	06d3      	lsls	r3, r2, #27
 800726c:	d504      	bpl.n	8007278 <_vfiprintf_r+0x108>
 800726e:	2353      	movs	r3, #83	; 0x53
 8007270:	a904      	add	r1, sp, #16
 8007272:	185b      	adds	r3, r3, r1
 8007274:	2120      	movs	r1, #32
 8007276:	7019      	strb	r1, [r3, #0]
 8007278:	0713      	lsls	r3, r2, #28
 800727a:	d504      	bpl.n	8007286 <_vfiprintf_r+0x116>
 800727c:	2353      	movs	r3, #83	; 0x53
 800727e:	a904      	add	r1, sp, #16
 8007280:	185b      	adds	r3, r3, r1
 8007282:	212b      	movs	r1, #43	; 0x2b
 8007284:	7019      	strb	r1, [r3, #0]
 8007286:	9b03      	ldr	r3, [sp, #12]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b2a      	cmp	r3, #42	; 0x2a
 800728c:	d016      	beq.n	80072bc <_vfiprintf_r+0x14c>
 800728e:	2100      	movs	r1, #0
 8007290:	68eb      	ldr	r3, [r5, #12]
 8007292:	9f03      	ldr	r7, [sp, #12]
 8007294:	783a      	ldrb	r2, [r7, #0]
 8007296:	1c78      	adds	r0, r7, #1
 8007298:	3a30      	subs	r2, #48	; 0x30
 800729a:	4684      	mov	ip, r0
 800729c:	2a09      	cmp	r2, #9
 800729e:	d94f      	bls.n	8007340 <_vfiprintf_r+0x1d0>
 80072a0:	2900      	cmp	r1, #0
 80072a2:	d111      	bne.n	80072c8 <_vfiprintf_r+0x158>
 80072a4:	e017      	b.n	80072d6 <_vfiprintf_r+0x166>
 80072a6:	3701      	adds	r7, #1
 80072a8:	e7a9      	b.n	80071fe <_vfiprintf_r+0x8e>
 80072aa:	4b49      	ldr	r3, [pc, #292]	; (80073d0 <_vfiprintf_r+0x260>)
 80072ac:	682a      	ldr	r2, [r5, #0]
 80072ae:	1ac0      	subs	r0, r0, r3
 80072b0:	2301      	movs	r3, #1
 80072b2:	4083      	lsls	r3, r0
 80072b4:	4313      	orrs	r3, r2
 80072b6:	602b      	str	r3, [r5, #0]
 80072b8:	9703      	str	r7, [sp, #12]
 80072ba:	e7cb      	b.n	8007254 <_vfiprintf_r+0xe4>
 80072bc:	9b07      	ldr	r3, [sp, #28]
 80072be:	1d19      	adds	r1, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	9107      	str	r1, [sp, #28]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	db01      	blt.n	80072cc <_vfiprintf_r+0x15c>
 80072c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80072ca:	e004      	b.n	80072d6 <_vfiprintf_r+0x166>
 80072cc:	425b      	negs	r3, r3
 80072ce:	60eb      	str	r3, [r5, #12]
 80072d0:	2302      	movs	r3, #2
 80072d2:	4313      	orrs	r3, r2
 80072d4:	602b      	str	r3, [r5, #0]
 80072d6:	783b      	ldrb	r3, [r7, #0]
 80072d8:	2b2e      	cmp	r3, #46	; 0x2e
 80072da:	d10a      	bne.n	80072f2 <_vfiprintf_r+0x182>
 80072dc:	787b      	ldrb	r3, [r7, #1]
 80072de:	2b2a      	cmp	r3, #42	; 0x2a
 80072e0:	d137      	bne.n	8007352 <_vfiprintf_r+0x1e2>
 80072e2:	9b07      	ldr	r3, [sp, #28]
 80072e4:	3702      	adds	r7, #2
 80072e6:	1d1a      	adds	r2, r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	9207      	str	r2, [sp, #28]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	db2d      	blt.n	800734c <_vfiprintf_r+0x1dc>
 80072f0:	9309      	str	r3, [sp, #36]	; 0x24
 80072f2:	2203      	movs	r2, #3
 80072f4:	7839      	ldrb	r1, [r7, #0]
 80072f6:	4837      	ldr	r0, [pc, #220]	; (80073d4 <_vfiprintf_r+0x264>)
 80072f8:	f000 fab2 	bl	8007860 <memchr>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d007      	beq.n	8007310 <_vfiprintf_r+0x1a0>
 8007300:	4b34      	ldr	r3, [pc, #208]	; (80073d4 <_vfiprintf_r+0x264>)
 8007302:	682a      	ldr	r2, [r5, #0]
 8007304:	1ac0      	subs	r0, r0, r3
 8007306:	2340      	movs	r3, #64	; 0x40
 8007308:	4083      	lsls	r3, r0
 800730a:	4313      	orrs	r3, r2
 800730c:	3701      	adds	r7, #1
 800730e:	602b      	str	r3, [r5, #0]
 8007310:	7839      	ldrb	r1, [r7, #0]
 8007312:	1c7b      	adds	r3, r7, #1
 8007314:	2206      	movs	r2, #6
 8007316:	4830      	ldr	r0, [pc, #192]	; (80073d8 <_vfiprintf_r+0x268>)
 8007318:	9303      	str	r3, [sp, #12]
 800731a:	7629      	strb	r1, [r5, #24]
 800731c:	f000 faa0 	bl	8007860 <memchr>
 8007320:	2800      	cmp	r0, #0
 8007322:	d045      	beq.n	80073b0 <_vfiprintf_r+0x240>
 8007324:	4b2d      	ldr	r3, [pc, #180]	; (80073dc <_vfiprintf_r+0x26c>)
 8007326:	2b00      	cmp	r3, #0
 8007328:	d127      	bne.n	800737a <_vfiprintf_r+0x20a>
 800732a:	2207      	movs	r2, #7
 800732c:	9b07      	ldr	r3, [sp, #28]
 800732e:	3307      	adds	r3, #7
 8007330:	4393      	bics	r3, r2
 8007332:	3308      	adds	r3, #8
 8007334:	9307      	str	r3, [sp, #28]
 8007336:	696b      	ldr	r3, [r5, #20]
 8007338:	9a04      	ldr	r2, [sp, #16]
 800733a:	189b      	adds	r3, r3, r2
 800733c:	616b      	str	r3, [r5, #20]
 800733e:	e75d      	b.n	80071fc <_vfiprintf_r+0x8c>
 8007340:	210a      	movs	r1, #10
 8007342:	434b      	muls	r3, r1
 8007344:	4667      	mov	r7, ip
 8007346:	189b      	adds	r3, r3, r2
 8007348:	3909      	subs	r1, #9
 800734a:	e7a3      	b.n	8007294 <_vfiprintf_r+0x124>
 800734c:	2301      	movs	r3, #1
 800734e:	425b      	negs	r3, r3
 8007350:	e7ce      	b.n	80072f0 <_vfiprintf_r+0x180>
 8007352:	2300      	movs	r3, #0
 8007354:	001a      	movs	r2, r3
 8007356:	3701      	adds	r7, #1
 8007358:	606b      	str	r3, [r5, #4]
 800735a:	7839      	ldrb	r1, [r7, #0]
 800735c:	1c78      	adds	r0, r7, #1
 800735e:	3930      	subs	r1, #48	; 0x30
 8007360:	4684      	mov	ip, r0
 8007362:	2909      	cmp	r1, #9
 8007364:	d903      	bls.n	800736e <_vfiprintf_r+0x1fe>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0c3      	beq.n	80072f2 <_vfiprintf_r+0x182>
 800736a:	9209      	str	r2, [sp, #36]	; 0x24
 800736c:	e7c1      	b.n	80072f2 <_vfiprintf_r+0x182>
 800736e:	230a      	movs	r3, #10
 8007370:	435a      	muls	r2, r3
 8007372:	4667      	mov	r7, ip
 8007374:	1852      	adds	r2, r2, r1
 8007376:	3b09      	subs	r3, #9
 8007378:	e7ef      	b.n	800735a <_vfiprintf_r+0x1ea>
 800737a:	ab07      	add	r3, sp, #28
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	0022      	movs	r2, r4
 8007380:	0029      	movs	r1, r5
 8007382:	0030      	movs	r0, r6
 8007384:	4b16      	ldr	r3, [pc, #88]	; (80073e0 <_vfiprintf_r+0x270>)
 8007386:	e000      	b.n	800738a <_vfiprintf_r+0x21a>
 8007388:	bf00      	nop
 800738a:	9004      	str	r0, [sp, #16]
 800738c:	9b04      	ldr	r3, [sp, #16]
 800738e:	3301      	adds	r3, #1
 8007390:	d1d1      	bne.n	8007336 <_vfiprintf_r+0x1c6>
 8007392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007394:	07db      	lsls	r3, r3, #31
 8007396:	d405      	bmi.n	80073a4 <_vfiprintf_r+0x234>
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	059b      	lsls	r3, r3, #22
 800739c:	d402      	bmi.n	80073a4 <_vfiprintf_r+0x234>
 800739e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073a0:	f7ff fc46 	bl	8006c30 <__retarget_lock_release_recursive>
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	065b      	lsls	r3, r3, #25
 80073a8:	d500      	bpl.n	80073ac <_vfiprintf_r+0x23c>
 80073aa:	e70a      	b.n	80071c2 <_vfiprintf_r+0x52>
 80073ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 80073ae:	e70a      	b.n	80071c6 <_vfiprintf_r+0x56>
 80073b0:	ab07      	add	r3, sp, #28
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	0022      	movs	r2, r4
 80073b6:	0029      	movs	r1, r5
 80073b8:	0030      	movs	r0, r6
 80073ba:	4b09      	ldr	r3, [pc, #36]	; (80073e0 <_vfiprintf_r+0x270>)
 80073bc:	f000 f882 	bl	80074c4 <_printf_i>
 80073c0:	e7e3      	b.n	800738a <_vfiprintf_r+0x21a>
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	08007f0c 	.word	0x08007f0c
 80073c8:	08007f2c 	.word	0x08007f2c
 80073cc:	08007eec 	.word	0x08007eec
 80073d0:	08007f4c 	.word	0x08007f4c
 80073d4:	08007f52 	.word	0x08007f52
 80073d8:	08007f56 	.word	0x08007f56
 80073dc:	00000000 	.word	0x00000000
 80073e0:	0800714b 	.word	0x0800714b

080073e4 <_printf_common>:
 80073e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073e6:	0015      	movs	r5, r2
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	688a      	ldr	r2, [r1, #8]
 80073ec:	690b      	ldr	r3, [r1, #16]
 80073ee:	000c      	movs	r4, r1
 80073f0:	9000      	str	r0, [sp, #0]
 80073f2:	4293      	cmp	r3, r2
 80073f4:	da00      	bge.n	80073f8 <_printf_common+0x14>
 80073f6:	0013      	movs	r3, r2
 80073f8:	0022      	movs	r2, r4
 80073fa:	602b      	str	r3, [r5, #0]
 80073fc:	3243      	adds	r2, #67	; 0x43
 80073fe:	7812      	ldrb	r2, [r2, #0]
 8007400:	2a00      	cmp	r2, #0
 8007402:	d001      	beq.n	8007408 <_printf_common+0x24>
 8007404:	3301      	adds	r3, #1
 8007406:	602b      	str	r3, [r5, #0]
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	069b      	lsls	r3, r3, #26
 800740c:	d502      	bpl.n	8007414 <_printf_common+0x30>
 800740e:	682b      	ldr	r3, [r5, #0]
 8007410:	3302      	adds	r3, #2
 8007412:	602b      	str	r3, [r5, #0]
 8007414:	6822      	ldr	r2, [r4, #0]
 8007416:	2306      	movs	r3, #6
 8007418:	0017      	movs	r7, r2
 800741a:	401f      	ands	r7, r3
 800741c:	421a      	tst	r2, r3
 800741e:	d027      	beq.n	8007470 <_printf_common+0x8c>
 8007420:	0023      	movs	r3, r4
 8007422:	3343      	adds	r3, #67	; 0x43
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	1e5a      	subs	r2, r3, #1
 8007428:	4193      	sbcs	r3, r2
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	0692      	lsls	r2, r2, #26
 800742e:	d430      	bmi.n	8007492 <_printf_common+0xae>
 8007430:	0022      	movs	r2, r4
 8007432:	9901      	ldr	r1, [sp, #4]
 8007434:	9800      	ldr	r0, [sp, #0]
 8007436:	9e08      	ldr	r6, [sp, #32]
 8007438:	3243      	adds	r2, #67	; 0x43
 800743a:	47b0      	blx	r6
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d025      	beq.n	800748c <_printf_common+0xa8>
 8007440:	2306      	movs	r3, #6
 8007442:	6820      	ldr	r0, [r4, #0]
 8007444:	682a      	ldr	r2, [r5, #0]
 8007446:	68e1      	ldr	r1, [r4, #12]
 8007448:	2500      	movs	r5, #0
 800744a:	4003      	ands	r3, r0
 800744c:	2b04      	cmp	r3, #4
 800744e:	d103      	bne.n	8007458 <_printf_common+0x74>
 8007450:	1a8d      	subs	r5, r1, r2
 8007452:	43eb      	mvns	r3, r5
 8007454:	17db      	asrs	r3, r3, #31
 8007456:	401d      	ands	r5, r3
 8007458:	68a3      	ldr	r3, [r4, #8]
 800745a:	6922      	ldr	r2, [r4, #16]
 800745c:	4293      	cmp	r3, r2
 800745e:	dd01      	ble.n	8007464 <_printf_common+0x80>
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	18ed      	adds	r5, r5, r3
 8007464:	2700      	movs	r7, #0
 8007466:	42bd      	cmp	r5, r7
 8007468:	d120      	bne.n	80074ac <_printf_common+0xc8>
 800746a:	2000      	movs	r0, #0
 800746c:	e010      	b.n	8007490 <_printf_common+0xac>
 800746e:	3701      	adds	r7, #1
 8007470:	68e3      	ldr	r3, [r4, #12]
 8007472:	682a      	ldr	r2, [r5, #0]
 8007474:	1a9b      	subs	r3, r3, r2
 8007476:	42bb      	cmp	r3, r7
 8007478:	ddd2      	ble.n	8007420 <_printf_common+0x3c>
 800747a:	0022      	movs	r2, r4
 800747c:	2301      	movs	r3, #1
 800747e:	9901      	ldr	r1, [sp, #4]
 8007480:	9800      	ldr	r0, [sp, #0]
 8007482:	9e08      	ldr	r6, [sp, #32]
 8007484:	3219      	adds	r2, #25
 8007486:	47b0      	blx	r6
 8007488:	1c43      	adds	r3, r0, #1
 800748a:	d1f0      	bne.n	800746e <_printf_common+0x8a>
 800748c:	2001      	movs	r0, #1
 800748e:	4240      	negs	r0, r0
 8007490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007492:	2030      	movs	r0, #48	; 0x30
 8007494:	18e1      	adds	r1, r4, r3
 8007496:	3143      	adds	r1, #67	; 0x43
 8007498:	7008      	strb	r0, [r1, #0]
 800749a:	0021      	movs	r1, r4
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	3145      	adds	r1, #69	; 0x45
 80074a0:	7809      	ldrb	r1, [r1, #0]
 80074a2:	18a2      	adds	r2, r4, r2
 80074a4:	3243      	adds	r2, #67	; 0x43
 80074a6:	3302      	adds	r3, #2
 80074a8:	7011      	strb	r1, [r2, #0]
 80074aa:	e7c1      	b.n	8007430 <_printf_common+0x4c>
 80074ac:	0022      	movs	r2, r4
 80074ae:	2301      	movs	r3, #1
 80074b0:	9901      	ldr	r1, [sp, #4]
 80074b2:	9800      	ldr	r0, [sp, #0]
 80074b4:	9e08      	ldr	r6, [sp, #32]
 80074b6:	321a      	adds	r2, #26
 80074b8:	47b0      	blx	r6
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	d0e6      	beq.n	800748c <_printf_common+0xa8>
 80074be:	3701      	adds	r7, #1
 80074c0:	e7d1      	b.n	8007466 <_printf_common+0x82>
	...

080074c4 <_printf_i>:
 80074c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074c6:	b08b      	sub	sp, #44	; 0x2c
 80074c8:	9206      	str	r2, [sp, #24]
 80074ca:	000a      	movs	r2, r1
 80074cc:	3243      	adds	r2, #67	; 0x43
 80074ce:	9307      	str	r3, [sp, #28]
 80074d0:	9005      	str	r0, [sp, #20]
 80074d2:	9204      	str	r2, [sp, #16]
 80074d4:	7e0a      	ldrb	r2, [r1, #24]
 80074d6:	000c      	movs	r4, r1
 80074d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074da:	2a78      	cmp	r2, #120	; 0x78
 80074dc:	d806      	bhi.n	80074ec <_printf_i+0x28>
 80074de:	2a62      	cmp	r2, #98	; 0x62
 80074e0:	d808      	bhi.n	80074f4 <_printf_i+0x30>
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	d100      	bne.n	80074e8 <_printf_i+0x24>
 80074e6:	e0c0      	b.n	800766a <_printf_i+0x1a6>
 80074e8:	2a58      	cmp	r2, #88	; 0x58
 80074ea:	d052      	beq.n	8007592 <_printf_i+0xce>
 80074ec:	0026      	movs	r6, r4
 80074ee:	3642      	adds	r6, #66	; 0x42
 80074f0:	7032      	strb	r2, [r6, #0]
 80074f2:	e022      	b.n	800753a <_printf_i+0x76>
 80074f4:	0010      	movs	r0, r2
 80074f6:	3863      	subs	r0, #99	; 0x63
 80074f8:	2815      	cmp	r0, #21
 80074fa:	d8f7      	bhi.n	80074ec <_printf_i+0x28>
 80074fc:	f7f8 fe12 	bl	8000124 <__gnu_thumb1_case_shi>
 8007500:	001f0016 	.word	0x001f0016
 8007504:	fff6fff6 	.word	0xfff6fff6
 8007508:	fff6fff6 	.word	0xfff6fff6
 800750c:	fff6001f 	.word	0xfff6001f
 8007510:	fff6fff6 	.word	0xfff6fff6
 8007514:	00a8fff6 	.word	0x00a8fff6
 8007518:	009a0036 	.word	0x009a0036
 800751c:	fff6fff6 	.word	0xfff6fff6
 8007520:	fff600b9 	.word	0xfff600b9
 8007524:	fff60036 	.word	0xfff60036
 8007528:	009efff6 	.word	0x009efff6
 800752c:	0026      	movs	r6, r4
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	3642      	adds	r6, #66	; 0x42
 8007532:	1d11      	adds	r1, r2, #4
 8007534:	6019      	str	r1, [r3, #0]
 8007536:	6813      	ldr	r3, [r2, #0]
 8007538:	7033      	strb	r3, [r6, #0]
 800753a:	2301      	movs	r3, #1
 800753c:	e0a7      	b.n	800768e <_printf_i+0x1ca>
 800753e:	6808      	ldr	r0, [r1, #0]
 8007540:	6819      	ldr	r1, [r3, #0]
 8007542:	1d0a      	adds	r2, r1, #4
 8007544:	0605      	lsls	r5, r0, #24
 8007546:	d50b      	bpl.n	8007560 <_printf_i+0x9c>
 8007548:	680d      	ldr	r5, [r1, #0]
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	2d00      	cmp	r5, #0
 800754e:	da03      	bge.n	8007558 <_printf_i+0x94>
 8007550:	232d      	movs	r3, #45	; 0x2d
 8007552:	9a04      	ldr	r2, [sp, #16]
 8007554:	426d      	negs	r5, r5
 8007556:	7013      	strb	r3, [r2, #0]
 8007558:	4b61      	ldr	r3, [pc, #388]	; (80076e0 <_printf_i+0x21c>)
 800755a:	270a      	movs	r7, #10
 800755c:	9303      	str	r3, [sp, #12]
 800755e:	e032      	b.n	80075c6 <_printf_i+0x102>
 8007560:	680d      	ldr	r5, [r1, #0]
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	0641      	lsls	r1, r0, #25
 8007566:	d5f1      	bpl.n	800754c <_printf_i+0x88>
 8007568:	b22d      	sxth	r5, r5
 800756a:	e7ef      	b.n	800754c <_printf_i+0x88>
 800756c:	680d      	ldr	r5, [r1, #0]
 800756e:	6819      	ldr	r1, [r3, #0]
 8007570:	1d08      	adds	r0, r1, #4
 8007572:	6018      	str	r0, [r3, #0]
 8007574:	062e      	lsls	r6, r5, #24
 8007576:	d501      	bpl.n	800757c <_printf_i+0xb8>
 8007578:	680d      	ldr	r5, [r1, #0]
 800757a:	e003      	b.n	8007584 <_printf_i+0xc0>
 800757c:	066d      	lsls	r5, r5, #25
 800757e:	d5fb      	bpl.n	8007578 <_printf_i+0xb4>
 8007580:	680d      	ldr	r5, [r1, #0]
 8007582:	b2ad      	uxth	r5, r5
 8007584:	4b56      	ldr	r3, [pc, #344]	; (80076e0 <_printf_i+0x21c>)
 8007586:	270a      	movs	r7, #10
 8007588:	9303      	str	r3, [sp, #12]
 800758a:	2a6f      	cmp	r2, #111	; 0x6f
 800758c:	d117      	bne.n	80075be <_printf_i+0xfa>
 800758e:	2708      	movs	r7, #8
 8007590:	e015      	b.n	80075be <_printf_i+0xfa>
 8007592:	3145      	adds	r1, #69	; 0x45
 8007594:	700a      	strb	r2, [r1, #0]
 8007596:	4a52      	ldr	r2, [pc, #328]	; (80076e0 <_printf_i+0x21c>)
 8007598:	9203      	str	r2, [sp, #12]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	6821      	ldr	r1, [r4, #0]
 800759e:	ca20      	ldmia	r2!, {r5}
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	0608      	lsls	r0, r1, #24
 80075a4:	d550      	bpl.n	8007648 <_printf_i+0x184>
 80075a6:	07cb      	lsls	r3, r1, #31
 80075a8:	d502      	bpl.n	80075b0 <_printf_i+0xec>
 80075aa:	2320      	movs	r3, #32
 80075ac:	4319      	orrs	r1, r3
 80075ae:	6021      	str	r1, [r4, #0]
 80075b0:	2710      	movs	r7, #16
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	d103      	bne.n	80075be <_printf_i+0xfa>
 80075b6:	2320      	movs	r3, #32
 80075b8:	6822      	ldr	r2, [r4, #0]
 80075ba:	439a      	bics	r2, r3
 80075bc:	6022      	str	r2, [r4, #0]
 80075be:	0023      	movs	r3, r4
 80075c0:	2200      	movs	r2, #0
 80075c2:	3343      	adds	r3, #67	; 0x43
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	6863      	ldr	r3, [r4, #4]
 80075c8:	60a3      	str	r3, [r4, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	db03      	blt.n	80075d6 <_printf_i+0x112>
 80075ce:	2204      	movs	r2, #4
 80075d0:	6821      	ldr	r1, [r4, #0]
 80075d2:	4391      	bics	r1, r2
 80075d4:	6021      	str	r1, [r4, #0]
 80075d6:	2d00      	cmp	r5, #0
 80075d8:	d102      	bne.n	80075e0 <_printf_i+0x11c>
 80075da:	9e04      	ldr	r6, [sp, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00c      	beq.n	80075fa <_printf_i+0x136>
 80075e0:	9e04      	ldr	r6, [sp, #16]
 80075e2:	0028      	movs	r0, r5
 80075e4:	0039      	movs	r1, r7
 80075e6:	f7f8 fe2d 	bl	8000244 <__aeabi_uidivmod>
 80075ea:	9b03      	ldr	r3, [sp, #12]
 80075ec:	3e01      	subs	r6, #1
 80075ee:	5c5b      	ldrb	r3, [r3, r1]
 80075f0:	7033      	strb	r3, [r6, #0]
 80075f2:	002b      	movs	r3, r5
 80075f4:	0005      	movs	r5, r0
 80075f6:	429f      	cmp	r7, r3
 80075f8:	d9f3      	bls.n	80075e2 <_printf_i+0x11e>
 80075fa:	2f08      	cmp	r7, #8
 80075fc:	d109      	bne.n	8007612 <_printf_i+0x14e>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	07db      	lsls	r3, r3, #31
 8007602:	d506      	bpl.n	8007612 <_printf_i+0x14e>
 8007604:	6863      	ldr	r3, [r4, #4]
 8007606:	6922      	ldr	r2, [r4, #16]
 8007608:	4293      	cmp	r3, r2
 800760a:	dc02      	bgt.n	8007612 <_printf_i+0x14e>
 800760c:	2330      	movs	r3, #48	; 0x30
 800760e:	3e01      	subs	r6, #1
 8007610:	7033      	strb	r3, [r6, #0]
 8007612:	9b04      	ldr	r3, [sp, #16]
 8007614:	1b9b      	subs	r3, r3, r6
 8007616:	6123      	str	r3, [r4, #16]
 8007618:	9b07      	ldr	r3, [sp, #28]
 800761a:	0021      	movs	r1, r4
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	9805      	ldr	r0, [sp, #20]
 8007620:	9b06      	ldr	r3, [sp, #24]
 8007622:	aa09      	add	r2, sp, #36	; 0x24
 8007624:	f7ff fede 	bl	80073e4 <_printf_common>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	d135      	bne.n	8007698 <_printf_i+0x1d4>
 800762c:	2001      	movs	r0, #1
 800762e:	4240      	negs	r0, r0
 8007630:	b00b      	add	sp, #44	; 0x2c
 8007632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007634:	2220      	movs	r2, #32
 8007636:	6809      	ldr	r1, [r1, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	6022      	str	r2, [r4, #0]
 800763c:	0022      	movs	r2, r4
 800763e:	2178      	movs	r1, #120	; 0x78
 8007640:	3245      	adds	r2, #69	; 0x45
 8007642:	7011      	strb	r1, [r2, #0]
 8007644:	4a27      	ldr	r2, [pc, #156]	; (80076e4 <_printf_i+0x220>)
 8007646:	e7a7      	b.n	8007598 <_printf_i+0xd4>
 8007648:	0648      	lsls	r0, r1, #25
 800764a:	d5ac      	bpl.n	80075a6 <_printf_i+0xe2>
 800764c:	b2ad      	uxth	r5, r5
 800764e:	e7aa      	b.n	80075a6 <_printf_i+0xe2>
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	680d      	ldr	r5, [r1, #0]
 8007654:	1d10      	adds	r0, r2, #4
 8007656:	6949      	ldr	r1, [r1, #20]
 8007658:	6018      	str	r0, [r3, #0]
 800765a:	6813      	ldr	r3, [r2, #0]
 800765c:	062e      	lsls	r6, r5, #24
 800765e:	d501      	bpl.n	8007664 <_printf_i+0x1a0>
 8007660:	6019      	str	r1, [r3, #0]
 8007662:	e002      	b.n	800766a <_printf_i+0x1a6>
 8007664:	066d      	lsls	r5, r5, #25
 8007666:	d5fb      	bpl.n	8007660 <_printf_i+0x19c>
 8007668:	8019      	strh	r1, [r3, #0]
 800766a:	2300      	movs	r3, #0
 800766c:	9e04      	ldr	r6, [sp, #16]
 800766e:	6123      	str	r3, [r4, #16]
 8007670:	e7d2      	b.n	8007618 <_printf_i+0x154>
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	1d11      	adds	r1, r2, #4
 8007676:	6019      	str	r1, [r3, #0]
 8007678:	6816      	ldr	r6, [r2, #0]
 800767a:	2100      	movs	r1, #0
 800767c:	0030      	movs	r0, r6
 800767e:	6862      	ldr	r2, [r4, #4]
 8007680:	f000 f8ee 	bl	8007860 <memchr>
 8007684:	2800      	cmp	r0, #0
 8007686:	d001      	beq.n	800768c <_printf_i+0x1c8>
 8007688:	1b80      	subs	r0, r0, r6
 800768a:	6060      	str	r0, [r4, #4]
 800768c:	6863      	ldr	r3, [r4, #4]
 800768e:	6123      	str	r3, [r4, #16]
 8007690:	2300      	movs	r3, #0
 8007692:	9a04      	ldr	r2, [sp, #16]
 8007694:	7013      	strb	r3, [r2, #0]
 8007696:	e7bf      	b.n	8007618 <_printf_i+0x154>
 8007698:	6923      	ldr	r3, [r4, #16]
 800769a:	0032      	movs	r2, r6
 800769c:	9906      	ldr	r1, [sp, #24]
 800769e:	9805      	ldr	r0, [sp, #20]
 80076a0:	9d07      	ldr	r5, [sp, #28]
 80076a2:	47a8      	blx	r5
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d0c1      	beq.n	800762c <_printf_i+0x168>
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	079b      	lsls	r3, r3, #30
 80076ac:	d415      	bmi.n	80076da <_printf_i+0x216>
 80076ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b0:	68e0      	ldr	r0, [r4, #12]
 80076b2:	4298      	cmp	r0, r3
 80076b4:	dabc      	bge.n	8007630 <_printf_i+0x16c>
 80076b6:	0018      	movs	r0, r3
 80076b8:	e7ba      	b.n	8007630 <_printf_i+0x16c>
 80076ba:	0022      	movs	r2, r4
 80076bc:	2301      	movs	r3, #1
 80076be:	9906      	ldr	r1, [sp, #24]
 80076c0:	9805      	ldr	r0, [sp, #20]
 80076c2:	9e07      	ldr	r6, [sp, #28]
 80076c4:	3219      	adds	r2, #25
 80076c6:	47b0      	blx	r6
 80076c8:	1c43      	adds	r3, r0, #1
 80076ca:	d0af      	beq.n	800762c <_printf_i+0x168>
 80076cc:	3501      	adds	r5, #1
 80076ce:	68e3      	ldr	r3, [r4, #12]
 80076d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d2:	1a9b      	subs	r3, r3, r2
 80076d4:	42ab      	cmp	r3, r5
 80076d6:	dcf0      	bgt.n	80076ba <_printf_i+0x1f6>
 80076d8:	e7e9      	b.n	80076ae <_printf_i+0x1ea>
 80076da:	2500      	movs	r5, #0
 80076dc:	e7f7      	b.n	80076ce <_printf_i+0x20a>
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	08007f5d 	.word	0x08007f5d
 80076e4:	08007f6e 	.word	0x08007f6e

080076e8 <_sbrk_r>:
 80076e8:	2300      	movs	r3, #0
 80076ea:	b570      	push	{r4, r5, r6, lr}
 80076ec:	4d06      	ldr	r5, [pc, #24]	; (8007708 <_sbrk_r+0x20>)
 80076ee:	0004      	movs	r4, r0
 80076f0:	0008      	movs	r0, r1
 80076f2:	602b      	str	r3, [r5, #0]
 80076f4:	f7fb f96a 	bl	80029cc <_sbrk>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d103      	bne.n	8007704 <_sbrk_r+0x1c>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d000      	beq.n	8007704 <_sbrk_r+0x1c>
 8007702:	6023      	str	r3, [r4, #0]
 8007704:	bd70      	pop	{r4, r5, r6, pc}
 8007706:	46c0      	nop			; (mov r8, r8)
 8007708:	20000774 	.word	0x20000774

0800770c <__sread>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	000c      	movs	r4, r1
 8007710:	250e      	movs	r5, #14
 8007712:	5f49      	ldrsh	r1, [r1, r5]
 8007714:	f000 f8f8 	bl	8007908 <_read_r>
 8007718:	2800      	cmp	r0, #0
 800771a:	db03      	blt.n	8007724 <__sread+0x18>
 800771c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800771e:	181b      	adds	r3, r3, r0
 8007720:	6563      	str	r3, [r4, #84]	; 0x54
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	4a02      	ldr	r2, [pc, #8]	; (8007730 <__sread+0x24>)
 8007728:	4013      	ands	r3, r2
 800772a:	81a3      	strh	r3, [r4, #12]
 800772c:	e7f9      	b.n	8007722 <__sread+0x16>
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	ffffefff 	.word	0xffffefff

08007734 <__swrite>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	001f      	movs	r7, r3
 8007738:	898b      	ldrh	r3, [r1, #12]
 800773a:	0005      	movs	r5, r0
 800773c:	000c      	movs	r4, r1
 800773e:	0016      	movs	r6, r2
 8007740:	05db      	lsls	r3, r3, #23
 8007742:	d505      	bpl.n	8007750 <__swrite+0x1c>
 8007744:	230e      	movs	r3, #14
 8007746:	5ec9      	ldrsh	r1, [r1, r3]
 8007748:	2200      	movs	r2, #0
 800774a:	2302      	movs	r3, #2
 800774c:	f000 f874 	bl	8007838 <_lseek_r>
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	4a05      	ldr	r2, [pc, #20]	; (8007768 <__swrite+0x34>)
 8007754:	0028      	movs	r0, r5
 8007756:	4013      	ands	r3, r2
 8007758:	81a3      	strh	r3, [r4, #12]
 800775a:	0032      	movs	r2, r6
 800775c:	230e      	movs	r3, #14
 800775e:	5ee1      	ldrsh	r1, [r4, r3]
 8007760:	003b      	movs	r3, r7
 8007762:	f000 f81f 	bl	80077a4 <_write_r>
 8007766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007768:	ffffefff 	.word	0xffffefff

0800776c <__sseek>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	000c      	movs	r4, r1
 8007770:	250e      	movs	r5, #14
 8007772:	5f49      	ldrsh	r1, [r1, r5]
 8007774:	f000 f860 	bl	8007838 <_lseek_r>
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	1c42      	adds	r2, r0, #1
 800777c:	d103      	bne.n	8007786 <__sseek+0x1a>
 800777e:	4a05      	ldr	r2, [pc, #20]	; (8007794 <__sseek+0x28>)
 8007780:	4013      	ands	r3, r2
 8007782:	81a3      	strh	r3, [r4, #12]
 8007784:	bd70      	pop	{r4, r5, r6, pc}
 8007786:	2280      	movs	r2, #128	; 0x80
 8007788:	0152      	lsls	r2, r2, #5
 800778a:	4313      	orrs	r3, r2
 800778c:	81a3      	strh	r3, [r4, #12]
 800778e:	6560      	str	r0, [r4, #84]	; 0x54
 8007790:	e7f8      	b.n	8007784 <__sseek+0x18>
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	ffffefff 	.word	0xffffefff

08007798 <__sclose>:
 8007798:	b510      	push	{r4, lr}
 800779a:	230e      	movs	r3, #14
 800779c:	5ec9      	ldrsh	r1, [r1, r3]
 800779e:	f000 f815 	bl	80077cc <_close_r>
 80077a2:	bd10      	pop	{r4, pc}

080077a4 <_write_r>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	0004      	movs	r4, r0
 80077a8:	0008      	movs	r0, r1
 80077aa:	0011      	movs	r1, r2
 80077ac:	001a      	movs	r2, r3
 80077ae:	2300      	movs	r3, #0
 80077b0:	4d05      	ldr	r5, [pc, #20]	; (80077c8 <_write_r+0x24>)
 80077b2:	602b      	str	r3, [r5, #0]
 80077b4:	f7fb f8a2 	bl	80028fc <_write>
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	d103      	bne.n	80077c4 <_write_r+0x20>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d000      	beq.n	80077c4 <_write_r+0x20>
 80077c2:	6023      	str	r3, [r4, #0]
 80077c4:	bd70      	pop	{r4, r5, r6, pc}
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	20000774 	.word	0x20000774

080077cc <_close_r>:
 80077cc:	2300      	movs	r3, #0
 80077ce:	b570      	push	{r4, r5, r6, lr}
 80077d0:	4d06      	ldr	r5, [pc, #24]	; (80077ec <_close_r+0x20>)
 80077d2:	0004      	movs	r4, r0
 80077d4:	0008      	movs	r0, r1
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	f7fb f8cb 	bl	8002972 <_close>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d103      	bne.n	80077e8 <_close_r+0x1c>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d000      	beq.n	80077e8 <_close_r+0x1c>
 80077e6:	6023      	str	r3, [r4, #0]
 80077e8:	bd70      	pop	{r4, r5, r6, pc}
 80077ea:	46c0      	nop			; (mov r8, r8)
 80077ec:	20000774 	.word	0x20000774

080077f0 <_fstat_r>:
 80077f0:	2300      	movs	r3, #0
 80077f2:	b570      	push	{r4, r5, r6, lr}
 80077f4:	4d06      	ldr	r5, [pc, #24]	; (8007810 <_fstat_r+0x20>)
 80077f6:	0004      	movs	r4, r0
 80077f8:	0008      	movs	r0, r1
 80077fa:	0011      	movs	r1, r2
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	f7fb f8c2 	bl	8002986 <_fstat>
 8007802:	1c43      	adds	r3, r0, #1
 8007804:	d103      	bne.n	800780e <_fstat_r+0x1e>
 8007806:	682b      	ldr	r3, [r5, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d000      	beq.n	800780e <_fstat_r+0x1e>
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	bd70      	pop	{r4, r5, r6, pc}
 8007810:	20000774 	.word	0x20000774

08007814 <_isatty_r>:
 8007814:	2300      	movs	r3, #0
 8007816:	b570      	push	{r4, r5, r6, lr}
 8007818:	4d06      	ldr	r5, [pc, #24]	; (8007834 <_isatty_r+0x20>)
 800781a:	0004      	movs	r4, r0
 800781c:	0008      	movs	r0, r1
 800781e:	602b      	str	r3, [r5, #0]
 8007820:	f7fb f8bf 	bl	80029a2 <_isatty>
 8007824:	1c43      	adds	r3, r0, #1
 8007826:	d103      	bne.n	8007830 <_isatty_r+0x1c>
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d000      	beq.n	8007830 <_isatty_r+0x1c>
 800782e:	6023      	str	r3, [r4, #0]
 8007830:	bd70      	pop	{r4, r5, r6, pc}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	20000774 	.word	0x20000774

08007838 <_lseek_r>:
 8007838:	b570      	push	{r4, r5, r6, lr}
 800783a:	0004      	movs	r4, r0
 800783c:	0008      	movs	r0, r1
 800783e:	0011      	movs	r1, r2
 8007840:	001a      	movs	r2, r3
 8007842:	2300      	movs	r3, #0
 8007844:	4d05      	ldr	r5, [pc, #20]	; (800785c <_lseek_r+0x24>)
 8007846:	602b      	str	r3, [r5, #0]
 8007848:	f7fb f8b4 	bl	80029b4 <_lseek>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d103      	bne.n	8007858 <_lseek_r+0x20>
 8007850:	682b      	ldr	r3, [r5, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d000      	beq.n	8007858 <_lseek_r+0x20>
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	bd70      	pop	{r4, r5, r6, pc}
 800785a:	46c0      	nop			; (mov r8, r8)
 800785c:	20000774 	.word	0x20000774

08007860 <memchr>:
 8007860:	b2c9      	uxtb	r1, r1
 8007862:	1882      	adds	r2, r0, r2
 8007864:	4290      	cmp	r0, r2
 8007866:	d101      	bne.n	800786c <memchr+0xc>
 8007868:	2000      	movs	r0, #0
 800786a:	4770      	bx	lr
 800786c:	7803      	ldrb	r3, [r0, #0]
 800786e:	428b      	cmp	r3, r1
 8007870:	d0fb      	beq.n	800786a <memchr+0xa>
 8007872:	3001      	adds	r0, #1
 8007874:	e7f6      	b.n	8007864 <memchr+0x4>

08007876 <memmove>:
 8007876:	b510      	push	{r4, lr}
 8007878:	4288      	cmp	r0, r1
 800787a:	d902      	bls.n	8007882 <memmove+0xc>
 800787c:	188b      	adds	r3, r1, r2
 800787e:	4298      	cmp	r0, r3
 8007880:	d303      	bcc.n	800788a <memmove+0x14>
 8007882:	2300      	movs	r3, #0
 8007884:	e007      	b.n	8007896 <memmove+0x20>
 8007886:	5c8b      	ldrb	r3, [r1, r2]
 8007888:	5483      	strb	r3, [r0, r2]
 800788a:	3a01      	subs	r2, #1
 800788c:	d2fb      	bcs.n	8007886 <memmove+0x10>
 800788e:	bd10      	pop	{r4, pc}
 8007890:	5ccc      	ldrb	r4, [r1, r3]
 8007892:	54c4      	strb	r4, [r0, r3]
 8007894:	3301      	adds	r3, #1
 8007896:	429a      	cmp	r2, r3
 8007898:	d1fa      	bne.n	8007890 <memmove+0x1a>
 800789a:	e7f8      	b.n	800788e <memmove+0x18>

0800789c <__malloc_lock>:
 800789c:	b510      	push	{r4, lr}
 800789e:	4802      	ldr	r0, [pc, #8]	; (80078a8 <__malloc_lock+0xc>)
 80078a0:	f7ff f9c5 	bl	8006c2e <__retarget_lock_acquire_recursive>
 80078a4:	bd10      	pop	{r4, pc}
 80078a6:	46c0      	nop			; (mov r8, r8)
 80078a8:	2000076c 	.word	0x2000076c

080078ac <__malloc_unlock>:
 80078ac:	b510      	push	{r4, lr}
 80078ae:	4802      	ldr	r0, [pc, #8]	; (80078b8 <__malloc_unlock+0xc>)
 80078b0:	f7ff f9be 	bl	8006c30 <__retarget_lock_release_recursive>
 80078b4:	bd10      	pop	{r4, pc}
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	2000076c 	.word	0x2000076c

080078bc <_realloc_r>:
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	0007      	movs	r7, r0
 80078c0:	000d      	movs	r5, r1
 80078c2:	0016      	movs	r6, r2
 80078c4:	2900      	cmp	r1, #0
 80078c6:	d105      	bne.n	80078d4 <_realloc_r+0x18>
 80078c8:	0011      	movs	r1, r2
 80078ca:	f7ff fa69 	bl	8006da0 <_malloc_r>
 80078ce:	0004      	movs	r4, r0
 80078d0:	0020      	movs	r0, r4
 80078d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d4:	2a00      	cmp	r2, #0
 80078d6:	d103      	bne.n	80078e0 <_realloc_r+0x24>
 80078d8:	f7ff fa18 	bl	8006d0c <_free_r>
 80078dc:	0034      	movs	r4, r6
 80078de:	e7f7      	b.n	80078d0 <_realloc_r+0x14>
 80078e0:	f000 f826 	bl	8007930 <_malloc_usable_size_r>
 80078e4:	002c      	movs	r4, r5
 80078e6:	42b0      	cmp	r0, r6
 80078e8:	d2f2      	bcs.n	80078d0 <_realloc_r+0x14>
 80078ea:	0031      	movs	r1, r6
 80078ec:	0038      	movs	r0, r7
 80078ee:	f7ff fa57 	bl	8006da0 <_malloc_r>
 80078f2:	1e04      	subs	r4, r0, #0
 80078f4:	d0ec      	beq.n	80078d0 <_realloc_r+0x14>
 80078f6:	0029      	movs	r1, r5
 80078f8:	0032      	movs	r2, r6
 80078fa:	f7fe fd6d 	bl	80063d8 <memcpy>
 80078fe:	0029      	movs	r1, r5
 8007900:	0038      	movs	r0, r7
 8007902:	f7ff fa03 	bl	8006d0c <_free_r>
 8007906:	e7e3      	b.n	80078d0 <_realloc_r+0x14>

08007908 <_read_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	0004      	movs	r4, r0
 800790c:	0008      	movs	r0, r1
 800790e:	0011      	movs	r1, r2
 8007910:	001a      	movs	r2, r3
 8007912:	2300      	movs	r3, #0
 8007914:	4d05      	ldr	r5, [pc, #20]	; (800792c <_read_r+0x24>)
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	f7fb f80e 	bl	8002938 <_read>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d103      	bne.n	8007928 <_read_r+0x20>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d000      	beq.n	8007928 <_read_r+0x20>
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	bd70      	pop	{r4, r5, r6, pc}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	20000774 	.word	0x20000774

08007930 <_malloc_usable_size_r>:
 8007930:	1f0b      	subs	r3, r1, #4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	1f18      	subs	r0, r3, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	da01      	bge.n	800793e <_malloc_usable_size_r+0xe>
 800793a:	580b      	ldr	r3, [r1, r0]
 800793c:	18c0      	adds	r0, r0, r3
 800793e:	4770      	bx	lr

08007940 <_init>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007946:	bc08      	pop	{r3}
 8007948:	469e      	mov	lr, r3
 800794a:	4770      	bx	lr

0800794c <_fini>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	46c0      	nop			; (mov r8, r8)
 8007950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007952:	bc08      	pop	{r3}
 8007954:	469e      	mov	lr, r3
 8007956:	4770      	bx	lr
